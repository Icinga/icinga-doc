<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="upgrading_idoutils" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="upgrading_idoutils2"/>Upgrading &name-idoutils; Database</title>

  <para>There may be a bug within the database scheme which has been fixed. If you are upgrading from an older &name-idoutils; version you
  also need to apply those fixes manually. If you are using rpm/deb packages please read the notes and/or ask the maintainer if he has added
  those modifications to the install routine.</para>

  <note>
    <para>Depending on the changes to be done and the size of your database it may take a while to update your database. Please try to be
    patient and don't abort the script as it may leave the data being corrupt.</para>
  </note>

  <para>The upgrade files can be found next to the database install files in
  <literal>/path/to/icinga-src/module/idoutils/db/yourrdbm/</literal>. The syntax is as follows:</para>

  <para><literal>&lt;rdbm&gt;-upgrade-&lt;version&gt;.sql</literal></para>

  <para>where &lt;rdbm&gt; could be mysql, pgsql or oracle and &lt;version&gt; points to the version you want to upgrade to.</para>

  <note>
    <para>If you are upgrading from an older version and there are other versions in between be advised that you need to apply those upgrade
    files with incremental steps!</para>
  </note>

  <para>E.g. you have 1.0RC1 installed and want to upgrade to 1.0.1 - you will have to upgrade to 1.0 Stable first and then apply the
  upgrade to 1.0.1.</para>

  <orderedlist>
    <listitem>
      <para>Backup your current database before upgrading!</para>
    </listitem>

    <listitem>
      <para>Check current &name-idoutils; version and the target version. Check if there are any version in between and upgrade incremental
      if necessary.</para>
    </listitem>

    <listitem>
      <para>Apply the upgrade(s) using a rdbm user with appropriate rights. You may use the upgradedb script, but this is not recommended
      (for MySQL only).</para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">MySQL</emphasis> <programlisting> $ mysql -u root -p &lt;dbname&gt; &lt; /path/to/icinga-src/module/idoutils/db/mysql/mysql-upgrade-&lt;version&gt;.sql</programlisting>
  <emphasis role="bold">Postgresql</emphasis> <programlisting> # su - postgres
 $ psql -U icinga -d icinga &lt; /path/to/icinga-src/module/idoutils/db/pgsql/pgsql-upgrade-&lt;version&gt;.sql</programlisting></para>

  <para><emphasis role="bold">Oracle</emphasis> <programlisting> # su - oracle
 $ sqlplus dbuser/dbpass
 SQL&gt; @oracle-upgrade-&lt;version&gt;.sql</programlisting></para>

  <anchor xml:id="upgrading_idoutils_1.5"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.7</emphasis></para>

  <para>Starting with Icinga 1.7 the location of the idomod shared library changed from <filename>$bindir/idomod.o</filename> to
  <filename>$libdir/idomod.so</filename>. Please note that the extension ".o" changed to ".so" as well. Depending on the method you are
  using you have to alter the "broker_module" entry in <filename>icinga.cfg</filename> OR the module definition in
  <filename>module/idomod.cfg</filename> to reflect the changes. The old file <filename>idomod.o</filename> will be removed if found. You
  will receive a warning during "make install-idoutils" about this change.</para>

  <para>Please have a look at the section "CHANGES for users" in the <filename>changelog</filename> as well.</para>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.5</emphasis></para>

  <para><emphasis role="bold">Oracle</emphasis></para>

  <note>
    <para>Using &name-idoutils; 1.5.0 with &name-oracle; requires at least OCILIB 3.9.2 - don't install 3.9.0 or 3.9.1 as they remain
    buggy.</para>
  </note>

  <para>Modify <filename>oracle-upgrade-1.5.0.sql</filename> and set the tablespaces for DATA, LOB, and IXT similar to the following lines.
  You can provide your existing tablespace names for all defines. <programlisting> /* set real TBS names on which you have quota, no checks are implemented!*/
 define DATATBS='icinga';
 define LOBTBS='icinga';
 define IXTBS='icinga';</programlisting></para>

  <note>
    <para>More detailed instructions using &name-idoutils; with &name-oracle; you can find in our wiki howto series about <link
    xlink:href="https://wiki.icinga.org/display/howtos/Icinga+and+Oracle">&name-oracle;</link>.</para>
  </note>

  <anchor xml:id="upgrading_idoutils_1.4"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.4</emphasis></para>

  <para><emphasis role="bold">Oracle</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>The minimum supported version is &name-oracle; 10g R2. Older versions may still work.</para>
    </listitem>

    <listitem>
      <para>The optional separation of data, index and lob tablespaces is introduced. Modify <filename>oracle-upgrade-1.4.0.sql</filename>
      and define your tablespaces. You can provide your existing tablespace names for all defines.</para>

      <para>Actions:</para>

      <itemizedlist>
        <listitem>
          <para>remove number limitations</para>
        </listitem>

        <listitem>
          <para>drop most of existing NOT NULL constraints</para>
        </listitem>

        <listitem>
          <para>label constraints</para>
        </listitem>

        <listitem>
          <para>recreate index and LOBs in new tablespaces</para>
        </listitem>

        <listitem>
          <para>set sequences NOCACHE</para>
        </listitem>

        <listitem>
          <para>changes &name-oracle; functions to trap NO_DATA exceptions</para>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <caution>
    <para>Upgrading &name-idoutils; for &name-oracle; to 1.4 requires some kind of "magic". Make sure to</para>

    <orderedlist>
      <listitem>
        <para>copy the complete <filename>upgrade</filename> folder</para>
      </listitem>

      <listitem>
        <para>edit <filename>oracle-upgrade-1.4.0.sql</filename> and set the tablespaces for DATA, LOB and IXT</para>
      </listitem>

      <listitem>
        <para>run the upgrade script</para>
      </listitem>
    </orderedlist>
  </caution>

  <anchor xml:id="upgrading_idoutils_1.3"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.3</emphasis></para>

  <para>&name-idoutils; 1.3 re-introduces the usage of the dbversion table in IDOUtils schema. The upgrade scripts will make sure that
  dbversion holds the current version while ido2db compares program version with database version and will print an error into syslog if not
  matching.</para>

  <para>Just apply the upgrading script for &name-idoutils; 1.3 in
  <literal>module/idoutils/db/&lt;rdbms&gt;/&lt;rdbm&gt;-upgrade-1.3.sql</literal> against your current schema (using incremental steps as
  usual, not leaving an upgrade version behind!).</para>

  <para>After you finished the upgrade you should check the database version.</para>

  <programlisting> SQL&gt; SELECT * FROM icinga_dbversion;</programlisting>

  <note>
    <para>The Oracle tablename is "dbversion" (instead of "icinga_dbversion").</para>
  </note>

  <anchor xml:id="upgrading_idoutils_1.0.3"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.0.3</emphasis></para>

  <para>There were some few minor changes:</para>

  <itemizedlist>
    <listitem>
      <para>change display_name to varchar(255) for mysql/oracle</para>
    </listitem>

    <listitem>
      <para>update pgsql schema, replace varchar(n) by text</para>
    </listitem>

    <listitem>
      <para>change configfile variables value to 1024 length for mysql/oracle</para>
    </listitem>
  </itemizedlist>

  <para>Apply the upgrading scripts for &name-idoutils; 1.0.3 as the general procedure applies for your RDBMS.</para>

  <anchor xml:id="upgrading_idoutils_1.0.2"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.0.2</emphasis></para>

  <para>There was a significant long lasting bug in IDOUtils which is now resolved in &name-icinga; 1.0.2: Everytime the core was restarted,
  the overall amount of objects was freshly inserted instead of using the old ones for actual config, status and historical relations. E.g.
  having 4k objects (hosts, services, contacts, etc), that meant restarting the core twice resulted in 4k + 4k + 4k = 12k objects.</para>

  <para>For config and live status data, this is by means not really important as their relations normally get cleaned when the core gets
  restarted. But for historical data, e.g. hostchecks before the restart were in another relation than newer hostchecks after the restart.
  That has led into data inconsistency which has been worked on to resolve that in an easy way - next to the IDOUtils bugfix itself.</para>

  <para>Therefore, next to the normal SQL upgrade scripts for 1.0.2 (e.g. mysql-upgrade-1.0.2.sql) an extended SQL script has been
  created.</para>

  <para>It catches up on each table and object_id with a single clustered query in order to fix the relation historical table 1..1 objects
  table. It also cleans up broken data caused by the restarts.</para>

  <para>Overall this has been tested and is now available for everyone to upgrade and fix those issues.</para>

  <para>Please apply the script as you like to - directly or step by step as commented in the script. Those scripts are provided as is
  without any warranty so please use at your own risk - if you only depend on live data, dropping and recreating the database will take less
  effort.</para>

  <para>* &lt;rdbms&gt;-upgrade-1.0.2-fix-object-relations.sql</para>

  <para>The "normal" upgrade script only is available for MySQL - the binary casts for case sensitive comparison were removed because of
  massive performance issues. Instead a new collation is introduced.</para>

  <para>* mysql-upgrade-1.0.2.sql</para>

  <anchor xml:id="upgrading_idoutils_1.0.1"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.0.1</emphasis></para>

  <para>Please make sure that you already have upgraded to Icinga IDOUtils 1.0 before reading this section! There have been several (big)
  changes made to all supported RDBMS to please be advised to read carefully! All database scripts are now reorganized within subfolders.
  Changes for all RDBMS are setting more indexes and also size modifications for the command_line column in several tables which exceeded
  255 characters. RDBMS specific changes and howtos are listed below:</para>

  <para><emphasis role="bold">MySQL</emphasis></para>

  <para>Change of the database engine from MYISAM to InnoDB. Reason for that mainly is row locks/transactions/rollbacks instead of a bit
  more speed at insert time.</para>

  <para>The upgrade script performs an ALTER TABLE statement. If you don't like that idea, you can also do the following:</para>

  <itemizedlist>
    <listitem>
      <para>Dump your existing database e.g.</para>

      <programlisting>#&gt; mysqldump -u root -p icinga &gt; icinga.sql</programlisting>
    </listitem>

    <listitem>
      <para>Change all entries from "MYISAM" to "InnoDB"</para>
    </listitem>

    <listitem>
      <para>Import the adapted dataset into a new database (if you want to use the old one make sure to drop that in the first place, and
      recreate only the database)</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">PostgreSQL</emphasis></para>

  <para>The systemcommands table was missing the column named output. This will be added during upgrading.</para>

  <para><emphasis role="bold">Oracle</emphasis></para>

  <para>First of all, make sure that you set open_cursors to more than the default 50. This will increase performance at several stages. The
  upgrade scripts will add two new procedures needed for the delete stuff written in DML.</para>

  <para>Furthermore there has been a rather huge change regarding the autoincrement sequence and after insert triggers (emulating the mysql
  autoincrement on primary key). The old routine has been completely dropped meaning all triggers and the autoincrement sequence will we
  removed during upgrading. As a replacement, sequences for each table will be added and used in current IDOUtils Oracle.</para>

  <para>With existing data sets this will lead into problems during importing - the sequences start at 1 while the primary key (id) will
  have a maximum. For that reason there is a basic procedure available which does the following: By given a sequence name and a table name,
  it extracts the maximum id value +1 from imported data and alters the sequence to start with this value instead.</para>

  <para>Please be advised to use that procedure yourself for all tables or on separated tables - it highly depends on your needs. The
  procedure is commented out, and provided as is without any warranty regarding data loss. Ask your DBA in case of upgrading with existing
  data.</para>

  <anchor xml:id="upgrading_idoutils_1.0"/>

  <para><emphasis role="bold">Upgrading &name-idoutils; to 1.0</emphasis></para>

  <para>There was a unique key failure in MySQL coming through the fork causing several tables to keep duplicated and useless rows. This
  concerns the following tables:</para>

  <itemizedlist>
    <listitem>
      <para>timedevents, timedeventqueue</para>
    </listitem>

    <listitem>
      <para>servicechecks</para>
    </listitem>

    <listitem>
      <para>systemcommands</para>
    </listitem>
  </itemizedlist>

  <para>If you look at the table creation e.g. servicechecks:</para>

  <programlisting> mysql&gt; show create table icinga_servicechecks;</programlisting>

  <para>you should see something like this</para>

  <programlisting> PRIMARY KEY (`servicecheck_id`),
 KEY `instance_id` (`instance_id`),
 KEY `service_object_id` (`service_object_id`),
 KEY `start_time` (`start_time`)</programlisting>

  <para>Changing this to</para>

  <programlisting> PRIMARY KEY (`servicecheck_id`),
 UNIQUE KEY `instance_id` (`instance_id`,`service_object_id`,`start_time`,`start_time_usec`)</programlisting>

  <para>will need your attention on the following procedure!</para>

  <para><emphasis role="bold">If you are upgrading from 1.0RC please be advised to use module/idoutils/db/mysql/mysql-upgrade-1.0.sql - if
  you are using an older version, please apply the incremental steps to get to 1.0RC first!</emphasis></para>

  <para>Please backup your database and stop ido2db before applying this patch!</para>

  <programlisting> #&gt; /etc/init.d/ido2db stop
 #&gt; mysql -u root -p icinga &lt; /path/to/icinga-src/module/idoutils/db/mysql/mysql-upgrade-1.0.sql</programlisting>

  <para>The patch will do the following through MySQL statements:</para>

  <itemizedlist>
    <listitem>
      <para>add a temporary column named 'active' to mark the updated row</para>
    </listitem>

    <listitem>
      <para>extract the needed information of two duplicate rows based on the unique constraint, update the second row and mark
      first=inactive, second=active</para>
    </listitem>

    <listitem>
      <para>delete all inactive marked rows</para>
    </listitem>

    <listitem>
      <para>drop false keys</para>
    </listitem>

    <listitem>
      <para>add unique key</para>
    </listitem>

    <listitem>
      <para>drop temporary column 'active'</para>
    </listitem>
  </itemizedlist>

  <para>This procedure will be executed for each table, so it might take quite a long time depending on your table size and/or db
  specs.</para>

  <para>If you changed something on the keys before please make sure you'll have the same database scheme applied as in 1.0RC otherwise the
  script will fail.</para>

  <indexterm zone="upgrading_idoutils">
    <primary>Upgrading &name-idoutils;</primary>
  </indexterm>
</section>
