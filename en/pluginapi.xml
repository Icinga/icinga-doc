<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="pluginapi" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="plugin_api" />&name-icinga; Plugin API</title>

  <para><emphasis role="bold">Other Resources</emphasis></para>

  <para>If you're looking at writing your own plugins for &name-icinga;, please make sure to visit these other resources:</para>

  <itemizedlist>
    <listitem>
      <para>The official <link xlink:href="http://sourceforge.net/projects/nagiosplug/">&name-nagios; plugin project
      website</link></para>
    </listitem>

    <listitem>
      <para>The official <link xlink:href="http://nagiosplug.sourceforge.net/developer-guidelines.html">&name-nagios; plugin
      development guidelines</link></para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Plugin Overview</emphasis></para>

  <para>Scripts and executables must do two things (at a minimum) in order to function as &name-icinga; plugins:</para>

  <itemizedlist>
    <listitem>
      <para>Exit with one of several possible return values</para>
    </listitem>

    <listitem>
      <para>Return at least one line of text output to STDOUT</para>
    </listitem>
  </itemizedlist>

  <para>The inner workings of your plugin are unimportant to &name-icinga;. Your plugin could check the status of a TCP port, run
  a database query, check disk free space, or do whatever else it needs to check something. The details will depend on what needs
  to be checked - that's up to you.</para>

  <para><emphasis role="bold">Return Code</emphasis></para>

  <para>&name-icinga; determines the status of a host or service by evaluating the return code from plugins. The following tables
  shows a list of valid return codes, along with their corresponding service or host states.</para>

  <informaltable frame="all">
    <tgroup cols="3">
      <colspec colname="c1" colwidth="5*" />

      <colspec colname="c2" colwidth="10*" />

      <colspec colname="c3" colwidth="50*" />

      <tbody>
        <row>
          <entry><para> <emphasis role="bold">Plugin Return Code</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Service State</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Host State</emphasis> </para></entry>
        </row>

        <row>
          <entry><para>0</para></entry>

          <entry><para>OK</para></entry>

          <entry><para>UP</para></entry>
        </row>

        <row>
          <entry><para>1</para></entry>

          <entry><para>WARNING</para></entry>

          <entry><para>UP or DOWN/UNREACHABLE*</para></entry>
        </row>

        <row>
          <entry><para>2</para></entry>

          <entry><para>CRITICAL</para></entry>

          <entry><para>DOWN/UNREACHABLE</para></entry>
        </row>

        <row>
          <entry><para>3</para></entry>

          <entry><para>UNKNOWN</para></entry>

          <entry><para>DOWN/UNREACHABLE</para></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">Plugin Output Spec</emphasis></para>

  <para>At a minimum, plugins should return at least one of text output but they can optionally return multiple lines of output.
  Plugins may also return optional performance data that can be processed by external applications. The basic format for plugin
  output is shown below:</para>

  <para><emphasis condition="red" role="color">TEXT OUTPUT</emphasis> | <emphasis condition="#FFA500" role="color">OPTIONAL
  PERFDATA</emphasis></para>

  <para><emphasis condition="blue" role="color">LONG TEXT LINE 1 LONG TEXT LINE 2 ... LONG TEXT LINE N</emphasis> | <emphasis
  condition="#FFA500" role="color">PERFDATA LINE 2</emphasis></para>

  <para><emphasis condition="#FFA500" role="color">PERFDATA LINE 3 ... PERFDATA LINE N</emphasis></para>

  <para>The performance data (shown in <emphasis condition="#FFA500" role="color">orange</emphasis>) is optional. If a plugin
  returns performance data in its output, it must separate the performance data from the other text output using a pipe (|)
  symbol. Additional lines of long text output (shown in <emphasis condition="blue" role="color">blue</emphasis>) are also
  optional.</para>

  <para><emphasis role="bold">Plugin Output Examples</emphasis></para>

  <para>Let's see some examples of possible plugin output...</para>

  <para><emphasis role="bold">Case 1: One line of output (text only)</emphasis></para>

  <para>Assume we have a plugin that returns one line of output that looks like this:</para>

  <para>DISK OK - free space: / 3326 MB (56%); If this plugin was used to perform a service check, the entire line of output will
  be stored in the <link linkend="macrolist-serviceoutput">$SERVICEOUTPUT$</link> macro.</para>

  <para><emphasis role="bold">Case 2: One line of output (text and perfdata)</emphasis></para>

  <para>A plugin can return optional performance data for use by external applications. To do this, the performance data must be
  separated from the text output with a pipe (|) symbol like such:</para>

  <para><emphasis condition="red" role="color">DISK OK - free space: / 3326 MB (56%);</emphasis> | <emphasis condition="#FFA500" role="color">/=2643MB;5948;5958;0;5968</emphasis></para>

  <para>If this plugin was used to perform a service check, the <emphasis condition="red" role="color">red</emphasis> portion of output
  (left of the pipe separator) will be stored in the <link linkend="macrolist-serviceoutput">$SERVICEOUTPUT$</link> macro and the
   <emphasis condition="red" role="color">orange</emphasis> portion of output (right of the pipe separator) will be stored in the <link
  linkend="macrolist-serviceperfdata">$SERVICEPERFDATA$</link> macro.</para>

  <para><emphasis role="bold">Case 3: Multiple lines of output (text and perfdata)</emphasis></para>

  <para>A plugin optionally returns multiple lines of both text output and perfdata, like such:</para>

  <simpara><emphasis condition="red" role="color">DISK OK - free space: / 3326 MB (56%);</emphasis></simpara>

  <para> | <emphasis condition="#FFA500" role="color">/=2643MB;5948;5958;0;5968</emphasis></para>

  <para><emphasis condition="blue" role="color">/ 15272 MB (77%);</emphasis></para>

  <para><emphasis condition="blue" role="color">/boot 68 MB (69%);</emphasis></para>

  <para><emphasis condition="blue" role="color">/home 69357 MB (27%);</emphasis></para>

  <para><emphasis condition="blue" role="color">/var/log 819 MB (84%);</emphasis> | <emphasis condition="#FFA500"
  role="color">/boot=68MB;88;93;0;98</emphasis></para>

  <para><emphasis condition="#FFA500" role="color">/home=69357MB;253404;253409;0;253414</emphasis></para>

  <para><emphasis condition="#FFA500" role="color">/var/log=818MB;970;975;0;980</emphasis></para>

  <para>If this plugin was used to perform a service check, the <emphasis condition="red" role="color">red</emphasis> portion of
  first line of output (left of the pipe separator) will be stored in the <link
  linkend="macrolist-serviceoutput">$SERVICEOUTPUT$</link> macro. The <emphasis condition="#FFA500" role="color">orange</emphasis>
  portions of the first and subsequent lines are concatenated (with spaces) are stored in the <link
  linkend="macrolist-serviceperfdata">$SERVICEPERFDATA$</link> macro. The <emphasis condition="blue" role="color">blue</emphasis>
  portions of the 2nd - 5th lines of output will be concatenated (with escaped newlines) and stored in the <link
  linkend="macrolist-longserviceoutput">$LONGSERVICEOUTPUT$</link> macro.</para>

  <para>The final contents of each macro are listed below:</para>

  <informaltable frame="all">
    <tgroup cols="2">
      <colspec colname="c1" colwidth="10*" />

      <colspec colname="c2" colwidth="50*" />

      <tbody>
        <row>
          <entry><para> <emphasis role="bold">Macro</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Value</emphasis> </para></entry>
        </row>

        <row>
          <entry><para>$SERVICEOUTPUT$</para></entry>

          <entry><para> <emphasis condition="red" role="color">DISK OK - free space: / 3326 MB (56%);</emphasis> </para></entry>
        </row>

        <row>
          <entry><para>$SERVICEPERFDATA$</para></entry>

          <entry><para> <emphasis condition="#FFA500"
          role="color">/=2643MB;5948;5958;0;5968 /boot=68MB;88;93;0;98 /home=69357MB;253404;253409;0;253414 /var/log=818MB;970;975;0;980</emphasis>
          </para></entry>
        </row>

        <row>
          <entry><para>$LONGSERVICEOUTPUT$</para></entry>

          <entry><para> <emphasis condition="blue" role="color">/ 15272 MB (77%);\n/boot 68 MB (69%);\n/var/log 819 MB
          (84%);</emphasis> </para></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>With regards to multiple lines of output, you have the following options for returning performance data:</para>

  <itemizedlist>
    <listitem>
      <para>You can choose to return no performance data whatsoever</para>
    </listitem>

    <listitem>
      <para>You can return performance data on the first line only</para>
    </listitem>

    <listitem>
      <para>You can return performance data only in subsequent lines (after the first)</para>
    </listitem>

    <listitem>
      <para>You can return performance data in both the first line and subsequent lines (as shown above)</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Plugin Output Length Restrictions</emphasis></para>

  <para>&name-icinga; will only read the first 8 KB of data that a plugin returns. This is done in order to prevent runaway
  plugins from dumping megs or gigs of data back to &name-icinga;. This 8 KB output limit is fairly easy to change if you need.
  Simply edit the value of the MAX_PLUGIN_OUTPUT_LENGTH definition in the <emphasis>include/icinga.h.in</emphasis> file of the
  source code distribution and recompile &name-icinga;. If you increase the 8k cap by modifying this value make sure that you also 
  increase the value of MAX_EXTERNAL_COMMAND_LENGTH in include/common.h before you compile to allow for passive checks results 
  of this length to be received through the external command file.</para>

  <para><emphasis role="bold">Examples</emphasis></para>

  <para>If you're looking for some example plugins to study, we would recommend that you download the official &name-nagios;
  plugins and look through the code for various C, Perl, and shell script plugins. Information on obtaining the official
  &name-nagios; plugins can be found <link linkend="plugins">here</link>.</para>

  <para><emphasis role="bold">Perl Plugins</emphasis></para>

  <para>&name-icinga; features an optional <link linkend="embeddedperl">embedded Perl interpreter</link> which can speed up the
  execution of Perl plugins. More information on developing Perl plugins for use with the embedded Perl interpreter can be found
  <link linkend="embeddedperl">here</link>.</para>
  <indexterm zone="plugin_api"><primary>Plugins</primary><secondary>&name-icinga; Plugin API</secondary></indexterm>
</section>
