<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="macros" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="macro_overview" />Understanding Macros and How They Work</title>

  <para><emphasis role="bold">Macros</emphasis></para>

  <para>One of the main features that make &name-icinga; so flexible is the ability to use macros in command definitions. Macros
  allow you to reference information from hosts, services, and other sources in your commands.</para>

  <para><emphasis role="bold">Macro Substitution - How Macros Work</emphasis></para>

  <para>Before &name-icinga; executes a command, it will replace any macros it finds in the command definition with their
  corresponding values. This macro substitution occurs for all types of commands that &name-icinga; executes - host and service
  checks, notifications, event handlers, etc.</para>

  <para>Certain macros may themselves contain other macros. These include the $HOSTNOTES$, $HOSTNOTESURL$, $HOSTACTIONURL$,
  $SERVICENOTES$, $SERVICENOTESURL$, and $SERVICEACTIONURL$ macros.</para>

  <para><emphasis role="bold">Example 1: Host Address Macro</emphasis></para>

  <para>When you use host and service macros in command definitions, they refer to values for the host or service for which the
  command is being run. Let's try an example. Assuming we are using a host definition and a <emphasis>check_ping</emphasis>
  command defined like this:</para>

  <screen> define host{
        host_name       linuxbox
        address         192.168.1.2
        check_command   check_ping
        ...
        }
        
 define command{
        command_name    check_ping
        command_line    &url-icinga-base;/libexec/check_ping -H $HOSTADDRESS$ -w 100.0,90% -c 200.0,60%
        }</screen>

  <para>the expanded/final command line to be executed for the host's check command would look like this:</para>

  <screen># &url-icinga-base;/libexec/check_ping -H 192.168.1.2 -w 100.0,90% -c 200.0,60%</screen>

  <para>Pretty simple, right? The beauty in this is that you can use a single command definition to check an unlimited number of
  hosts. Each host can be checked with the same command definition because each host's address is automatically substituted in the
  command line before execution.</para>

  <para><emphasis role="bold">Example 2: Command Argument Macros</emphasis></para>

  <para>You can pass arguments to commands as well, which is quite handy if you'd like to keep your command definitions rather
  generic. Arguments are specified in the object (i.e. host or service) definition, by separating them from the command name with
  exclamation marks (!) like so:</para>

  <screen> define service{
        host_name               linuxbox
        service_description     PING
        check_command           check_ping!200.0,80%!400.0,40%
        ...
        }</screen>

  <para>In the example above, the service check command has two arguments (which can be referenced with <link
  linkend="macrolist-arg">$ARGn$</link> macros). The $ARG1$ macro will be "<emphasis condition="red"
  role="color">200.0,80%</emphasis>" and $ARG2$ will be "<emphasis condition="red" role="color">400.0,40%</emphasis>" (both
  without quotes). Assuming we are using the host definition given earlier and a <emphasis>check_ping</emphasis> command defined
  like this:</para>

  <screen> define command{
        command_name    check_ping
        command_line    &url-icinga-base;/libexec/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$
        }</screen>

  <para>the expanded/final command line to be executed for the service's check command would look like this:</para>

  <screen># &url-icinga-base;/libexec/check_ping -H 192.168.1.2 -w 200.0,80% -c 400.0,40%</screen>

  <tip>
    <para>If you need to pass bang (!) characters in your command arguments, you can do so by escaping them with a backslash (\).
    If you need to include backslashes in your command arguments, they should also be escaped with a backslash.</para>
  </tip>

  <para><emphasis role="bold">On-Demand Macros</emphasis></para>

  <para>Normally when you use host and service macros in command definitions, they refer to values for the host or service for
  which the command is being run. For instance, if a host check command is being executed for a host named "linuxbox", all the
  <link linkend="macrolist">standard host macros</link> will refer to values for that host ("linuxbox").</para>

  <para>If you would like to reference values for another host or service in a command (for which the command is not being run),
  you can use what are called "on-demand" macros. On-demand macros look like normal macros, except for the fact that they contain
  an identifier for the host or service from which they should get their value. Here's the basic format for on-demand
  macros:</para>

  <itemizedlist>
    <listitem>
      <para>$<emphasis>HOSTMACRONAME</emphasis>:<emphasis>host_name</emphasis>$</para>
    </listitem>

    <listitem>
      <para>$<emphasis>SERVICEMACRONAME</emphasis>:<emphasis>host_name</emphasis>:<emphasis>service_description</emphasis>$</para>
    </listitem>
  </itemizedlist>

  <para>Replace <emphasis>HOSTMACRONAME</emphasis> and <emphasis>SERVICEMACRONAME</emphasis> with the name of one of the standard
  host of service macros found <link linkend="macrolist">here</link>.</para>

  <para>Note that the macro name is separated from the host or service identifier by a colon (:). For on-demand service macros,
  the service identifier consists of both a host name and a service description - these are separated by a colon (:) as
  well.</para>

  <tip>
    <para>On-demand service macros can contain an empty host name field. In this case the name of the host associated with the
    service will automatically be used.</para>
  </tip>

  <para>Examples of on-demand host and service macros follow:</para>

  <screen> $HOSTDOWNTIME:myhost$                        &lt;--- On-demand host macro
 $SERVICESTATEID:novellserver:DS Database$    &lt;--- On-demand service macro
 $SERVICESTATEID::CPU Load$                   &lt;--- On-demand service macro with blank host name field</screen>

  <para>On-demand macros are also available for hostgroup, servicegroup, contact, and contactgroup macros. For example:</para>

  <screen> $CONTACTEMAIL:john$                          &lt;--- On-demand contact macro
 $CONTACTGROUPMEMBERS:linux-admins$           &lt;--- On-demand contactgroup macro
 $HOSTGROUPALIAS:linux-servers$               &lt;--- On-demand hostgroup macro
 $SERVICEGROUPALIAS:DNS-Cluster$              &lt;--- On-demand servicegroup macro</screen>

  <para><emphasis role="bold">On-Demand Group Macros</emphasis></para>

  <para>You can obtain the values of a macro across all contacts, hosts, or services in a specific group by using a special format
  for your on-demand macro declaration. You do this by referencing a specific host group, service group, or contact group name in
  an on-demand macro, like so:</para>

  <itemizedlist>
    <listitem>
      <para>$<emphasis>HOSTMACRONAME</emphasis>:<emphasis>hostgroup_name</emphasis>:<emphasis>delimiter</emphasis>$</para>
    </listitem>

    <listitem>
      <para>$<emphasis>SERVICEMACRONAME</emphasis>:<emphasis>servicegroup_name</emphasis>:<emphasis>delimiter</emphasis>$</para>
    </listitem>

    <listitem>
      <para>$<emphasis>CONTACTMACRONAME</emphasis>:<emphasis>contactgroup_name</emphasis>:<emphasis>delimiter</emphasis>$</para>
    </listitem>
  </itemizedlist>

  <para>Replace <emphasis>HOSTMACRONAME</emphasis>, <emphasis>SERVICEMACRONAME</emphasis>, and
  <emphasis>CONTACTMACRONAME</emphasis> with the name of one of the standard host, service, or contact macros found <link
  linkend="macrolist">here</link>. The delimiter you specify is used to separate macro values for each group member.</para>

  <para>For example, the following macro will return a comma-separated list of host state ids for hosts that are members of the
  <emphasis>hg1</emphasis> hostgroup:</para>

  <screen> $HOSTSTATEID:hg1:,$</screen>

  <para>This macro definition will return something that looks like this:</para>

  <screen> 0,2,1,1,0,0,2</screen>

  <para><emphasis role="bold">Custom Variable Macros</emphasis></para>

  <para>Any <link linkend="customobjectvars">custom object variables</link> that you define in host, service, or contact
  definitions are also available as macros. Custom variable macros are named as follows:</para>

  <itemizedlist>
    <listitem>
      <para>$_HOST<emphasis>varname</emphasis>$</para>
    </listitem>

    <listitem>
      <para>$_SERVICE<emphasis>varname</emphasis>$</para>
    </listitem>

    <listitem>
      <para>$_CONTACT<emphasis>varname</emphasis>$</para>
    </listitem>
  </itemizedlist>

  <para>Take the following host definition with a custom variable called "_MACADDRESS"...</para>

  <screen> define host{
        host_name     linuxbox
        address       192.168.1.1
        _MACADDRESS   00:01:02:03:04:05
        ...
        }</screen>

  <para>The _MACADDRESS custom variable would be available in a macro called <emphasis condition="red"
  role="color">$_HOSTMACADDRESS$</emphasis>. More information on custom object variables and how they can be used in macros can be
  found <link linkend="customobjectvars">here</link>.</para>

  <para><emphasis role="bold">Macro Cleansing</emphasis></para>

  <para>Some macros are stripped of potentially dangerous shell metacharacters before being substituted into commands to be
  executed. Which characters are stripped from the macros depends on the setting of the <link
  linkend="configmain-illegal_macro_output_chars">illegal_macro_output_chars</link> directive. The following macros are stripped
  of potentially dangerous characters:</para>

  <orderedlist>
    <listitem>
      <para><link linkend="macrolist-hostoutput">$HOSTOUTPUT$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-longhostoutput">$LONGHOSTOUTPUT$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-hostperfdata">$HOSTPERFDATA$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-hostackauthor">$HOSTACKAUTHOR$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-hostackcomment">$HOSTACKCOMMENT$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-serviceoutput">$SERVICEOUTPUT$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-longserviceoutput">$LONGSERVICEOUTPUT$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-serviceperfdata">$SERVICEPERFDATA$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-serviceackauthor">$SERVICEACKAUTHOR$</link></para>
    </listitem>

    <listitem>
      <para><link linkend="macrolist-serviceackcomment">$SERVICEACKCOMMENT$</link></para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">Macros as Environment Variables</emphasis></para>

  <para>Most macros are made available as environment variables for easy reference by scripts or commands that are executed by
  &name-icinga;. For purposes of security and sanity, <link linkend="macrolist-user">$USERn$</link> and "on-demand" host and
  service macros are <emphasis role="underline">not</emphasis> made available as environment variables.</para>

  <para>Environment variables that contain standard macros are named the same as their corresponding macro names (listed <link
  linkend="macrolist">here</link>), with "NAGIOS_" prepended to their names. For example, the <link
  linkend="macrolist-hostname">$HOSTNAME$</link> macro would be available as an environment variable named
  "NAGIOS_HOSTNAME".</para>

  <para><emphasis role="bold">Available Macros</emphasis></para>

  <para>A list of all the macros that are available in &name-icinga;, as well as a chart of when they can be used, can be found
  <link linkend="macrolist">here</link>.</para>
  <indexterm zone="macro_overview"><primary>Macros</primary><secondary>Understanding Macros and How They Work</secondary></indexterm>
</section>
