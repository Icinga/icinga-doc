<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="icinga-web-scratch" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title>Installation and use of the &name-icinga; API</title>

  <orderedlist>
    <listitem>
      <para><emphasis role="bold">Software</emphasis></para>

      <para>Take your clone from the icinga-api.git to get a fresh branch</para>

      <programlisting> # git clone git://git.icinga.org/icinga-api.git</programlisting>

      <para>or download the software using <link
      xlink:href="https://git.icinga.org/index?p=icinga-api.git;a=snapshot;h=refs/heads/master;sf=tgz">https://git.icinga.org/index?p=icinga-api.git;a=snapshot;h=refs/heads/master;sf=tgz</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">The installation</emphasis></para>

      <para>Unpack the software and move it to the Icinga source code tree</para>

      <programlisting> # tar xzvf icinga-api-(version).tar.gz
 # mv icinga-api/* /usr/src/icinga-core/module/icinga-api</programlisting>

      <para>Recompile the code (you may have to rerun ./configure again).</para>

      <programlisting> # make all
 # make install</programlisting>

      <note>
        <para>If you don't have Icinga yet please follow the instructions given in the "<link
        linkend="quickstart-idoutils">quickstart-idoutils</link>" documentation.</para>
      </note>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Configuration</emphasis></para>

      <para>Configuration is simply done by using an associative array. <programlisting> $idoConfig = array (
    'type'         =&gt; '&lt;Type of database&gt;',
    'host'         =&gt; '&lt;Database hostname&gt;', 
    'database'     =&gt; '&lt;Databasename&gt;',
    'user'         =&gt; '&lt;Username&gt;',
    'password'     =&gt; '&lt;password&gt;',
    'persistent'   =&gt; &lt;true | false&gt;,
    'table_prefix' =&gt; '&lt;table prefix&gt;', 
 );</programlisting> Example:</para>

      <programlisting> $idoConfig = array (
    'type'         =&gt; 'mysql',
    'host'         =&gt; 'localhost',
    'database'     =&gt; 'ido',
    'user'         =&gt; 'idouser',
    'password'     =&gt; 'idopassword',
    'persistent'   =&gt; true,
    'table_prefix' =&gt; 'icinga_',
 );</programlisting>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Fetching data</emphasis></para>

      <para>hostnames and corresponding states</para>

      <para>Create an instance of class IcingaApi:</para>

      <para><programlisting> $api = IcingaApi::getConnection(IcingaApi::CONNECTION_IDO, $idoConfig);</programlisting>Create your
      search:</para>

      <para><programlisting> $apiRes = $api-&gt;createSearch()
 -&gt;setSearchTarget(IcingaApi::TARGET_HOST)
 -&gt;setResultColumns(array(’HOST_NAME’, ‘HOST_CURRENT_STATE’))
 -&gt;fetch();</programlisting></para>

      <para>By using setSearchFilter() you can define filters to narrow down the result set:</para>

      <para><programlisting> $apiRes = $api-&gt;createSearch()
 -&gt;setSearchTarget(IcingaApi::TARGET_HOST)
 -&gt;setResultColumns(array(’HOST_NAME’, ‘HOST_CURRENT_STATE’))
 -&gt;setSearchFilter(HOST_NAME, ‘Switch%’, IcingaApi::MATCH_LIKE)
 -&gt;fetch();</programlisting></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Processing results</emphasis></para>

      <para><programlisting> foreach($apiRes as $apiHandle){
    echo ‘Host ‘.$apiHandle-&gt;host_name.’ has state ‘.$apiHandle-&gt;host_current_state.’&lt;br /&gt;’;
 }</programlisting>Output without filter:</para>

      <para><programlisting> Host localhost has state 0
 Host MySql has state 0
 Host router-01 has state 0
 Host windows100 has state 0
 Host Apache_01 has state 0</programlisting>Output with filter:</para>

      <para><programlisting> Host switch70 has the current state 0
 Host switch71 has the current state 0
 Host switch72 has the current state 0
 Host switch73 has the current state 0
 Host switch74 has the current state 0
 Host switch75 has the current state 0
 Host switch76 has the current state 0
 Host switch77 has the current state 0</programlisting></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Complete code without use of filters</emphasis></para>

      <programlisting> &lt;?
 // Path to icinga api file
 $apiFile = ‘icinga-api/IcingaApi.php’;
 
 // Database connection
 $idoConfig = array (
    'type'         =&gt; 'mysql',
    'host'         =&gt; 'localhost',
    'database'     =&gt; 'ido',
    'user'         =&gt; 'idouser',
    'password'     =&gt; 'idopassword',
    'persistent'   =&gt; true,
    'table_prefix' =&gt; 'icinga_',
 );
 
 // Include required files
 require_once($apiFile);
 
 // Instance the class
 $api = IcingaApi::getConnection(IcingaApi::CONNECTION_IDO, $idoConfig);
 
 // Create search
 $apiRes = $api-&gt;createSearch()
 -&gt;setSearchTarget(IcingaApi::TARGET_HOST)
 -&gt;setResultColumns(array('HOST_NAME', 'HOST_CURRENT_STATE'))
 -&gt;fetch();
 
 // Create output
 foreach($apiRes as $apiHandle){
    echo 'Host '.$apiHandle-&gt;host_name.' has the current state '.$apiHandle-&gt;host_current_state.'&lt;br /&gt;';
 }
 ?&gt;</programlisting>

      <para>Please have a look at the <link xlink:arcrole="" xlink:href="???">git repository</link> for further
      information.</para>
    </listitem>
  </orderedlist>
</section>
