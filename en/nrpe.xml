<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="nrpe" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="nrpe_"/>&name-nrpe;</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>Nagios Remote Plugin Executor (or &name-nrpe; for short) is an addon used to execute plugins to monitor "local" resources on remote
  (Linux/Unix) systems. Some resources cannot (or should not) be monitored via SNMP or using other agents across the network so you have to
  check them using programs installed locally on the machines to be monitored and transmit the results back to the &name-icinga; server. In
  contrast to NSCA this is done actively, i.e. initiated by the &name-icinga; server.<note>
      <para>Using <link xlink:href="http://www.nsclient.org">&name-nsclient;</link> instead of &name-nrpe; on the remote host you can
      execute checks on Windows machines as well.</para>
    </note>You can use <emphasis>check_by_ssh</emphasis> to execute plugins on remote machines but there is a drawback to this approach.
  Setting up an SSH session consumes CPU resources on both the local and the remote machine which may become a performance issue if your are
  monitoring a lot of hosts and/or services this way. Using &name-nrpe; is a bit less secure than SSH but in many cases the performance may
  outweigh the security difference. SSL can be actived though if you need a more secure connection.</para>

  <figure>
    <title>&name-nrpe;</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../images/nrpe.png"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para><emphasis>check_nrpe</emphasis> is a plugin executed by the local &name-icinga; server like any other plugin. It calls the
  &name-nrpe; process which is running as a daemon on the remote machine. The daemon itself executes the plugin on the same machine and
  transmits the information gathered back to the check_nrpe plugin which in turn delivers it to &name-icinga;. <note>
      <para>Depending on the CPU / OS of the remote machine you may have to compile &name-nrpe; and the plugins on several platforms.</para>
    </note>Using &name-nrpe; you will mostly monitor resources located on the same machine like CPU load, disk space, memory usage,
  processes running etc. but it can also be used to check resources which may not be reachable directly from the monitoring server itself.
  The machine running the &name-nrpe; daemon is acting as a relay in this case.</para>

  <figure>
    <title>&name-nrpe; remote</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../images/nrpe_remote.png"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para>The following instructions are partially based on documentation found in the original &name-nrpe; package by Ethan Galstad.</para>

  <para><emphasis role="bold">Prerequisites</emphasis> <itemizedlist>
      <listitem>
        <para>&name-icinga; should be up and running on the monitoring server</para>
      </listitem>

      <listitem>
        <para>a C-compiler (like gcc) is installed on the local host. If not:</para>

        <programlisting> #&gt; yum install gcc       # &name-rhel; / &name-fedora; / &name-centos;
 #&gt; apt-get install gcc   # &name-debian; / &name-ubuntu;
 #&gt; zypper install gcc    # &name-sles; / &name-opensuse; (or use YaST instead)</programlisting>
      </listitem>

      <listitem>
        <para>openssl is (optionally) installed on both the local host. If not:</para>

        <programlisting> #&gt; yum install openssl openssl-devel       # &name-rhel; / &name-fedora; / &name-centos;
 #&gt; apt-get install openssl openssl-devel   # &name-debian; / &name-ubuntu;
 #&gt; zypper install openssl openssl-devel    # &name-sles; / &name-opensuse; (or use YaST instead)</programlisting>
      </listitem>
    </itemizedlist></para>

  <para><emphasis role="bold">Download</emphasis></para>

  <note>
    <para>Instead of installing &name-nrpe; from scratch you may want to use a package which might be available for your OS. Please take a
    look at the <link xlink:href="https://www.icinga.org/download/packages">table of packages</link>.</para>

    <para>If you are planning to install from source then please use the official release tarball using something like <programlisting> #&gt; wget http://sourceforge.net/projects/nagios/files/nrpe-2.x/nrpe-&ver-nrpe;/nrpe-&ver-nrpe;.tar.gz -O nrpe-&ver-nrpe;.tar.gz</programlisting></para>
  </note>

  <important>
    <para>Please don't use git snapshots unless you have an issue which might be solved in the current developer version.</para>
  </important>

  <para><emphasis role="bold">Optional changes</emphasis></para>

  <para>The maximum length of data to be transmitted is set to 2,048 bytes, the maximal length of plugin output is set to 512 bytes. If that
  is not sufficient then you have to alter the appropriate value in <filename>icinga-nrpe/include/common.h</filename> (and recompile
  &name-icinga;!)<programlisting> #define MAX_INPUT_BUFFER        2048    /* max size of most buffers we use */
 #define MAX_PLUGINOUTPUT_LENGTH 512 </programlisting>Please keep in mind that you have to recompile the programs if you change these values
  at a later stage.</para>

  <para>Due to the setting of the following define in <filename>include/common.h</filename> (in Icinga core) the max. value cannot exceed
  8,192 bytes. <programlisting> #define MAX_EXTERNAL_COMMAND_LENGTH     8192   /* max length of an external command */</programlisting></para>

  <para><emphasis role="bold">Compile on the &name-icinga; server</emphasis></para>

  <para>Change to the newly created directory and call configure and make <programlisting> #&gt; cd icinga-nrpe
 #&gt; ./configure 
 #&gt; make all
 #&gt; make install-plugin</programlisting><note>
      <para>If you want to use SSL at a later stage then you have to use "<literal>./configure --enable-ssl</literal>" instead. There are
      other options to specify the location of SSL files if they are not found automatically.</para>
    </note>If the user or group running the daemon deviate from "icinga" or the port to be used is not the default 5666 you can use several
  options to specify different values (<literal>--with-nrpe-user=</literal>&lt;user&gt;, <literal>--with-nrpe-group=</literal>&lt;group&gt;,
  <literal>--with-nrpe-port=</literal>&lt;port&gt;). For a complete list of the options available call "<literal>./configure -h</literal>".
  "<literal>make install-plugin</literal>" will copy <filename>check_nrpe</filename> to the plugin directory. <note>
      <para>You may want to check if SSL is included using "<literal>ldd src/check_nrpe</literal>" and "<literal>ldd
      src/nrpe</literal>".</para>
    </note></para>

  <para><emphasis role="bold">First test</emphasis></para>

  <para>Startup the daemon and call the plugin <programlisting> #&gt; /usr/src/icinga-nrpe/src/nrpe -n \
    -c /usr/src/icinga-nrpe/sample-config/nrpe.cfg -d
 #&gt; /usr/local/icinga/libexec/check_nrpe -H 127.0.0.1 -n</programlisting>This should return the version of &name-nrpe;. If you receive
  the message "CHECK_NRPE: Error receiving data from daemon" the monitoring server was not found in <filename>nrpe.cfg</filename> (directive
  allowed_hosts). Multiple IP addresses are separated by commas.</para>

  <para>Stop the daemon<programlisting> #&gt; kill `ps -ef | grep "sample-config/nrpe.cfg" | grep -v grep | awk '{print $2}'`</programlisting></para>

  <para/>

  <para><emphasis role="bold">Remote system(s)</emphasis></para>

  <para>The configuration and installation on the &name-icinga; server is finished so far. The second part has to be done on the remote
  host(s) running the &name-nrpe; daemon which listens for incoming requests, executing them and returning the results to the &name-icinga;
  server.</para>

  <para><emphasis role="bold">Prerequisites on the remote host(s)</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>Make sure that the necessary plugins are available. Take a look at the <link linkend="quickstart-icinga">quickstart guide</link>
      if you are unsure on how to install them.</para>
    </listitem>

    <listitem>
      <para>You can copy the folder <filename>icinga-nrpe</filename> including the sub-directories from the &name-icinga; server. One way
      would be<programlisting> #&gt; cd /usr/src/
 #&gt; scp -pr &lt;&name-icinga;-server&gt;:/$PWD/icinga-nrpe .</programlisting> <note>
          <para>If the architecture of your remote host differs from your &name-icinga; server you will have to recompile the sources. This
          is true if you are using different CPUs (i386/Itanium/PA-RISC/...) and/or different OS versions (32-Bit/64-Bit). If this is the
          case then you have to install a C-Compiler and OpenSSL (if you want to use SSL) before you can start to compile. <programlisting> #&gt; cd icinga-nrpe
 #&gt; make distclean
 #&gt; ./configure     # please use the same options as on the &name-icinga; server 
 #&gt; make all</programlisting></para>
        </note>Edit the config file <filename>sample-config/nrpe.cfg</filename> and change the setting of "allowed_hosts=&lt;IP address&gt;"
      to the IP address of your &name-icinga; server. Multiple IP addresses are separated by commas.</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Second test</emphasis></para>

  <para>Startup the daemon on the remote host</para>

  <programlisting> #&gt; /usr/src/icinga-nrpe/src/nrpe -n \
    -c /usr/src/icinga-nrpe/sample-config/nrpe.cfg -d</programlisting>

  <para>and execute the plugin on the &name-icinga; server once more, this time using the IP address of the remote host</para>

  <programlisting> #&gt; /usr/local/icinga/libexec/check_nrpe -H &lt;IP remote host&gt; -n</programlisting>

  <para>This should return the version of &name-nrpe;. If you receive the message "CHECK_NRPE: Error receiving data from daemon" the
  specified host was not found in <filename>nrpe.cfg</filename> (directive allowed_hosts) on the remote host.</para>

  <para>Stop the daemon on the remote host</para>

  <programlisting> #&gt; kill `ps -ef | grep "sample-config/nrpe.cfg" | grep -v grep | awk '{print $2}'`</programlisting>

  <para><emphasis role="bold">Installation on the remote host</emphasis></para>

  <para>Independent from the method the &name-nrpe; process is running on the remote host you need a config file containing the commands to
  be called. You install it issuing</para>

  <para><programlisting> #&gt; make install-daemon-config</programlisting>There are two ways to run the nrpe process, one as a standalone
  daemon, the other using xinetd (which is recommended).</para>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">nrpe daemon</emphasis></para>

      <para>First install the daemon</para>

      <programlisting> #&gt; make install-daemon</programlisting>

      <para>If you choose to use xinetd the daemon will be started automatically. Otherwise you have to start the daemon manually</para>

      <programlisting> #&gt; /usr/local/icinga/bin/nrpe -c /usr/local/icinga/etc/nrpe.cfg</programlisting>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">inetd/xinetd</emphasis></para>

      <para>If you want the daemon to be started by (x)inetd you have to extend /etc/services, alter/copy another file and restart (x)inetd.
      If the package is not installed then please do the following</para>

      <programlisting> #&gt; yum install xinetd       # &name-rhel; / &name-fedora; / &name-centos;
 #&gt; apt-get install xinetd   # &name-debian; / &name-ubuntu;
 #&gt; zypper install xinetd    # &name-sles; / &name-opensuse; (or use YaST instead)</programlisting>

      <note>
        <para>The setting of "server_port" specified in <filename>nrpe.cfg</filename> is ignored when you use inetd/xinetd.</para>
      </note>

      <programlisting> #&gt; echo "nrpe 5666/tcp # nrpe" &gt;&gt; /etc/services</programlisting>

      <para>Depending on the superserver which is installed on your system there are three alternatives</para>

      <itemizedlist>
        <listitem>
          <para>inetd WITH tcpwrappers</para>

          <para>Add entries to your <filename>/etc/hosts.allow</filename> and <filename>/etc/hosts.deny</filename> file to enable TCP
          wrapper protection for the nrpe service. This is optional, although highly recommended. Add "<literal>nrpe stream tcp nowait
          </literal>&lt;user&gt; <literal>/usr/sbin/tcpd </literal>&lt;nrpe-binary&gt;<literal> -c </literal>&lt;nrpe-cfg&gt;<literal>
          --inetd</literal>" to <filename>/etc/inetd.conf</filename>, e.g.</para>

          <programlisting> #&gt; echo "nrpe stream tcp nowait icinga /usr/sbin/tcpd /usr/local/icinga/bin/nrpe \
    -c /usr/local/icinga/etc/nrpe.cfg --inetd" &gt;&gt; /etc/inetd.conf
 #&gt; /etc/init.d/inetd restart</programlisting>
        </listitem>

        <listitem>
          <para>inetd WITHOUT tcpwrappers</para>

          <para>Add "<literal>nrpe stream tcp nowait </literal>&lt;user&gt; &lt;nrpe-binary&gt;<literal> -c
          </literal>&lt;nrpe-cfg&gt;<literal> --inetd</literal>" to <filename>/etc/inetd.conf</filename>, e.g.</para>

          <programlisting> #&gt; echo "nrpe stream tcp nowait icinga /usr/local/icinga/bin/nrpe \
    -c /usr/local/icinga/etc/nrpe.cfg --inetd" &gt;&gt; /etc/inetd.conf
 #&gt; /etc/init.d/inetd restart</programlisting>
        </listitem>

        <listitem>
          <para>xinetd (recommended)</para>

          <para>Consider editing the config file <filename>nrpe.xinetd</filename> in the <filename>sample-config</filename> folder and
          replacing the address following &lt;only_from&gt; by the IP address of the &name-icinga; server (where check_nrpe will be
          running). Multiple IP addresses are separated by spaces.</para>

          <para>Add entries to your <filename>/etc/hosts.allow</filename> and <filename>/etc/hosts.deny</filename> file to enable TCP
          wrapper protection for the nrpe service. This is optional, although highly recommended. Copy the file to your xinetd folder and
          restart the xinetd process</para>

          <programlisting> #&gt; make install-xinetd
 #&gt; /etc/init.d/xinetd restart</programlisting>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Third test</emphasis></para>

  <para>Switch to the &name-icinga; server, change to the &name-icinga; user and run another test</para>

  <programlisting> #&gt; su - icinga
 $&gt; /usr/local/icinga/libexec/check_nrpe -H &lt;IP remote server&gt;</programlisting>

  <para>This should return the version of &name-nrpe; another time. If this test fails then there is no sense in continuing. Instead verify
  the settings in <filename>nrpe.cfg/nrpe.xinet</filename> on the remote server. Check for messages in your syslog (e.g.
  <filename>/var/log/messages</filename>) on the remote server as well.</para>

  <para><emphasis role="bold">Troubleshooting</emphasis></para>

  <para>Check that the nrpe process is running on the remote server<itemizedlist>
      <listitem>
        <para>when installed as standalone daemon <programlisting> #&gt; ps -ef | grep -v grep | grep nrpe</programlisting>If not, then
        <itemizedlist>
            <listitem>
              <para>start it as mentioned above</para>
            </listitem>

            <listitem>
              <para>check that the file <filename>/usr/local/icinga/etc/nrpe.cfg</filename> is present</para>
            </listitem>

            <listitem>
              <para>the <emphasis>allowed_hosts</emphasis> directive in the file <filename>/usr/local/icinga/etc/nrpe.cfg</filename>
              contains an entry for the IP address of the &name-icinga; server. Multiple IP addresses are separated by commas.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para>when installed using xinetd <programlisting> #&gt; netstat -at | grep -v grep | grep nrpe</programlisting>The output should be
        showing something like <programlisting> tcp 0 0 *:nrpe *:* LISTEN</programlisting>If not then verify that <itemizedlist>
            <listitem>
              <para>you added the nrpe entry to your /etc/services file</para>
            </listitem>

            <listitem>
              <para>the file <filename>/etc/xinetd.d/nrpe</filename> is present</para>
            </listitem>

            <listitem>
              <para>the <emphasis>only_from</emphasis> directive in the file <filename>/etc/xinetd.d/nrpe</filename> contains an entry for
              the IP address of the &name-icinga; server. Multiple IP addresses are separated by spaces.</para>
            </listitem>

            <listitem>
              <para>xinetd is installed and started</para>
            </listitem>

            <listitem>
              <para>the system log files don't show any errors about xinetd and/or nrpe and fix any problems that are reported</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>Activate "debug=1" in <filename>nrpe.cfg</filename>, restart the daemon (if applicable) and look for messages in the
  syslog / <literal>nrpe.log</literal>.</para>

  <para><emphasis role="bold">Security</emphasis></para>

  <para>Read the <filename>SECURITY</filename> file for more information on the security risks of running &name-nrpe;, along with an
  explanation of what kind of protection the encryption provides you.</para>

  <para><emphasis role="bold">Definition of local checks</emphasis></para>

  <para>Some things have been predefined in <filename>etc/nrpe.cfg</filename> on the remote host</para>

  <programlisting> # command[&lt;command_name&gt;]=&lt;command_line&gt;
 command[check_users]=/usr/local/icinga/libexec/check_users -w 5 -c 10
 command[check_load]=/usr/local/icinga/libexec/check_load -w 1.5,1.1,0.9 -c 3.0,2.2,1.9
 command[check_hda1]=/usr/local/icinga/libexec/check_disk -w 20% -c 10% -p /dev/hda1
 command[check_zombie_procs]=/usr/local/icinga/libexec/check_procs -w 5 -c 10 -s Z
 command[check_total_procs]=/usr/local/icinga/libexec/check_procs -w 150 -c 200 </programlisting>

  <para>The first line shows the general format</para>

  <informaltable>
    <tgroup cols="2">
      <thead>
        <row>
          <entry align="center">String</entry>

          <entry align="center">Description</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>command</entry>

          <entry>tag showing that the following is a definition for a command</entry>
        </row>

        <row>
          <entry>&lt;command_name&gt;</entry>

          <entry>link between the command definition on the &name-icinga; server and the command on the remote host</entry>
        </row>

        <row>
          <entry>&lt;command_line&gt;</entry>

          <entry>call of the plugin including all necessary arguments</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">Definitions on the &name-icinga; server</emphasis></para>

  <para>Now we switch over to the &name-icinga; server to create some object definitions. First add a command definition to your
  configuration (unless you already have it). As usual the name of the config file is up to you but most people have a file called
  <filename>commands.cfg</filename>.<programlisting> define command{
    command_name        check_nrpe
    command_line        $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
   }</programlisting> We assume that you already have a host definition like the following<programlisting> define host{
    use                 generic-host     ; Inherit default values from a template
    host_name           remotehost       ; The name we're giving to this server
    alias               Linux Host       ; A longer name for the server
    address             192.168.0.1      ; IP address of the server
    }</programlisting>These example service definitions will use the sample commands shown above.</para>

  <para>The following service will monitor the number of currently logged in users on the remote host</para>

  <programlisting> define service{
    use                 generic-service
    host_name           remotehost
    service_description Current Users
    check_command       check_nrpe!check_users
    }</programlisting>

  <para>"<literal>check_nrpe</literal>" is the link between the service directive "<literal>check_command</literal>" and the directive
  "<literal>command_name</literal>" in the command definition on the &name-icinga; server. The "<literal>command_line</literal>" in the
  command definition shows that "<literal>check_nrpe</literal>" is called. "<literal>check_users</literal>" is passed as the first argument.
  The nrpe process on the remote host takes this argument and searches for an appropriate definition in <filename>nrpe.cfg</filename>. The
  command is executed and the result is transferred back to the check_nrpe-plugin.</para>

  <para>The following service will monitor the CPU load on the remote host</para>

  <programlisting> define service{
    use                 generic-service
    host_name           remotehost
    service_description CPU Load
    check_command       check_nrpe!check_load
    }</programlisting>

  <para>The following service will monitor the free drive space on /dev/hda1 on the remote host</para>

  <programlisting> define service{
    use                 generic-service
    host_name           remotehost
    service_description /dev/hda1 Free Space
    check_command       check_nrpe!check_hda1
    }</programlisting>

  <para>The following service will monitor the total number of processes on the remote host</para>

  <programlisting> define service{
    use                 generic-service
    host_name           remotehost
    service_description Total Processes
    check_command       check_nrpe!check_total_procs
    }</programlisting>

  <para>The following service will monitor the number of zombie processes on the remote host</para>

  <programlisting> define service{
    use                 generic-service
    host_name           remotehost
    service_description Zombie Processes
    check_command       check_nrpe!check_zombie_procs
    }</programlisting>

  <para>Restart Icinga to include the definitions in your running configuration</para>

  <para><programlisting> #&gt; /etc/init.d/icinga restart</programlisting>After some time your plugins should have been called.</para>

  <para><emphasis role="bold">More Troubleshooting</emphasis></para>

  <para>Some errors during the initial setup have been mentioned already. Unfortunately you may encounter others errors. Below you'll find
  hints for some of the more common errors with the &name-nrpe; addon.</para>

  <itemizedlist>
    <listitem>
      <para>"NRPE: Command timed out after x seconds"</para>

      <para>The command that was run by the &name-nrpe; daemon did not finish executing within the specified time. You can increase the
      timeout for commands by editing the &name-nrpe; configuration file and changing the value of the command_timeout variable. Use the -t
      command line option to specify a longer timeout for the check_nrpe plugin. The following example will increase the timeout to 30
      seconds:</para>

      <programlisting> /usr/local/icinga/libexec/check_nrpe -H localhost -c somecommand -t 30</programlisting>

      <para>If you're running the &name-nrpe; daemon as a standalone daemon (and not under inetd or xinetd), you'll need to restart it in
      order for the new timeout to be recognised.</para>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para>"Connection refused or timed out"</para>

      <para>This error can indicate several things:</para>

      <itemizedlist>
        <listitem>
          <para>There is a firewall that is blocking the communication between the monitoring host (which runs the check_nrpe plugin) and
          the remote host (which runs the &name-nrpe; daemon). Verify that the firewall rules (e.g. iptables) that are running on the remote
          host allow for communication and make sure there isn't a physical firewall that is located between the monitoring host and the
          remote host.</para>
        </listitem>

        <listitem>
          <para>If you are using the standalone daemon: The IP address specified in <filename>nrpe.cfg</filename> (allowed_hosts=...) on the
          remote server doesn't match the IP address of the monitoring server. If it does then you might have forgotten to restart the
          daemon after the last change.</para>
        </listitem>

        <listitem>
          <para>If you are using the xinetd version: The IP address specified in <filename>/etc/xinetd.d/nrpe</filename> (only_from=...) on
          the remote server doesn't match the IP address of the monitoring server. If it does then you might have forgotten to restart the
          xinetd process after the last change.</para>
        </listitem>

        <listitem>
          <para>The &name-nrpe; daemon is not installed or running on the remote host. Verify that the &name-nrpe; daemon is running as a
          standalone daemon or under inetd/xinetd with one of the following commands:</para>

          <programlisting> ps axuw | grep nrpe       # if run as standalone daemon
 netstat -at | grep nrpe   # if run via xinetd</programlisting>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para>"CHECK_NRPE: Received 0 bytes from daemon. Check the remote server logs for an error message."</para>

      <para>First thing you should do is check the remote server logs for an error message. Seriously. :-) This error could be due to the
      following problem:</para>

      <itemizedlist>
        <listitem>
          <para>The check_nrpe plugin was unable to complete an SSL handshake with the &name-nrpe; daemon. An error message in the logs
          should indicate whether or not this was the case. Check the versions of OpenSSL that are installed on the monitoring host and
          remote host. If you're running a commercial version of SSL on the remote host, there might be some compatibility problems.</para>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para>"NRPE: Unable to read output"</para>

      <para>This error indicates that the command that was run by the &name-nrpe; daemon did not return any character output. This could be
      an indication of the following problems:</para>

      <itemizedlist>
        <listitem>
          <para>The path of the plugin to be run is incorrect on the remote host. If you change the definition in
          <filename>nrpe.cfg</filename>, remember to restart the daemon.</para>
        </listitem>

        <listitem>
          <para>The plugin that is specified in the command line is malfunctioning. Run the command line manually to make sure the plugin
          returns some kind of text output. DON'T run the command as root!</para>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para>"NRPE: Command 'x' not defined"</para>

      <para>The command 'x' was not defined in the &name-nrpe; configuration file on the remote host. Please add the command definition for
      x. See the existing command definitions in the &name-nrpe; configuration file for more information on doing this. If you're running
      the &name-nrpe; daemon as a standalone daemon (and not under inetd or xinetd), you'll need to restart it in order for the new command
      to be recognised.</para>
    </listitem>
  </itemizedlist>

  <para>If you still have problems then set "debug=1" in <filename>nrpe.cfg</filename> on the remote host. Remember to restart the
  &name-nrpe; process if it is running as a standalone daemon. Execute the check on the monitoring server. Afterwards you should see
  debugging information in the syslog (e.g. <filename>/var/log/messages</filename>) which might help resolving the problem.</para>

  <para>You might as well get help using one of the mailing lists or forums (http://www.icinga.org/community/get-help/).</para>

  <para><emphasis role="bold">Upgrading</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>Upgrading the &name-icinga; server</para>

      <para>Download the software <programlisting> #&gt; cd /usr/src
 #&gt; wget "https://git.icinga.org/?p=icinga-nrpe.git;a=snapshot;h=HEAD;sf=tgz" -O nrpe.tgz
 #&gt; tar xzf nrpe.tgz</programlisting>or use the current version from the git repository <programlisting> #&gt; git clone git://git.icinga.org/icinga-nrpe.git</programlisting>Then
      compile the software and install the plugin<programlisting> #&gt; cd icinga-nrpe
 #&gt; make distclean
 #&gt; ./configure     # use the same options as during the first run
 #&gt; make all
 #&gt; make install-plugin</programlisting></para>
    </listitem>

    <listitem>
      <para>Upgrading the remote host</para>

      <para>Download the software <programlisting> #&gt; cd /usr/src
 #&gt; wget "https://git.icinga.org/?p=icinga-nrpe.git;a=snapshot;h=HEAD;sf=tgz" -O nrpe.tgz
 #&gt; tar xzf nrpe.tgz</programlisting>or use the current version from the git repository <programlisting> #&gt; git clone git://git.icinga.org/icinga-nrpe.git</programlisting>Then
      compile the software and install the daemon process<programlisting> #&gt; cd icinga-nrpe
 #&gt; make distclean
 #&gt; ./configure     # use the same options as during the first run
 #&gt; make all
 ### kill the process if running as standalone daemon
 #&gt; kill `ps -ef | grep "sample-config/nrpe.cfg" | grep -v grep | awk '{print $2}'`
 #&gt; make install-daemon
 ### start the daemon if running as standalone daemon
 #&gt; /usr/src/icinga-nrpe/src/nrpe -n \
    -c /usr/src/icinga-nrpe/sample-config/nrpe.cfg -d</programlisting></para>
    </listitem>
  </itemizedlist>

  <indexterm zone="nrpe">
    <primary>nrpe</primary>

    <secondary>nrpe</secondary>
  </indexterm>

  <indexterm zone="nrpe">
    <primary>nrpe</primary>

    <secondary>send_nrpe</secondary>
  </indexterm>
</section>
