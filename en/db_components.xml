<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="db_components" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title>Components</title>

  <section>
    <title>Overview</title>

    <para>There are four main components that make up the IDO utilities:</para>

    <orderedlist>
      <listitem>
        <para>IDOMOD Event Broker Module</para>
      </listitem>

      <listitem>
        <para>LOG2IDO Utility</para>
      </listitem>

      <listitem>
        <para>FILE2SOCK Utility</para>
      </listitem>

      <listitem>
        <para>IDO2DB Daemon</para>
      </listitem>
    </orderedlist>

    <para>Each component is described in more detail on the following pages.</para>
  </section>

  <section>
    <title>IDOMOD</title>

    <para>The IDO utilities includes an &name-icinga; event broker module (IDOMOD.O) that exports data from the &name-icinga; daemon.</para>

    <para>Assuming that &name-icinga; has been compiled with the event broker enabled (this is the default), you can configure &name-icinga;
    to load the IDOMOD module during runtime. Once the module has been loaded by the &name-icinga; daemon, it can access all of the data and
    logic present in the running &name-icinga; process.</para>

    <figure>
      <title>Loaded IDOMOD Event broker Module</title>

      <mediaobject>
        <imageobject role="html">
          <imagedata fileref="../images/fig5.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The IDOMOD module has been designed to export configuration data, as well as information about various runtime events that occur
    in the monitoring process, from the &name-icinga; daemon. The module can send this data to a standard file, a Unix domain socket, or a
    TCP socket.</para>

    <figure>
      <title>IDOMOD Capabilities</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig6.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The IDOMOD module writes data in a format that the IDO2DB daemon (described later) can understand.</para>

    <para>If the IDOMOD module is writing its output to a file, you can configure it to periodically rotate and/or process the output file
    using a predefined &name-icinga; command. This can be useful if you want to transfer the output file to another physical machine (using
    SSH, etc. ) and send its contents to the IDO2DB daemon using the FILE2SOCK utility (described later).</para>

    <para>If the IDOMOD module is writing its output to a TCP or Unix domain socket, it has some resistance to connection dropouts. The
    module will attempt to cache its output until it can (re)connect to the socket for writing. This is helpful if the process that creates
    and listens on the socket needs to be restarted, etc.</para>
  </section>

  <section>
    <title>LOG2IDO</title>

    <para>The LOG2IDO utility has been designed to allow you to import historical &name-icinga;, Nagios and NetSaint log files into a
    database via the IDO2DB daemon (<link linkend="IDO2DB-description">described later</link>). The utility works by sending historical log
    file data to a standard file, a Unix domain socket, or a TCP socket in a format the IDO2DB daemon understands. The IDO2DB daemon can
    then be used to process that output and store the historical logfile information in a database.</para>

    <figure>
      <title>LOG2IDO Utility</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig7.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>FILE2SOCK</title>

    <para>The FILE2SOCK utility is quite simple. It reads input from a standard file (or STDIN) and writes all of that data to either a Unix
    domain socket or TCP socket. The data that is read is not processed in any way before it is sent to the socket.</para>

    <figure>
      <title>FILE2SOCK Utility</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig8.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>This utility is useful if you are directing the output of the IDOMOD event broker module and/or LOG2IDO utility to a standard
    file. Once these components finish writing their output to a file, you can use the FILE2SOCK utility to send the contents of the file to
    the IDO2DB daemon's TCP or Unix domain socket.</para>
  </section>

  <section label="IDO2DB" xml:id="IDO2DB-description">
    <title>IDO2DB</title>

    <para>The IDO2DB utility is designed to take the data output from the IDOMOD and LOG2IDO components and store it in a MySQL, Oracle, or PostgreSQL database.</para>

    <para>When it starts, the IDO2DB daemon creates either a TCP or Unix domain socket and waits for clients to connect. IDO2DB can run
    either as a standalone, multi-process daemon or under INETD (if using a TCP socket).</para>

    <figure>
      <title>IDO2DB Daemon</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig9.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Multiple clients can connect to the IDO2DB daemon's socket and transmit data simultaneously. A separate IDO2DB process is spawned
    to handle each new client that connects. Data is read from each client and stored in a user-specified database for later retrieval and
    processing.</para>

    <figure>
      <title>IDO2DB with multiple Clients</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig10.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The IDO2DB daemon currently supports MySQL, Oracle, and PostgreSQL databases.</para>
  </section>
</section>
