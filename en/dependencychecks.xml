<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="dependencychecks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="dependency_checks" />Predictive Dependency Checks</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>Host and service <link linkend="dependencies">dependencies</link> can be defined to allow you greater control over when
  checks are executed and when notifications are sent out. As dependencies are used to control basic aspects of the monitoring
  process, it is crucial to ensure that status information used in the dependency logic is as up to date as possible.</para>

  <para>&name-icinga; allows you to enable predictive dependency checks for hosts and services to ensure that the dependency logic
  will have the most up-to-date status information when it comes to making decisions about whether to send out notifications or
  allow active checks of a host or service.</para>

  <para><emphasis role="bold">How Do Predictive Checks Work?</emphasis></para>

  <para>The image below shows a basic diagram of hosts that are being monitored by &name-icinga;, along with their parent/child
  relationships and dependencies.</para>

  <para>The <emphasis>Switch2</emphasis> host in this example has just changed state from an UP state to a problem state.
  &name-icinga; needs to determine whether the host is DOWN or UNREACHABLE, so it will launch parallel checks of
  <emphasis>Switch2</emphasis>'s immediate parents (<emphasis>Firewall1</emphasis>) and children (<emphasis>Comp1</emphasis>,
  <emphasis>Comp2</emphasis>, and <emphasis>Switch3</emphasis>). This is a normal function of the <link
  linkend="networkreachability">host reachability</link> logic.</para>

  <para>You will also notice that <emphasis>Switch2</emphasis> is depending on <emphasis>Monitor1</emphasis> and
  <emphasis>File1</emphasis> for either notifications or check execution (which one is unimportant in this example). If predictive
  host dependency checks are enabled, &name-icinga; will launch parallel checks of <emphasis>Monitor1</emphasis> and
  <emphasis>File1</emphasis> at the same time it launches checks of <emphasis>Switch2</emphasis>'s immediate parents and children.
  &name-icinga; does this because it knows that it will have to test the dependency logic in the near future (e.g. for purposes of
  notification) and it wants to make sure it has the most current status information for the hosts that take part in the
  dependency.</para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/predictive-dependency-checks.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>That's how predictive dependency checks work. Simple, eh?</para>

  <note>
    <para>Predictive service dependency checks work in a similiar manner to what is described above. Except, of course, they deal
    with services instead of hosts.</para>
  </note>

  <para><emphasis role="bold">Enabling Predictive Checks</emphasis></para>

  <para>Predictive dependency checks involve rather little overhead, so I would recommend that you enable them. In most cases, the
  benefits of having accurate information for the dependency logic outweighs the extra overhead imposed by these checks.</para>

  <para>Enabling predictive dependency checks is easy:</para>

  <itemizedlist>
    <listitem>
      <para>Predictive host dependency checks are controlled by the <link
      linkend="configmain-enable_predictive_host_dependency_checks">enable_predictive_host_dependency_checks</link> option.</para>
    </listitem>

    <listitem>
      <para>Predictive service dependency checks are controlled by the <link
      linkend="configmain-enable_predictive_service_dependency_checks">enable_predictive_service_dependency_checks</link>
      option.</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Cached Checks</emphasis></para>

  <para>Predictive dependency checks are on-demand checks and are therefore subject to the rules of <link
  linkend="cachedchecks">cached checks</link>. Cached checks can provide you with performance improvements by allowing
  &name-icinga; to forgo running an actual host or service check if it can use a relatively recent check result instead. More
  information on cached checks can be found <link linkend="cachedchecks">here</link>.</para>
  <indexterm zone="dependency_checks"><primary>Dependencies</primary><secondary>Predictive Dependency Checks</secondary></indexterm>
</section>
