<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="tuning" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="performance_tuning" />Tuning &name-icinga; For Maximum Performance</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/tuning.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>So you've finally got &name-icinga; up and running and you want to know how you can tweak it a bit. Tuning &name-icinga;
  to increase performance can be necessary when you start monitoring a large number (&gt; 1,000) of hosts and services. Here are a
  few things to look at for optimizing &name-icinga;...</para>

  <para><emphasis role="bold">Optimization Tips:</emphasis></para>

  <orderedlist>
    <listitem>
      <para><emphasis role="bold">Graph performance statistics with MRTG</emphasis> . In order to keep track of how well your
      &name-icinga; installation handles load over time and how your configuration changes affect it, you should be graphing
      several important statistics with MRTG. This is really, really, really useful when it comes to tuning the performance of a
      &name-icinga; installation. Really. Information on how to do this can be found <link
      linkend="mrtggraphs">here</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Use large installation tweaks</emphasis> . Enabling the <link
      linkend="configmain-use_large_installation_tweaks">use_large_installation_tweaks</link> option may provide you with better
      performance. Read more about what this option does <link linkend="largeinstalltweaks">here</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Disable environment macros</emphasis> . Macros are normally made available to check,
      notification, event handler, etc. commands as environment variables. This can be a problem in a large &name-icinga;
      installation, as it consumes some additional memory and (more importantly) more CPU. If your scripts don't need to access
      the macros as environment variables (e.g. you pass all necessary macros on the command line), you don't need this feature.
      You can prevent macros from being made available as environment variables by using the <link
      linkend="configmain-enable_environment_macros">enable_environment_macros</link> option.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Check Result Reaper Frequency</emphasis> . The <link
      linkend="configmain-check_result_reaper_frequency">check_result_reaper_frequency</link> variable determines how often
      &name-icinga; should check for host and service check results that need to be processed. The maximum amount of time it can
      spend processing those results is determined by the max reaper time (see below). If your reaper frequency is too high (too
      infrequent), you might see high latencies for host and service checks.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Max Reaper Time</emphasis> . The <link
      linkend="configmain-max_check_result_reaper_time">max_check_result_reaper_time</link> variables determines the maximum
      amount of time the &name-icinga; daemon can spend processing the results of host and service checks before moving on to
      other things - like executing new host and service checks. Too high of a value can result in large latencies for your host
      and service checks. Too low of a value can have the same effect. If you're experiencing high latencies, adjust this variable
      and see what effect it has. Again, you should be <link linkend="mrtggraphs">graphing statistics</link> in order to make this
      determination.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Adjust buffer slots</emphasis> . You may need to adjust the value of the <link
      linkend="configmain-external_command_buffer_slots">external_command_buffer_slots</link> option. Graphing buffer slot
      statistics with <link linkend="mrtggraphs">MRTG</link> (see above) is critical in determining what values you should use for
      this option.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Check service latencies to determine best value for maximum concurrent checks</emphasis> .
      &name-icinga; can restrict the number of maximum concurrently executing service checks to the value you specify with the
      <link linkend="configmain-max_concurrent_checks">max_concurrent_checks</link> option. This is good because it gives you some
      control over how much load &name-icinga; will impose on your monitoring host, but it can also slow things down. If you are
      seeing high latency values (&gt; 10 or 15 seconds) for the majority of your service checks (via the <link
      linkend="cgis-extinfo_cgi">extinfo CGI</link>), you are probably starving &name-icinga; of the checks it needs. That's not
      &name-icinga;'s fault - its yours. Under ideal conditions, all service checks would have a latency of 0, meaning they were
      executed at the exact time that they were scheduled to be executed. However, it is normal for some checks to have small
      latency values. We would recommend taking the minimum number of maximum concurrent checks reported when running
      &name-icinga; with the <emphasis role="bold">-s</emphasis> command line argument and doubling it. Keep increasing it until
      the average check latency for your services is fairly low. More information on service check scheduling can be found <link
      linkend="checkscheduling">here</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Use passive checks when possible</emphasis> . The overhead needed to process the results of
      <link linkend="passivechecks">passive service checks</link> is much lower than that of "normal" active checks, so make use
      of that piece of info if you're monitoring a slew of services. It should be noted that passive service checks are only
      really useful if you have some external application doing some type of monitoring or reporting, so if you're having
      &name-icinga; do all the work, this won't help things.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Avoid using interpreted plugins</emphasis> . One thing that will significantly reduce the load
      on your monitoring host is the use of compiled (C/C++, etc.) plugins rather than interpreted script (Perl, etc) plugins.
      While Perl scripts and such are easy to write and work well, the fact that they are compiled/interpreted at every execution
      instance can significantly increase the load on your monitoring host if you have a lot of service checks. If you want to use
      Perl plugins, consider compiling them into true executables using perlcc(1) (a utility which is part of the standard Perl
      distribution) or compiling &name-icinga; with an embedded Perl interpreter (see below).</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Use the embedded Perl interpreter</emphasis> . If you're using a lot of Perl scripts for service
      checks, etc., you will probably find that compiling the <link linkend="embeddedperl">embedded Perl interpreter</link> into
      the &name-icinga; binary will speed things up.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Optimize host check commands</emphasis> . If you're checking host states using the check_ping
      plugin you'll find that host checks will be performed much faster if you break up the checks. Instead of specifying a
      <emphasis>max_attempts</emphasis> value of 1 in the host definition and having the check_ping plugin send 10 ICMP packets to
      the host, it would be much faster to set the <emphasis>max_attempts</emphasis> value to 10 and only send out 1 ICMP packet
      each time. This is due to the fact that &name-icinga; can often determine the status of a host after executing the plugin
      once, so you want to make the first check as fast as possible. This method does have its pitfalls in some situations (i.e.
      hosts that are slow to respond may be assumed to be down), but you'll see faster host checks if you use it. Another option
      would be to use a faster plugin (i.e. check_fping) as the <emphasis>host_check_command</emphasis> instead of
      check_ping.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Schedule regular host checks</emphasis> . Scheduling regular checks of hosts can actually help
      performance in &name-icinga;. This is due to the way the <link linkend="cachedchecks">cached check logic</link> works (see
      below). Host checks are run in parallel - just like service checks. To schedule regular checks of a host, set the
      <emphasis>check_interval</emphasis> directive in the <link linkend="objectdefinitions-host">host definition</link> to
      something greater than 0.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Enable cached host checks</emphasis> . On-demand host checks can
      benefit from caching. On-demand host checks are performed whenever &name-icinga; detects a service state change. These
      on-demand checks are executed because &name-icinga; wants to know if the host associated with the service changed state. By
      enabling cached host checks, you can optimize performance. In some cases, &name-icinga; may be able to used the old/cached
      state of the host, rather than actually executing a host check command. This can speed things up and reduce load on
      monitoring server. In order for cached checks to be effective, you need to schedule regular checks of your hosts (see
      above). More information on cached checks can be found <link linkend="cachedchecks">here</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Don't use agressive host checking</emphasis>. Unless you're having problems with &name-icinga;
      recognizing host recoveries, We would recommend not enabling the <link
      linkend="configmain-use_agressive_host_checking">use_aggressive_host_checking</link> option. With this option turned off
      host checks will execute much faster, resulting in speedier processing of service check results. However, host recoveries
      can be missed under certain circumstances when this it turned off. For example, if a host recovers and all of the services
      associated with that host stay in non-OK states (and don't "wobble" between different non-OK states), &name-icinga; may miss
      the fact that the host has recovered. A few people may need to enable this option, but the majority don't and we would
      recommend not using it unless you find it necessary...</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">External command optimizations</emphasis> . If you're processing a lot of external commands
      (i.e. passive checks in a <link linkend="distributed">distributed setup</link>, you'll probably want to set the <link
      linkend="configmain-command_check_interval">command_check_interval</link> variable to <emphasis role="bold">-1</emphasis>.
      This will cause &name-icinga; to check for external commands as often as possible. You should also consider increasing the
      number of available <link linkend="configmain-external_command_buffer_slots">external command buffer slots</link>. Buffers
      slots are used to hold external commands that have been read from the <link linkend="configmain-command_file">external
      command file</link> (by a separate thread) before they are processed by the &name-icinga; daemon. If your &name-icinga;
      daemon is receiving a lot of passive checks or external commands, you could end up in a situation where the buffers are
      always full. This results in child processes (external scripts, NSCA daemon, etc.) blocking when they attempt to write to
      the external command file. We would highly recommend that you graph external command buffer slot usage using MRTG and the
      nagiostats utility as described <link linkend="mrtggraphs">here</link>, so you understand the typical external command
      buffer usage of your &name-icinga; installation.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Optimize hardware for maximum performance</emphasis> . NOTE: Hardware performance shouldn't be
      an issue unless: 1) you're monitoring thousands of services, 2) you're doing a lot of post-processing of performance data,
      etc. Your system configuration and your hardware setup are going to directly affect how your operating system performs, so
      they'll affect how &name-icinga; performs. The most common hardware optimization you can make is with your hard drives. CPU
      and memory speed are obviously factors that affect performance, but disk access is going to be your biggest bottleneck.
      Don't store plugins, the status log, etc on slow drives (i.e. old IDE drives or NFS mounts). If you've got them, use
      UltraSCSI drives or fast IDE drives. An important note for IDE/Linux users is that many Linux installations do not attempt
      to optimize disk access. If you don't change the disk access parameters (by using a utility like <emphasis
      role="bold">hdparam</emphasis>), you'll loose out on a <emphasis role="bold">lot</emphasis> of the speedy features of the
      new IDE drives.</para>
    </listitem>
  </orderedlist>
  <indexterm zone="performance_tuning"><primary>Tuning &name-icinga; For Maximum Performance</primary></indexterm>
</section>
