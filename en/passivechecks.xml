<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="passivechecks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="passive_checks" />Passive Checks</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>In most cases you'll use &name-icinga; to monitor your hosts and services using regularly scheduled <link
  linkend="activechecks">active checks</link>. Active checks can be used to "poll" a device or service for status information
  every so often. &name-icinga; also supports a way to monitor hosts and services passively instead of actively. They key features
  of passive checks are as follows:</para>

  <itemizedlist>
    <listitem>
      <para>Passive checks are initiated and performed external applications/processes</para>
    </listitem>

    <listitem>
      <para>Passive check results are submitted to &name-icinga; for processing</para>
    </listitem>
  </itemizedlist>

  <para>The major difference between active and passive checks is that active checks are initiated and performed by &name-icinga;,
  while passive checks are performed by external applications.</para>

  <para><emphasis role="bold">Uses For Passive Checks</emphasis></para>

  <para>Passive checks are useful for monitoring services that are:</para>

  <itemizedlist>
    <listitem>
      <para>Asynchronous in nature and cannot be monitored effectively by polling their status on a regularly scheduled
      basis</para>
    </listitem>

    <listitem>
      <para>Located behind a firewall and cannot be checked actively from the monitoring host</para>
    </listitem>
  </itemizedlist>

  <para>Examples of asynchronous services that lend themselves to being monitored passively include SNMP traps and security
  alerts. You never know how many (if any) traps or alerts you'll receive in a given time frame, so it's not feasible to just
  monitor their status every few minutes.</para>

  <para>Passive checks are also used when configuring <link linkend="distributed">distributed</link> or <link
  linkend="redundancy">redundant</link> monitoring installations.</para>

  <para><emphasis role="bold">How Passive Checks Work</emphasis></para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/passivechecks.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>Here's how passive checks work in more detail...</para>

  <orderedlist>
    <listitem>
      <para>An external application checks the status of a host or service.</para>
    </listitem>

    <listitem>
      <para>The external application writes the results of the check to the <link linkend="configmain-command_file">external
      command file</link>.</para>
    </listitem>

    <listitem>
      <para>The next time &name-icinga; reads the external command file it will place the results of all passive checks into a
      queue for later processing. The same queue that is used for storing results from active checks is also used to store the
      results from passive checks.</para>
    </listitem>

    <listitem>
      <para>&name-icinga; will periodically execute a <link linkend="configmain-check_result_reaper_frequency">check result reaper
      event</link> and scan the check result queue. Each service check result that is found in the queue is processed in the same
      manner - regardless of whether the check was active or passive. &name-icinga; may send out notifications, log alerts, etc.
      depending on the check result information.</para>
    </listitem>
  </orderedlist>

  <para>The processing of active and passive check results is essentially identical. This allows for seamless integration of
  status information from external applications with &name-icinga;.</para>

  <para><emphasis role="bold">Enabling Passive Checks</emphasis></para>

  <para>In order to enable passive checks in &name-icinga;, you'll need to do the following:</para>

  <itemizedlist>
    <listitem>
      <para>Set <link linkend="configmain-accept_passive_service_checks">accept_passive_service_checks</link> directive is set to
      1.</para>
    </listitem>

    <listitem>
      <para>Set the <emphasis>passive_checks_enabled</emphasis> directive in your host and service definitions is set to 1.</para>
    </listitem>
  </itemizedlist>

  <para>If you want to disable processing of passive checks on a global basis, set the <link
  linkend="configmain-accept_passive_service_checks">accept_passive_service_checks</link> directive to 0.</para>

  <para>If you would like to disable passive checks for just a few hosts or services, use the
  <emphasis>passive_checks_enabled</emphasis> directive in the host and/or service definitions to do so.</para>

  <para><emphasis role="bold">Submitting Passive Service Check Results</emphasis></para>

  <para>External applications can submit passive service check results to &name-icinga; by writing a PROCESS_SERVICE_CHECK_RESULT
  <link linkend="extcommands">external command</link> to the external command file.</para>

  <para>The format of the command is as follows:</para>

  <screen> [&lt;timestamp&gt;] PROCESS_SERVICE_CHECK_RESULT;&lt;host_name&gt;;&lt;svc_description&gt;;&lt;return_code&gt;;&lt;plugin_output&gt;</screen>

  <para>where...</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>timestamp</emphasis> is the time in time_t format (seconds since the UNIX epoch) that the service check was
      perfomed (or submitted). Please note the single space after the right bracket.</para>
    </listitem>

    <listitem>
      <para><emphasis>host_name</emphasis> is the short name of the host associated with the service in the service
      definition</para>
    </listitem>

    <listitem>
      <para><emphasis>svc_description</emphasis> is the description of the service as specified in the service definition</para>
    </listitem>

    <listitem>
      <para><emphasis>return_code</emphasis> is the return code of the check (0=OK, 1=WARNING, 2=CRITICAL, 3=UNKNOWN)</para>
    </listitem>

    <listitem>
      <para><emphasis>plugin_output</emphasis> is the text output of the service check (i.e. the plugin output)</para>
    </listitem>
  </itemizedlist>

  <note>
    <para>A service must be defined in &name-icinga; before you can submit passive check results for it! &name-icinga; will ignore
    all check results for services that had not been configured before it was last (re)started.</para>
  </note>

  <tip>
    <para>An example shell script of how to submit passive service check results to &name-icinga; can be found in the
    documentation on <link linkend="volatileservices">volatile services</link>.</para>
  </tip>

  <para><emphasis role="bold">Submitting Passive Host Check Results</emphasis></para>

  <para>External applications can submit passive host check results to &name-icinga; by writing a PROCESS_HOST_CHECK_RESULT
  external command to the external command file.</para>

  <para>The format of the command is as follows:</para>

  <screen> [&lt;timestamp&gt;] PROCESS_HOST_CHECK_RESULT;&lt;host_name&gt;;&lt;host_status&gt;;&lt;plugin_output&gt;</screen>

  <para>where...</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>timestamp</emphasis> is the time in time_t format (seconds since the UNIX epoch) that the host check was
      perfomed (or submitted). Please note the single space after the right bracket.</para>
    </listitem>

    <listitem>
      <para><emphasis>host_name</emphasis> is the short name of the host (as defined in the host definition)</para>
    </listitem>

    <listitem>
      <para><emphasis>host_status</emphasis> is the status of the host (0=UP, 1=DOWN, 2=UNREACHABLE)</para>
    </listitem>

    <listitem>
      <para><emphasis>plugin_output</emphasis> is the text output of the host check</para>
    </listitem>
  </itemizedlist>

  <note>
    <para>A host must be defined in &name-icinga; before you can submit passive check results for it! &name-icinga; will ignore
    all check results for hosts that had not been configured before it was last (re)started.</para>
  </note>

  <para><emphasis role="bold">Passive Checks and Host States</emphasis></para>

  <para>Unlike with active host checks, &name-icinga; does not (by default) attempt to determine whether or host is DOWN or
  UNREACHABLE with passive checks. Rather, &name-icinga; takes the passive check result to be the actual state the host is in and
  doesn't try to determine the host's actual state using the <link linkend="networkreachability">reachability logic</link>. This
  can cause problems if you are submitting passive checks from a remote host or you have a <link linkend="distributed">distributed
  monitoring setup</link> where the parent/child host relationships are different.</para>

  <para>You can tell &name-icinga; to translate DOWN/UNREACHABLE passive check result states to their "proper" state by using the
  <link linkend="configmain-translate_passive_host_checks">translate_passive_host_checks</link> variable. More information on how
  this works can be found <link linkend="passivestatetranslation">here</link>.</para>

  <note>
    <para>Passive host checks are normally treated as <link linkend="statetypes">HARD states</link>, unless the <link
    linkend="configmain-passive_host_checks_are_soft">passive_host_checks_are_soft</link> option is enabled.</para>
  </note>

  <para><emphasis role="bold">Submitting Passive Check Results From Remote Hosts</emphasis></para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/nsca.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>If an application that resides on the same host as &name-icinga; is sending passive host or service check results, it can
  simply write the results directly to the external command file as outlined above. However, applications on remote hosts can't do
  this so easily.</para>

  <para>In order to allow remote hosts to send passive check results to the monitoring host, the <link
  linkend="addons-nsca">NSCA</link> addon was developed. The NSCA addon consists of a daemon that runs on the &name-icinga; hosts
  and a client that is executed from remote hosts. The daemon will listen for connections from remote clients, perform some basic
  validation on the results being submitted, and then write the check results directly into the external command file (as
  described above). More information on the NSCA addon can be found <link linkend="addons-nsca">here</link>.</para>
  <indexterm zone="passive_checks"><primary>Passive Checks</primary></indexterm>
</section>
