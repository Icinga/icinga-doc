<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="nsca" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="nsca_"/>&name-nsca;</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>Nagios Service Check Acceptor (or &name-nsca; for short) is an addon to transmit check results from one system to another. It
  consists of two modules: the sender (send_nsca) and the receiver (nsca). The data is sent in a secure manner. Despite its name host check
  results are transmitted as well.</para>

  <figure>
    <title>&name-nsca;</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../images/nsca.png"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para>&name-nsca; is running as a daemon on the &name-icinga; server. It listens for information sent from remote machines using the
  send_nsca program (on Unix/Linux machines) or NSClient++ (often used on Windows machines). The data will be encrypted using the method
  specified in send_nsca.cfg (or nsc.ini in the case of NSClient++). The daemon will validate the data in a *very* basic manner by
  decrypting the information using the password which is stored in the local nsca.cfg file. If the data looks like it was encrypted using
  the same password then the daemon will try to output the data as external commands into the local &name-icinga; command pipe.</para>

  <para>The following instructions are mainly based on the README included in the &name-nsca; package.</para>

  <para><emphasis role="bold">Prerequisites</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>&name-icinga; should be up and running</para>
    </listitem>

    <listitem>
      <para><emphasis><link linkend="configmain-check_external_commands">check_external_commands = 1</link></emphasis> should be set in
      <literal>icinga.cfg</literal></para>
    </listitem>

    <listitem>
      <para><emphasis><link linkend="configmain-command_check_interval">command_check_interval = &lt;n&gt;[s]</link></emphasis> should be
      set in <literal>icinga.cfg</literal></para>
    </listitem>

    <listitem>
      <para><emphasis><link linkend="configmain-log_passive_checks">log_passive_checks = 1</link></emphasis> should be set in
      <literal>icinga.cfg</literal> while testing, otherwise there will be no messages about incoming passive checks</para>
    </listitem>

    <listitem>
      <para>libmcrypt and libmcrypt-devel packages are installed (which may be named similar depending on the distribution used), otherwise
      use one of the following commands to install the packages:</para>

      <programlisting> #&gt; apt-get install libmcrypt libmcrypt-devel # Debian / Ubuntu
 #&gt; yum install libmcrypt libmcrypt-devel     # RHEL / Fedora / CentOS
 #&gt; zypper install libmcrypt libmcrypt-devel  # SLES / OpenSuSE (or use Yast instead)</programlisting>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Download and compile</emphasis></para>

  <note>
    <para>Instead of installing &name-nsca; from scratch you may want to use a package which might be available for your OS. Please take a
    look at the <link xlink:href="https://www.icinga.org/download/packages">table of packages</link>.</para>

    <para>If you are planning to install from source then please use the official release tarball using something like <programlisting> #&gt; wget http://sourceforge.net/projects/nagios/files/nsca-2.x/nsca-&ver-nsca;/nsca-&ver-nsca;.tar.gz -O nsca-&ver-nsca;.tar.gz</programlisting></para>
  </note>

  <important>
    <para>Please don't use git snapshots unless you have an issue which might be solved in the current developer version.</para>
  </important>

  <para>The maximum length of data to be transmitted is set to 2,048 bytes, the maximal length of plugin output is set to 512 bytes. If that
  is not sufficient then you have to alter the appropriate value in <literal>icinga-nsca/include/common.h</literal>.</para>

  <para><programlisting> #define MAX_INPUT_BUFFER        2048    /* max size of most buffers we use */
 #define MAX_PLUGINOUTPUT_LENGTH 512 </programlisting>Please keep in mind that you have to recompile the programs if you change this values
  at a later stage.</para>

  <para>Due to the setting of the following define in include/common.h (in Icinga core) the max. value cannot exceed 8,192 bytes.</para>

  <para><programlisting> #define MAX_EXTERNAL_COMMAND_LENGTH             8192    /* max length of an external command */</programlisting>After
  setting the owner change to the newly created directory and call configure and make</para>

  <programlisting> #&gt; chown -R icinga icinga-nsca
 #&gt; cd icinga-nsca
 #&gt; ./configure 
 #&gt; make all</programlisting>

  <para>Afterwards two programs (send and send_nsca) are created in the <literal>src</literal> directory.</para>

  <caution>
    <para>If the libmcrypt packages are not found "./configure" will complain but will NOT end with a non-zero return code so please check
    <emphasis>config.log</emphasis> using <programlisting> #&gt; grep mcrypt.h: config.log</programlisting> This command should return no
    lines.</para>
  </caution>

  <para>If the libmcrypt modules are not found, the user or group deviate from "icinga" or the port to be used is not the default 5667 you
  can use several options to specify different values. Call "<literal>./configure -h</literal>" to see the options available.</para>

  <para>After changing to "nsca_tests" you can try to execute "./runtests". Please note that these tests require several Perl modules
  described in the README file.</para>

  <para><emphasis role="bold">Customise</emphasis></para>

  <para>The sample-config directory contains <literal>nsca.cfg</literal> and <literal>send_nsca.cfg</literal>. At least the settings of the
  directives "password" and "encryption_method" / "decryption_method" should be reviewed/altered before copying the files. Remember to set
  the same password in all copies of these config files. If you want to have different passwords on different remote servers you have to run
  multiple nsca daemons on the &name-icinga; server listening on different ports. This doesn't work if you start the daemon using
  inetd/xinetd.</para>

  <para><emphasis role="bold">First test</emphasis></para>

  <para>Switch to the &name-icinga; user and run a first test</para>

  <programlisting> #&gt; su - icinga
 $&gt; cd /usr/src/icinga-nsca/src
 $&gt; ./nsca -c ../sample-config/nsca.cfg
 $&gt; echo -e "A\tB\tC\tD\n" | ./send_nsca -H localhost -c ../sample-config/send_nsca.cfg
 $&gt; exit</programlisting>

  <para>This should return the message "1 data packet(s) sent to host successfully.". In the first place it only means that send_nsca and
  nsca are able to communicate with each other on the local host using the sample config files as it works perfectly without a running
  &name-icinga; instance. But it is important nevertheless: If this test fails then there is no sense in continuing. Instead verify the
  settings in nsca.cfg and send_nsca.cfg. Check for messages in your syslog (e.g. <literal>/var/log/messages</literal>) as well.</para>

  <para>If the prerequisites are fulfilled then you should see some warnings in <literal>icinga.log</literal> complaining that host "A" and
  service "B" are not found in the &name-icinga; configuration. This means that nsca has sufficient permissions to write to the
  &name-icinga; command file. Check if the nsca daemon and &name-icinga; are running with different users if there are no messages in
  icinga.log. If there are no messages check the setting of <link linkend="configmain-log_passive_checks">log_passive_checks</link> in
  <literal>icinga.cfg</literal>.</para>

  <para><emphasis role="bold">Install</emphasis></para>

  <para>"make install" will do nothing (yet) so you have to copy some files to new locations. The following commands will copy the nsca
  module to the directory where the &name-icinga; binary is located and the config file to the &name-icinga; config folder. We assume that
  you installed &name-icinga; using one of the quickstart guides.</para>

  <programlisting> #&gt; cp -p nsca /usr/local/icinga/bin/
 #&gt; cp ../sample-config/nsca.cfg /usr/local/icinga/etc/</programlisting>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">nsca daemon</emphasis></para>

      <para>If you choose to use xinetd the daemon will be started automatically. Otherwise you have to start the daemon manually after
      switching to the &name-icinga; user (which you might have done already during "First test")</para>

      <programlisting> #&gt; su - icinga
 $&gt; /usr/local/icinga/bin/nsca -c /usr/local/icinga/etc/nsca.cfg</programlisting>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">inetd/xinetd</emphasis></para>

      <para>If you want the daemon to be started by (x)inetd you have to extend /etc/services, alter/copy another file and restart (x)inetd.
      Don't forget to stop the nsca daemon you started during "First test".</para>

      <note>
        <para>The setting of "server_port" specified in nsca.cfg is ignored when you use inetd/xinetd.</para>
      </note>

      <programlisting> #&gt; kill &lt; /var/run/nsca.pid
 #&gt; echo "nsca 5667/tcp # NSCA" &gt;&gt; /etc/services</programlisting>

      <para>Depending on the superserver which is installed on your system there are three alternatives</para>

      <itemizedlist>
        <listitem>
          <para>inetd WITH tcpwrappers</para>

          <para>Add entries to your /etc/hosts.allow and /etc/hosts.deny file to enable TCP wrapper protection for the nsca service. This is
          optional, although highly recommended. Add "nsca stream tcp nowait &lt;user&gt; /usr/sbin/tcpd &lt;nsca-binary&gt; -c
          &lt;nsca-cfg&gt; --inetd" to /etc/inetd.conf, e.g.</para>

          <programlisting> #&gt; echo "nsca stream tcp nowait icinga /usr/sbin/tcpd /usr/local/icinga/bin/nsca -c /usr/local/icinga/etc/nsca.cfg --inetd" &gt;&gt; /etc/inetd.conf
 #&gt; /etc/init.d/inetd restart</programlisting>
        </listitem>

        <listitem>
          <para>inetd WITHOUT tcpwrappers</para>

          <para>Add "nsca stream tcp nowait &lt;user&gt; &lt;nsca-binary&gt; -c &lt;nsca-cfg&gt; --inetd" to /etc/inetd.conf, e.g.</para>

          <programlisting> #&gt; echo "nsca stream tcp nowait icinga /usr/local/icinga/bin/nsca -c /usr/local/icinga/etc/nsca.cfg --inetd" &gt;&gt; /etc/inetd.conf
 #&gt; /etc/init.d/inetd restart</programlisting>
        </listitem>

        <listitem>
          <para>xinetd</para>

          <para>Consider editing the config file nsca.xinetd in the sample-config folder and replacing &lt;ipaddress1&gt;... by the IP
          addresses of your client machines (where send_nsca will be running). This only works if xinetd was compiled with support for
          tcpwrappers. If you are running DHCP then this will not work and you should delete this line.</para>

          <para>Add entries to your /etc/hosts.allow and /etc/hosts.deny file to enable TCP wrapper protection for the nsca service. This is
          optional, although highly recommended. Copy the file to your xinetd folder</para>

          <programlisting> #&gt; cp -p ../sample-config/nsca.xinetd /etc/xinetd.d/
 #&gt; /etc/init.d/xinetd restart</programlisting>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Remote system(s)</emphasis></para>

  <para>You're done on the local system but apparently send_nsca has to be copied to the remote system(s).</para>

  <para>Please note that you have to compile send_nsca for the platform it should run upon so you might have to install the libmcrypt
  packages and configure/make as described above on multiple servers.</para>

  <para><emphasis role="bold">Copy files</emphasis></para>

  <para>You're free where to place binary and config file. We assume that you have a directory structure similar to the &name-icinga;
  server</para>

  <programlisting> #&gt; scp -p &lt;&name-icinga; server&gt;:/usr/local/icinga-nsca/src/send_nsca /usr/local/icinga/bin/
 #&gt; scp -p &lt;&name-icinga; server&gt;:/usr/local/icinga-nsca/sample-config/send_nsca.cfg /usr/local/icinga/etc/</programlisting>

  <para><emphasis role="bold">Second test</emphasis></para>

  <para>Now you can rerun the test on the remote system(s)</para>

  <programlisting> #&gt; su - icinga
 $&gt; echo -e "A\tB\tC\tD\n" | /usr/local/icinga/bin/send_nsca -H &lt;&name-icinga; server&gt; -c /usr/local/icinga/etc/send_nsca.cfg</programlisting>

  <para>This as well should return the message "1 data packet(s) sent to host successfully." and there should be warnings in icinga.log on
  the &name-icinga; server similar to the ones mentioned above. If there are no messages check the setting of <link
  linkend="configmain-log_passive_checks">log_passive_checks</link> in <literal>icinga.cfg</literal>.</para>

  <para><emphasis role="bold">Troubleshooting</emphasis></para>

  <para>If the daemon is not permitted to write to the command pipe then the data will be lost! You should run the daemon using the same
  user you specified for &name-icinga;.</para>

  <para>If the object (host and/or service) is not included in the running configuration then the data will be rejected.</para>

  <para>Host name (and service description, if applicable) are case sensitive and have to match the definition in &name-icinga;.</para>

  <para>Check if you specified the same password in nsca.cfg and send_nsca.cfg. Otherwise the transmission will fail.</para>

  <para>Check if you used the same encryption/decryption method. Otherwise the transmission will fail.</para>

  <para>Check if your firewall setting allow the communication on the port specified (default is 5667)</para>

  <para>If you are using xinetd check if the IP address(es) specified after "only_from=" match to the remote system(s) or remove this line
  (and restart xinetd)</para>

  <para>Activate "debug=1" in <literal>nsca.cfg</literal>, restart the daemon (if applicable) and look for messages in the syslog /
  <literal>nsca.log</literal>.</para>

  <para><emphasis role="bold">Security</emphasis></para>

  <para>There are some security implications with allowing remote clients to provide check results to &name-icinga;. Because of this, you
  have the option of encrypting the packets that the &name-nsca; client sends to the &name-nsca; daemon. Read the SECURITY file for more
  information on the security risks of running &name-nsca;, along with an explanation of what kind of protection the encryption provides
  you.</para>

  <para><emphasis role="bold">Operation</emphasis></para>

  <para>send_nsca is used to send the check results from the remote host to the &name-icinga; server. The syntax differs depending on the
  object type. To submit service check information use</para>

  <para>&lt;host_name&gt;[tab]&lt;svc_description&gt;[tab]&lt;return_code&gt;[tab]&lt;plugin_output&gt;[newline]</para>

  <para>where:</para>

  <para>&lt;host_name&gt;=short name of the host that the service is associated with (as defined in the host_name directive of the service
  definition)</para>

  <para>&lt;svc_description&gt;=description of the service (as defined in the service_description directive of the service
  definition)</para>

  <para>&lt;return_code&gt;=numeric return code (0,1,2,3 as explained <link linkend="pluginapi">here</link>)</para>

  <para>&lt;plugin_output&gt;=output from host/service check</para>

  <para>Host check information is submitted in a similiar fashion - just leave out the service description:</para>

  <para>&lt;host_name&gt;[tab]&lt;return_code&gt;[tab]&lt;plugin_output&gt;[newline]</para>

  <para><emphasis role="bold">Integration into &name-icinga;</emphasis></para>

  <para>So far you only created some prerequisites for running passive checks but didn't define any host or service actually using the
  functionality.</para>

  <para>Although you only receive check results you still need to specify the "check_command" directive in your definitions. There is a
  plugin called "check_dummy" which can be used for this purpose. You may have to add a command definition if it's not already included. The
  second argument is optional and might contain an explanatory text.</para>

  <para><programlisting> define command{
    command_name check_dummy
    command_line $USER1$/check_dummy $ARG1$ $ARG2$
    }</programlisting>You may want to create a service template. The host template might look similiar to that (just replace "service" by
  "host")</para>

  <para><programlisting> define service{
    use                     generic-service   ; template to inherit from
    name                    passive-service   ; name of this template
    active_checks_enabled   0                 ; no active checks
    passive_checks_enabled  1                 ; allow passive checks
    check_command           check_dummy!0     ; use "check_dummy", RC=0 (OK)
    check_period            24x7              ; check active all the time
    check_freshness         0                 ; don't check if check result is "stale"
    register                0                 ; this is a template, not a real service
    }</programlisting>Using the template above the service definition might look like</para>

  <para><programlisting> define service{
    use                     passive-service   ; template to inherit from
    host_name               remotehost        ; host where send_nsca is located
    service_description     Diskspace         ; service to be checked
    }</programlisting>Restart &name-icinga; to include the definitions in your running configuration</para>

  <para><programlisting> #&gt; /etc/init.d/icinga restart</programlisting>Change to your remote host, switch to the Icinga user and execute
  send_nsca replacing &lt;Icinga server&gt; by the IP address of the server running &name-icinga;</para>

  <para><programlisting> #&gt; su - icinga
 $&gt; echo -e "remotehost\tDiskspace\t0\t/var=78%\n" | /usr/local/icinga/bin/send_nsca -H &lt;Icinga server&gt; -c /usr/local/icinga/etc/send_nsca.cfg</programlisting>Please
  keep in mind to specify the host name and service description exactly as defined in your Icinga definition (because the processing is case
  sensitive). Otherwise you'll get messages in icinga.log that the object could not be found. If there are no messages check the setting of
  <link linkend="configmain-log_passive_checks">log_passive_checks</link> in <literal>icinga.cfg</literal>.</para>

  <para>After a short while you should see messages in icinga.log showing that the information submitted was processed. You should see the
  information in the classic UI as well turning the service state from "Pending" to "OK" and containing the data you specified.</para>

  <indexterm zone="nsca">
    <primary>NSCA</primary>

    <secondary>nsca</secondary>
  </indexterm>

  <indexterm zone="nsca">
    <primary>NSCA</primary>

    <secondary>send_nsca</secondary>
  </indexterm>
</section>
