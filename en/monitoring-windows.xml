<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="monitoring-windows" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="monitoring_windows"/>Monitoring Windows Machines</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>This document describes how you can monitor "private" services and attributes of Windows machines, such as:</para>

  <itemizedlist>
    <listitem>
      <para>Memory usage</para>
    </listitem>

    <listitem>
      <para>CPU load</para>
    </listitem>

    <listitem>
      <para>Disk usage</para>
    </listitem>

    <listitem>
      <para>Service states</para>
    </listitem>

    <listitem>
      <para>Running processes</para>
    </listitem>

    <listitem>
      <para>etc.</para>
    </listitem>
  </itemizedlist>

  <para>Publicly available services that are provided by Windows machines (HTTP, FTP, POP3, etc.) can be monitored easily by following the
  documentation on <link linkend="monitoring-publicservices">monitoring publicly available services</link>.</para>

  <note>
    <para>These instructions assume that you've installed &name-icinga; according to the <link linkend="quickstart">quickstart guide</link>.
    The sample configuration entries below reference objects that are defined in the sample config files (<emphasis>commands.cfg</emphasis>,
    <emphasis>templates.cfg</emphasis>, etc.) that are installed if you follow the quickstart.</para>
  </note>

  <para><emphasis role="bold">Overview</emphasis></para>

  <para><informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata align="left" fileref="../images/monitoring-windows.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </informalfigure></para>

  <para>Monitoring private services or attributes of a Windows machine requires that you install an agent on it. This agent acts as a proxy
  between the &name-icinga; plugin that does the monitoring and the actual service or attribute of the Windows machine. Without installing
  an agent on the Windows box, &name-icinga; would be unable to monitor private services or attributes of the Windows box.</para>

  <para>For this example, we will be installing the <link xlink:href="http://sourceforge.net/projects/nscplus">&name-nsclient;</link> addon
  on the Windows machine and using the <emphasis>check_nt</emphasis> plugin to communicate with the &name-nsclient; addon. The
  <emphasis>check_nt</emphasis> plugin should already be installed on the &name-icinga; server if you followed the quickstart guide.</para>

  <para>Other Windows agents (like <link xlink:href="http://sourceforge.net/projects/nc-net">NC_Net</link>) could be used instead of
  &name-nsclient; if you wish - provided you change command and service definitions, etc. a bit. For the sake of simplicity we will only
  cover using the &name-nsclient; addon in these instructions.</para>

  <para><emphasis role="bold">Steps</emphasis></para>

  <para>There are several steps you'll need to follow in order to monitor a new Windows machine. They are:</para>

  <orderedlist>
    <listitem>
      <para>Perform first-time prerequisites</para>
    </listitem>

    <listitem>
      <para>Install a monitoring agent on the Windows machine</para>
    </listitem>

    <listitem>
      <para>Create new host and service definitions for monitoring the Windows machine</para>
    </listitem>

    <listitem>
      <para>Restart the &name-icinga; daemon</para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">What's Already Done For You</emphasis></para>

  <para>To make your life a bit easier, a few configuration tasks have already been done for you:</para>

  <itemizedlist>
    <listitem>
      <para>A <emphasis>check_nt</emphasis> command definition has been added to the <emphasis>commands.cfg</emphasis> file. This allows you
      to use the <emphasis>check_nt</emphasis> plugin to monitor Window services.</para>
    </listitem>

    <listitem>
      <para>A Windows server host template (called <emphasis>windows-server</emphasis>) has already been created in the
      <emphasis>templates.cfg</emphasis> file. This allows you to add new Windows host definitions in a simple manner.</para>
    </listitem>
  </itemizedlist>

  <para>The above-mentioned config files can be found in the <emphasis>&url-icinga-base;/etc/objects/</emphasis> directory. You can modify
  the definitions in these and other definitions to suit your needs better if you'd like. However, we'd recommend waiting until you're more
  familiar with configuring &name-icinga; before doing so. For the time being, just follow the directions outlined below and you'll be
  monitoring your Windows boxes in no time.</para>

  <para><emphasis role="bold">Prerequisites</emphasis></para>

  <para>The first time you configure &name-icinga; to monitor a Windows machine, you'll need to do a bit of extra work. Remember, you only
  need to do this for the *first* Windows machine you monitor.</para>

  <para>Edit the main &name-icinga; config file.</para>

  <screen>#&gt; vi &url-icinga-cfg;</screen>

  <para>Remove the leading hash (#) sign from the following line in the main configuration file:</para>

  <screen> #cfg_file=&url-icinga-base;/etc/objects/windows.cfg</screen>

  <para>Save the file and exit.</para>

  <para>What did you just do? You told &name-icinga; to look to the <emphasis>&url-icinga-base;/etc/objects/windows.cfg</emphasis> to find
  additional object definitions. That's where you'll be adding Windows host and service definitions. That configuration file already
  contains some sample host, hostgroup, and service definitions. For the *first* Windows machine you monitor, you can simply modify the
  sample host and service definitions in that file, rather than creating new ones.</para>

  <para><emphasis role="bold">Installing the Windows Agent</emphasis></para>

  <para>Before you can begin monitoring private services and attributes of Windows machines, you'll need to install an agent on those
  machines. We recommend using the &name-nsclient; addon, which can be found at <link
  xlink:href="http://sourceforge.net/projects/nscplus">http://sourceforge.net/projects/nscplus</link>. These instructions will take you
  through a basic installation of the &name-nsclient; addon, as well as the configuration of &name-icinga; for monitoring the Windows
  machine.</para>

  <para>1. Download the latest stable version of the &name-nsclient; addon from <link
  xlink:href="http://sourceforge.net/projects/nscplus">http://sourceforge.net/projects/nscplus</link></para>

  <para>2. Unzip the &name-nsclient; files into a new C:\NSClient++ directory</para>

  <para>3. Open a command prompt and change to the C:\NSClient++ directory</para>

  <para>4. Register the &name-nsclient; system service with the following command:</para>

  <screen> nsclient++ /install</screen>

  <para>5. Open the services manager and make sure the NSClientpp service is allowed to interact with the desktop (see the 'Log On' tab of
  the services manager). If it isn't already allowed to interact with the desktop, check the box to allow it to.</para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/nscpp.png" format="PNG"/>
      </imageobject>
    </inlinemediaobject></para>

  <para>6. Edit the NSC.INI file (located in the C:\NSClient++ directory) and make the following changes:</para>

  <itemizedlist>
    <listitem>
      <para>Uncomment all the modules listed in the [modules] section, except for CheckWMI.dll and RemoteConfiguration.dll</para>
    </listitem>

    <listitem>
      <para>Optionally require a password for clients by changing the 'password' option in the [Settings] section.</para>
    </listitem>

    <listitem>
      <para>Uncomment the 'allowed_hosts' option in the [Settings] section. Add the IP address of the &name-icinga; server to this line,
      ip.add.ress/bits for a range or leave it blank to allow all hosts to connect.</para>
    </listitem>

    <listitem>
      <para>Make sure the 'port' option in the [NSClient] section is uncommented and set to '12489' (the default port).</para>
    </listitem>
  </itemizedlist>

  <para>7. Start the &name-nsclient; service with the following command:</para>

  <screen> nsclient++ /start</screen>

  <para>8. Success! The Windows server can now be added to the &name-icinga; monitoring configuration...</para>

  <para><emphasis role="bold">Configuring &name-icinga;</emphasis></para>

  <para>Now it's time to define some <link linkend="objectdefinitions">object definitions</link> in your &name-icinga; configuration files
  in order to monitor the new Windows machine.</para>

  <para>Open the <emphasis>windows.cfg</emphasis> file for editing.</para>

  <screen>#&gt; vi &url-icinga-base;/etc/objects/windows.cfg</screen>

  <para>Add a new <link linkend="objectdefinitions-host">host</link> definition for the Windows machine that you're going to monitor. If
  this is the *first* Windows machine you're monitoring, you can simply modify the sample host definition in
  <emphasis>windows.cfg</emphasis>. Change the <emphasis>host_name</emphasis>, <emphasis>alias</emphasis>, and <emphasis>address</emphasis>
  fields to appropriate values for the Windows box.</para>

  <screen> define host{
        ; Inherit default values from a Windows server template
        use             windows-server   ; make sure you keep this line!
        host_name       winserver
        alias           My Windows Server
        address         192.168.1.2
        }</screen>

  <para>Good. Now you can add some service definitions (to the same configuration file) in order to tell &name-icinga; to monitor different
  aspects of the Windows machine. If this is the *first* Windows machine you're monitoring, you can simply modify the sample service
  definitions in <emphasis>windows.cfg</emphasis>.</para>

  <note>
    <para>Replace "<emphasis>winserver</emphasis>" in the example definitions below with the name you specified in the
    <emphasis>host_name</emphasis> directive of the host definition you just added.</para>
  </note>

  <para>Add the following service definition to monitor the version of the &name-nsclient; addon that is running on the Windows server. This
  is useful when it comes time to upgrade your Windows servers to a newer version of the addon, as you'll be able to tell which Windows
  machines still need to be upgraded to the latest version of &name-nsclient;.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     NSClient++ Version
        check_command           check_nt!CLIENTVERSION
        }</screen>

  <para>Add the following service definition to monitor the uptime of the Windows server.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     Uptime
        check_command           check_nt!UPTIME
        }</screen>

  <para>Add the following service definition to monitor the CPU utilization on the Windows server and generate a CRITICAL alert if the
  5-minute CPU load is 90% or more or a WARNING alert if the 5-minute load is 80% or greater.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     CPU Load
        check_command           check_nt!CPULOAD!-l 5,80,90
        }</screen>

  <para>Add the following service definition to monitor memory usage on the Windows server and generate a CRITICAL alert if memory usage is
  90% or more or a WARNING alert if memory usage is 80% or greater.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     Memory Usage
        check_command           check_nt!MEMUSE!-w 80 -c 90
        }</screen>

  <para>Add the following service definition to monitor usage of the C:\ drive on the Windows server and generate a CRITICAL alert if disk
  usage is 90% or more or a WARNING alert if disk usage is 80% or greater.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     C:\ Drive Space
        check_command           check_nt!USEDDISKSPACE!-l c -w 80 -c 90
        }</screen>

  <para>Add the following service definition to monitor the W3SVC service state on the Windows machine and generate a CRITICAL alert if the
  service is stopped.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     W3SVC
        check_command           check_nt!SERVICESTATE!-d SHOWALL -l W3SVC
        }</screen>

  <para>Add the following service definition to monitor the Explorer.exe process on the Windows machine and generate a CRITICAL alert if the
  process is not running.</para>

  <screen> define service{
        use                     generic-service
        host_name               winserver
        service_description     Explorer
        check_command           check_nt!PROCSTATE!-d SHOWALL -l Explorer.exe
        }</screen>

  <para><note>
      <para>Well. To be honest it would be pretty dumb to monitor if the explorer is running but it's quite easy to test if it works like
      expected ;-).</para>
    </note>That's it for now. You've added some basic services that should be monitored on the Windows box. Save the configuration
  file.</para>

  <para><emphasis role="bold">Password Protection</emphasis></para>

  <para>If you specified a password in the &name-nsclient; configuration file on the Windows machine, you'll need to modify the
  <emphasis>check_nt</emphasis> command definition to include the password. Open the <emphasis>commands.cfg</emphasis> file for
  editing.</para>

  <screen> #&gt; vi &url-icinga-base;/etc/objects/commands.cfg</screen>

  <para>Change the definition of the <emphasis>check_nt</emphasis> command to include the "-s PASSWORD" argument (where PASSWORD may be the
  password you specified on the Windows machine) like this:</para>

  <screen> define command{
        command_name    check_nt
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -s $USER9$ -v $ARG1$ $ARG2$
        }</screen>

  <para>Save the file.</para>

  <note>
    <para>It's a bad idea to specify passwords in the "normal" configuration files as they will be viewable via the web interface. You
    should use <link linkend="macrolist-user">$USERn$</link> macros located in <filename>resource.cfg</filename> to store the
    passwords.</para>

    <programlisting>$USER9$=averysecretpassword</programlisting>
  </note>

  <para><emphasis role="bold">Restarting &name-icinga;</emphasis></para>

  <para>You're done with modifying the &name-icinga; configuration, so you'll need to <link linkend="verifyconfig">verify your configuration
  files</link> and <link linkend="startstop">restart &name-icinga;</link>.</para>

  <para>If the verification process produces any errors messages, fix your configuration file before continuing. Make sure that you don't
  (re)start &name-icinga; until the verification process completes without any errors!</para>

  <indexterm zone="monitoring_windows">
    <primary>Monitoring</primary>

    <secondary>Monitoring Windows Machines</secondary>
  </indexterm>

  <indexterm zone="monitoring_windows">
    <primary>&name-nsclient;</primary>

    <secondary>Monitoring Windows Machines</secondary>
  </indexterm>
</section>
