<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="customobjectvars" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="custom_object_vars" />Custom Object Variables</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>Users often request that new variables be added to host, service, and contact definitions. These include variables for
  SNMP community, MAC address, AIM username, Skype number, and street address. The list is endless. The problem that I see with
  doing this is that it makes &name-icinga; less generic and more infrastructure-specific. &name-icinga; was intended to be
  flexible, which meant things needed to be designed in a generic manner. Host definitions in &name-icinga;, for example, have a
  generic "address" variable that can contain anything from an IP address to human-readable driving directions - whatever is
  appropriate for the user's setup.</para>

  <para>Still, there needs to be a method for admins to store information about their infrastructure components in their
  &name-icinga; configuration without imposing a set of specific variables on others. &name-icinga; attempts to solve this problem
  by allowing users to define custom variables in their object definitions. Custom variables allow users to define additional
  properties in their host, service, and contact definitions, and use their values in notifications, event handlers, and host and
  service checks.</para>

  <para><emphasis role="bold">Custom Variable Basics</emphasis></para>

  <para>There are a few important things that you should note about custom variables:</para>

  <itemizedlist>
    <listitem>
      <para>Custom variable names must begin with an underscore (_) to prevent name collision with standard variables</para>
    </listitem>

    <listitem>
      <para>Custom variable names are converted to all uppercase before use</para>
    </listitem>

    <listitem>
      <para>Custom variables are <link linkend="objectinheritance">inherited</link> from object templates like normal
      variables</para>
    </listitem>

    <listitem>
      <para>Scripts can reference custom variable values with <link linkend="macros">macros and environment
      variables</link></para>
    </listitem>
  </itemizedlist>

  <anchor xml:id="customobjectvars-runtime" />
  <important><para>Custom variables are replaced <emphasis>during runtime</emphasis>, neither during the verification phase (icinga -v
    icinga.cfg) nor during the &name-icinga; start up process so placing them in host names, service descriptions, and several other places
    of the object definition will lead to an error message during verification like &quot;<literal>&lt;object&gt; contains one or more
    illegal characters.</literal>&quot;. Changing the directive "illegal_object_name_chars" will <emphasis>not</emphasis> solve this issue.
    </para>
  </important>

  <para><emphasis role="bold">Examples</emphasis></para>

  <para>Here's an example of how custom variables can be defined in different types of object definitions:</para>

  <screen>
define host{
        host_name       linuxserver
        _mac_address    00:06:5B:A6:AD:AA       ; &lt;-- Custom MAC_ADDRESS variable
        _rack_number    R32                     ; &lt;-- Custom RACK_NUMBER variable
        ...
        }

define service{
        host_name       linuxserver
        description     Memory Usage
        _SNMP_community public                  ; &lt;-- Custom SNMP_COMMUNITY variable
        _TechContact    Jane Doe                ; &lt;-- Custom TECHCONTACT variable
        ....
        }

define contact{
        contact_name    john
        _AIM_username   john16                  ; &lt;-- Custom AIM_USERNAME variable
        _YahooID        john32                  ; &lt;-- Custom YAHOOID variable
        ...
        }
</screen>

  <para><emphasis role="bold">Custom Variables As Macros</emphasis></para>

  <para>Custom variable values can be referenced in scripts and executables that &name-icinga; runs for checks, notifications,
  etc. by using <link linkend="macros">macros</link> or environment variables.</para>

  <para>In order to prevent name collision among custom variables from different object types, &name-icinga; prepends "_HOST",
  "_SERVICE", or "_CONTACT" to the beginning of custom host, service, or contact variables, respectively, in macro and environment
  variable names. The table below shows the corresponding macro and environment variable names for the custom variables that were
  defined in the example above.</para>

  <informaltable frame="all">
    <tgroup cols="4">
      <colspec colname="c1" colwidth="10*" />

      <colspec colname="c2" colwidth="10*" />

      <colspec colname="c3" colwidth="10*" />

      <colspec colname="c4" colwidth="25*" />

      <tbody>
        <row>
          <entry><para> <emphasis role="bold">Object Type</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Variable Name</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Macro Name</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Environment Variable</emphasis> </para></entry>
        </row>

        <row>
          <entry><para>Host</para></entry>

          <entry><para>MAC_ADDRESS</para></entry>

          <entry><para>$_HOSTMAC_ADDRESS$</para></entry>

          <entry><para>ICINGA__HOSTMAC_ADDRESS</para></entry>
        </row>

        <row>
          <entry><para>Host</para></entry>

          <entry><para>RACK_NUMBER</para></entry>

          <entry><para>$_HOSTRACK_NUMBER$</para></entry>

          <entry><para>ICINGA__HOSTRACK_NUMBER</para></entry>
        </row>

        <row>
          <entry><para>Service</para></entry>

          <entry><para>SNMP_COMMUNITY</para></entry>

          <entry><para>$_SERVICESNMP_COMMUNITY$</para></entry>

          <entry><para>ICINGA__SERVICESNMP_COMMUNITY</para></entry>
        </row>

        <row>
          <entry><para>Service</para></entry>

          <entry><para>TECHCONTACT</para></entry>

          <entry><para>$_SERVICETECHCONTACT$</para></entry>

          <entry><para>ICINGA__SERVICETECHCONTACT</para></entry>
        </row>

        <row>
          <entry><para>Contact</para></entry>

          <entry><para>AIM_USERNAME</para></entry>

          <entry><para>$_CONTACTAIM_USERNAME$</para></entry>

          <entry><para>ICINGA__CONTACTAIM_USERNAME</para></entry>
        </row>

        <row>
          <entry><para>Contact</para></entry>

          <entry><para>YAHOOID</para></entry>

          <entry><para>$_CONTACTYAHOOID$</para></entry>

          <entry><para>ICINGA__CONTACTYAHOOID</para></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">Custom Variables And Inheritance</emphasis></para>

  <para>Custom object variables are <link linkend="objectinheritance">inherited</link> just like standard host, service, or
  contact variables.</para>
  <indexterm zone="custom_object_vars"><primary>Custom Object Variables</primary></indexterm>
  <indexterm zone="customobjectvars-runtime">
    <primary>Custom Object Variables</primary>
    <secondary>Evaluation only at runtime</secondary>
  </indexterm>
</section>
