<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="plugins" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="Icinga_plugins" />&name-icinga; Plugins</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>Unlike many other monitoring tools, &name-icinga; does not include any internal mechanisms for checking the status of
  hosts and services on your network. Instead, &name-icinga; relies on external programs (called plugins) to do all the dirty
  work.</para>

  <para><emphasis role="bold">What Are Plugins?</emphasis></para>

  <para>Plugins are compiled executables or scripts (Perl scripts, shell scripts, etc.) that can be run from a command line to
  check the status or a host or service. &name-icinga; uses the results from plugins to determine the current status of hosts and
  services on your network.</para>

  <para>&name-icinga; will execute a plugin whenever there is a need to check the status of a service or host. The plugin does
  <emphasis>something</emphasis> (notice the very general term) to perform the check and then simply returns the results to
  &name-icinga;. &name-icinga; will process the results that it receives from the plugin and take any necessary actions (running
  <link linkend="eventhandlers">event handlers</link>, sending out <link linkend="notifications">notifications</link>,
  etc).</para>

  <para><emphasis role="bold">Plugins As An Abstraction Layer</emphasis></para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/plugins.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>Plugins act as an abstraction layer between the monitoring logic present in the &name-icinga; daemon and the actual
  services and hosts that are being monitored.</para>

  <para>The upside of this type of plugin architecture is that you can monitor just about anything you can think of. If you can
  automate the process of checking something, you can monitor it with &name-icinga;. There are already a lot of plugins that have
  been created in order to monitor basic resources such as processor load, disk usage, ping rates, etc. If you want to monitor
  something else, take a look at the documentation on <link linkend="pluginapi">writing plugins</link> and roll your own. Its
  simple!</para>

  <para>The downside to this type of plugin architecture is the fact that &name-icinga; has absolutely no idea what it is that
  you're monitoring. You could be monitoring network traffic statistics, data error rates, room temperate, CPU voltage, fan speed,
  processor load, disk space, or the ability of your super-fantastic toaster to properly brown your bread in the morning...
  &name-icinga; doesn't understand the specifics of what's being monitored - it just tracks changes in the
  <emphasis>state</emphasis> of those resources. Only the plugins themselves know exactly what they're monitoring and how to
  perform the actual checks.</para>

  <para><emphasis role="bold">What Plugins Are Available?</emphasis></para>

  <para>There are plugins currently available to monitor many different kinds of devices and services, including:</para>

  <itemizedlist>
    <listitem>
      <para>HTTP, POP3, IMAP, FTP, SSH, DHCP</para>
    </listitem>

    <listitem>
      <para>CPU Load, Disk Usage, Memory Usage, Current Users</para>
    </listitem>

    <listitem>
      <para>Unix/Linux, Windows, and Netware Servers</para>
    </listitem>

    <listitem>
      <para>Routers and Switches</para>
    </listitem>

    <listitem>
      <para>etc.</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Obtaining Plugins</emphasis></para>

  <para>Plugins are not distributed with &name-icinga;, but you can download the official &name-nagios; plugins and many
  additional plugins created and maintained by &name-nagios; and &name-icinga; users from the following locations:</para>

  <itemizedlist>
    <listitem>
      <para>&name-nagios; Plugins Project: <link
      xlink:href="http://nagiosplug.sourceforge.net/">http://nagiosplug.sourceforge.net/</link></para>
    </listitem>

    <listitem>
      <para>&name-nagios; Downloads Page: <link
      xlink:href="http://www.nagios.org/download/">http://www.nagios.org/download/</link></para>
    </listitem>

    <listitem>
      <para>&name-icinga;Exchange.org: <link xlink:href="http://www.monitoringexchange.org">&url-monitoringexchange;</link></para>
    </listitem>
  </itemizedlist>

  <para><anchor xml:id="plugins-howto" /><emphasis role="bold">How Do I Use Plugin X?</emphasis></para>

  <para>Most all plugins will display basic usage information when you execute them using '-h' or '--help' on the command line.
  For example, if you want to know how the check_http plugin works or what options it accepts, you should try executing the
  following command:</para>

  <screen> ./check_http --help</screen>

  <note>
    <para>Always execute the plugin using the &name-icinga; user because some plugins will create temporary files. If you're
    testing plugins with another user then the &name-icinga; user may not have the permissions to overwrite existing files.</para>

    <para>Don't call the plugin using relative paths (i.e <emphasis>./check_test_plugin</emphasis>). Always use absolute paths
    because that's the way $name-icinga; does it (i.e. <emphasis>&url-icinga-libexec;/check_test_plugin</emphasis>).</para>
  </note>

  <para><emphasis role="bold">Plugin API</emphasis></para>

  <para>You can find information on the technical aspects of plugins, as well as how to go about creating your own custom plugins
  <link linkend="pluginapi">here</link>.</para>
  <indexterm zone="Icinga_plugins"><primary>Plugins</primary><secondary>&name-icinga; Plugins</secondary></indexterm>
  <indexterm zone="plugins-howto"><primary>How Do I Use Plugin X?</primary></indexterm>
</section>
