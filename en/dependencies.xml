<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="dependencies" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="host_srv_dependencies" />Host and Service Dependencies</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>Service and host dependencies are an advanced feature of &name-icinga; that allow you to control the behavior of hosts and
  services based on the status of one or more other hosts or services. We'll explain how dependencies work, along with the
  differences between host and service dependencies.</para>

  <para><emphasis role="bold">Service Dependencies Overview</emphasis></para>

  <para>There are a few things you should know about service dependencies:</para>

  <orderedlist>
    <listitem>
      <para>A service can be dependent on one or more other services</para>
    </listitem>

    <listitem>
      <para>A service can be dependent on services which are not associated with the same host</para>
    </listitem>

    <listitem>
      <para>Service dependencies are not inherited (unless specifically configured to)</para>
    </listitem>

    <listitem>
      <para>Service dependencies can be used to cause service check execution and service notifications to be suppressed under
      different circumstances (OK, WARNING, UNKNOWN, and/or CRITICAL states)</para>
    </listitem>

    <listitem>
      <para>Service dependencies might only be valid during specific <link linkend="timeperiods">timeperiods</link></para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">Defining Service Dependencies</emphasis></para>

  <para>First, the basics. You create service dependencies by adding <link linkend="objectdefinitions-servicedependency">service
  dependency definitions</link> in your <link linkend="configobject">object config file(s)</link>. In each definition you specify
  the <emphasis>dependent</emphasis> service, the service you are <emphasis>depending on</emphasis>, and the criteria (if any)
  that cause the execution and notification dependencies to fail (these are described later).</para>

  <para>You can create several dependencies for a given service, but you must add a separate service dependency definition for
  each dependency you create.</para>

  <para><emphasis role="bold">Example Service Dependencies</emphasis></para>

  <para>The image below shows an example logical layout of service notification and execution dependencies. Different services are
  dependent on other services for notifications and check execution.</para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/service-dependencies.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>In this example, the dependency definitions for <emphasis>Service F</emphasis> on <emphasis>Host C</emphasis> would be
  defined as follows:</para>

  <screen> define servicedependency{
        host_name                       Host B
        service_description             Service D
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      o
        notification_failure_criteria   w,u
        }

 define servicedependency{
        host_name                       Host B
        service_description             Service E
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      n
        notification_failure_criteria   w,u,c
        }

 define servicedependency{
        host_name                       Host B
        service_description             Service C
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      w
        notification_failure_criteria   c
        }</screen>

  <para>The other dependency definitions shown in the image above would be defined as follows:</para>

  <screen> define servicedependency{
        host_name                       Host A
        service_description             Service A
        dependent_host_name             Host B
        dependent_service_description   Service D
        execution_failure_criteria      u
        notification_failure_criteria   n
        }

 define servicedependency{
        host_name                       Host A
        service_description             Service B
        dependent_host_name             Host B
        dependent_service_description   Service E
        execution_failure_criteria      w,u
        notification_failure_criteria   c
        }

 define servicedependency{
        host_name                       Host B
        service_description             Service C
        dependent_host_name             Host B
        dependent_service_description   Service E
        execution_failure_criteria      n
        notification_failure_criteria   w,u,c
        }</screen>

  <para><emphasis role="bold">How Service Dependencies Are Tested</emphasis></para>

  <para>Before &name-icinga; executes a service check or sends notifications out for a service, it will check to see if the
  service has any dependencies. If it doesn't have any dependencies, the check is executed or the notification is sent out as it
  normally would be. If the service <emphasis>does</emphasis> have one or more dependencies, &name-icinga; will check each
  dependency entry as follows:</para>

  <orderedlist>
    <listitem>
      <para>&name-icinga; gets the current status<superscript> <link linkend="dependencies-hard_dependencies">*</link>
      </superscript> of the service that is being <emphasis>depended upon</emphasis>.</para>
    </listitem>

    <listitem>
      <para>&name-icinga; compares the current status of the service that is being <emphasis>depended upon</emphasis> against
      either the execution or notification failure options in the dependency definition (whichever one is relevant at the
      time).</para>
    </listitem>

    <listitem>
      <para>If the current status of the service that is being <emphasis>depended upon</emphasis> matches one of the failure
      options, the dependency is said to have failed and &name-icinga; will break out of the dependency check loop.</para>
    </listitem>

    <listitem>
      <para>If the current state of the service that is being <emphasis>depended upon</emphasis> does not match any of the failure
      options for the dependency entry, the dependency is said to have passed and &name-icinga; will go on and check the next
      dependency entry.</para>
    </listitem>
  </orderedlist>

  <para>This cycle continues until either all dependencies for the service have been checked or until one dependency check
  fails.</para>

  <para><anchor xml:id="dependencies-hard_dependencies" /></para>

  <note>
    <para><superscript>*</superscript>One important thing to note is that by default, &name-icinga; will use the most current
    <link linkend="statetypes">hard state</link> of the service(s) that is/are being depended upon when it does the dependeny
    checks. If you want &name-icinga; to use the most current state of the services (regardless of whether its a soft or hard
    state), enable the <link linkend="configmain-soft_state_dependencies">soft_state_dependencies</link> option.</para>
  </note>

  <para><emphasis role="bold">Execution Dependencies</emphasis></para>

  <para>Execution dependencies are used to restrict when <link linkend="activechecks">active checks</link> of a service can be
  performed. <link linkend="passivechecks">Passive checks</link> are not restricted by execution dependencies.</para>

  <para>If <emphasis>all</emphasis> of the execution dependency tests for the service <emphasis>passed</emphasis>, &name-icinga;
  will execute the check of the service as it normally would. If even just one of the execution dependencies for a service fails,
  &name-icinga; will temporarily prevent the execution of checks for that (dependent) service. At some point in the future the
  execution dependency tests for the service may all pass. If this happens, &name-icinga; will start checking the service again as
  it normally would. More information on the check scheduling logic can be found <link
  linkend="checkscheduling">here</link>.</para>

  <para>In the example above, <emphasis role="bold">Service E</emphasis> would have failed execution dependencies if <emphasis
  role="bold">Service B</emphasis> is in a WARNING or UNKNOWN state. If this was the case, the service check would not be
  performed and the check would be scheduled for (potential) execution at a later time.</para>

  <para><emphasis role="bold">Notification Dependencies</emphasis></para>

  <para>If <emphasis>all</emphasis> of the notification dependency tests for the service <emphasis>passed</emphasis>,
  &name-icinga; will send notifications out for the service as it normally would. If even just one of the notification
  dependencies for a service fails, &name-icinga; will temporarily repress notifications for that (dependent) service. At some
  point in the future the notification dependency tests for the service may all pass. If this happens, &name-icinga; will start
  sending out notifications again as it normally would for the service. More information on the notification logic can be found
  <link linkend="notifications">here</link>.</para>

  <para>In the example above, <emphasis role="bold">Service F</emphasis> would have failed notification dependencies if <emphasis
  role="bold">Service C</emphasis> is in a CRITICAL state, <emphasis>and/or</emphasis><emphasis role="bold">Service D</emphasis>
  is in a WARNING or UNKNOWN state, <emphasis>and/or</emphasis> if <emphasis role="bold">Service E</emphasis> is in a WARNING,
  UNKNOWN, or CRITICAL state. If this were the case, notifications for the service would not be sent out.</para>

  <para><emphasis role="bold">Dependency Inheritance</emphasis></para>

  <para>As mentioned before, service dependencies are <emphasis>not</emphasis> inherited by default. In the example above you can
  see that Service F is dependent on Service E. However, it does not automatically inherit Service E's dependencies on Service B
  and Service C. In order to make Service F dependent on Service C we had to add another service dependency definition. There is
  no dependency definition for Service B, so Service F is <emphasis>not</emphasis> dependent on Service B.</para>

  <para>If you <emphasis>do</emphasis> wish to make service dependencies inheritable, you must use the
  <emphasis>inherits_parent</emphasis> directive in the <link linkend="objectdefinitions-servicedependency">service
  dependency</link> definition. When this directive is enabled, it indicates that the dependency inherits dependencies of the
  service <emphasis>that is being depended upon</emphasis> (also referred to as the master service). In other words, if the master
  service is dependent upon other services and any one of those dependencies fail, this dependency will also fail.</para>

  <para>In the example above, imagine that you want to add a new dependency for service F to make it dependent on service A. You
  could create a new dependency definition that specified service F as the <emphasis>dependent</emphasis> service and service A as
  being the <emphasis>master</emphasis> service (i.e. the service <emphasis>that is being dependend on</emphasis>). You could
  alternatively modify the dependency definition for services D and F to look like this:</para>

  <screen> define servicedependency{
        host_name                       Host B
        service_description             Service D
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      o
        notification_failure_criteria   n
        inherits_parent         1
        }</screen>

  <para>Since the <emphasis>inherits_parent</emphasis> directive is enabled, the dependency between services A and D will be
  tested when the dependency between services F and D are being tested.</para>

  <para>Dependencies can have multiple levels of inheritence. If the dependency definition between A and D had its
  <emphasis>inherits_parent</emphasis> directive enable and service A was dependent on some other service (let's call it service
  G), the service F would be dependent on services D, A, and G (each with potentially different criteria).</para>

  <para><emphasis role="bold">Host Dependencies</emphasis></para>

  <para>As you'd probably expect, host dependencies work in a similiar fashion to service dependencies. The difference is that
  they're for hosts, not services.</para>

  <tip>
    <para>Do not confuse host dependencies with parent/child host relationships. You should be using parent/child host
    relationships (defined with the <emphasis>parents</emphasis> directive in <link linkend="objectdefinitions-host">host</link>
    definitions) for most cases, rather than host dependencies. A description of how parent/child host relationships work can be
    found in the documentation on <link linkend="networkreachability">network reachability</link>.</para>
  </tip>

  <para>Here are the basics about host dependencies:</para>

  <orderedlist>
    <listitem>
      <para>A host can be dependent on one or more other host</para>
    </listitem>

    <listitem>
      <para>Host dependencies are not inherited (unless specifically configured to)</para>
    </listitem>

    <listitem>
      <para>Host dependencies can be used to cause host check execution and host notifications to be suppressed under different
      circumstances (UP, DOWN, and/or UNREACHABLE states)</para>
    </listitem>

    <listitem>
      <para>Host dependencies might only be valid during specific <link linkend="timeperiods">timeperiods</link></para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">Example Host Dependencies</emphasis></para>

  <para>The image below shows an example of the logical layout of host notification dependencies. Different hosts are dependent on
  other hosts for notifications.</para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/host-dependencies.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>In the example above, the dependency definitions for <emphasis>Host C</emphasis> would be defined as follows:</para>

  <screen> define hostdependency{
        host_name                       Host A
        dependent_host_name             Host C
        notification_failure_criteria   d
        }

 define hostdependency{
        host_name                       Host B
        dependent_host_name             Host C
        notification_failure_criteria   d,u
        }</screen>

  <para>As with service dependencies, host dependencies are not inherited. In the example image you can see that Host C does not
  inherit the host dependencies of Host B. In order for Host C to be dependent on Host A, a new host dependency definition must be
  defined.</para>

  <para>Host notification dependencies work in a similiar manner to service notification dependencies. If <emphasis>all</emphasis>
  of the notification dependency tests for the host <emphasis>pass</emphasis>, &name-icinga; will send notifications out for the
  host as it normally would. If even just one of the notification dependencies for a host fails, &name-icinga; will temporarily
  repress notifications for that (dependent) host. At some point in the future the notification dependency tests for the host may
  all pass. If this happens, &name-icinga; will start sending out notifications again as it normally would for the host. More
  information on the notification logic can be found <link linkend="notifications">here</link>.</para>
  <indexterm zone="host_srv_dependencies"><primary>Dependencies</primary><secondary>Host and Service Dependencies</secondary></indexterm>
  <indexterm zone="dependencies-hard_dependencies"><primary>Dependencies</primary><secondary>hard dependencies</secondary></indexterm>
</section>
