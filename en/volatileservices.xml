<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="volatileservices" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="volatile_services" />Volatile Services</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>&name-icinga; has the ability to distinguish between "normal" services and "volatile" services. The
  <emphasis>is_volatile</emphasis> option in each service definition allows you to specify whether a specific service is volatile
  or not. For most people, the majority of all monitored services will be non-volatile (i.e. "normal"). However, volatile services
  can be very useful when used properly...</para>

  <para><emphasis role="bold">What Are They Useful For?</emphasis></para>

  <para>Volatile services are useful for monitoring...</para>

  <itemizedlist>
    <listitem>
      <para>Things that automatically reset themselves to an "OK" state each time they are checked</para>
    </listitem>

    <listitem>
      <para>Events such as security alerts which require attention every time there is a problem (and not just the first
      time)</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">What's So Special About Volatile Services?</emphasis></para>

  <para>Volatile services differ from "normal" services in three important ways. <emphasis>Each time</emphasis> they are checked
  when they are in a <link linkend="statetypes">hard</link> non-OK state, and the check returns a non-OK state (i.e. no state
  change has occurred)...</para>

  <itemizedlist>
    <listitem>
      <para>The non-OK service state is logged</para>
    </listitem>

    <listitem>
      <para>Contacts are notified about the problem (if that's <link linkend="notifications">what should be done</link>).</para>

      <note>
        <para>Notification intervals are ignored for volatile services.</para>
      </note>
    </listitem>

    <listitem>
      <para>The <link linkend="eventhandlers">event handler</link> for the service is run (if one has been defined)</para>
    </listitem>
  </itemizedlist>

  <para>These events normally only occur for services when they are in a non-OK state and a hard state change has just occurred.
  In other words, they only happen the first time that a service goes into a non-OK state. If future checks of the service result
  in the same non-OK state, no hard state change occurs and none of the events mentioned take place again.</para>

  <tip>
    <para>If you are only interested in logging, consider using <link linkend="stalking">stalking</link> options instead.</para>
  </tip>

  <para><emphasis role="bold">The Power Of Two</emphasis></para>

  <para>If you combine the features of volatile services and <link linkend="passivechecks">passive service checks</link>, you can
  do some very useful things. Examples of this include handling SNMP traps, security alerts, etc.</para>

  <para>How about an example... Let's say you're running <link
  xlink:href="http://sourceforge.net/projects/sentrytools/">PortSentry</link> to detect port scans on your machine and
  automatically firewall potential intruders. If you want to let &name-icinga; know about port scans, you could do the
  following...</para>

  <para><emphasis role="bold">&name-icinga; Configuration:</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>Create a service definition called <emphasis>Port Scans</emphasis> and associate it with the host that PortSentry is
      running on.</para>
    </listitem>

    <listitem>
      <para>Set the <emphasis>max_check_attempts</emphasis> directive in the service definition to 1. This will tell &name-icinga;
      to immediate force the service into a <link linkend="statetypes">hard state</link> when a non-OK state is reported.</para>
    </listitem>

    <listitem>
      <para>Set the <emphasis>active_checks_enabled</emphasis> directive in the service definition to 0. This prevents
      &name-icinga; from actively checking the service.</para>
    </listitem>

    <listitem>
      <para>Set the <emphasis>passive_checks_enabled</emphasis> directive in the service definition to 1. This enables passive
      checks for the service.</para>
    </listitem>

    <listitem>
      <para>Set this <emphasis>is_volatile</emphasis> directive in the service definition to 1.</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">PortSentry Configuration:</emphasis></para>

  <para>Edit your PortSentry configuration file (portsentry.conf) and define a command for the <emphasis>KILL_RUN_CMD</emphasis>
  directive as follows:</para>

  <screen> KILL_RUN_CMD="/usr/local/&name-icinga;/libexec/eventhandlers/submit_check_result host_name 'Port Scans' 2 'Port scan from host $TARGET$ on port $PORT$.  Host has been firewalled.'"</screen>

  <para>Make sure to replace <emphasis>host_name</emphasis> with the short name of the host that the service is associated
  with.</para>

  <para><emphasis role="bold">Port Scan Script:</emphasis></para>

  <para>Create a shell script in the <emphasis>&url-icinga-base;/libexec/eventhandlers</emphasis> directory named
  <emphasis>submit_check_result</emphasis>. The contents of the shell script should be something similiar to the
  following...</para>

  <screen>#!/bin/sh

# Write a command to the &name-icinga; command file to cause
# it to process a service check result
 
echocmd="/bin/echo"
 
CommandFile="&url-icinga-base;/var/rw/nagios.cmd"

# get the current date/time in seconds since UNIX epoch
datetime=`date +%s`
 
# create the command line to add to the command file
cmdline="[$datetime] PROCESS_SERVICE_CHECK_RESULT;$1;$2;$3;$4"
 
# append the command to the end of the command file
`$echocmd $cmdline &gt;&gt; $CommandFile`</screen>

  <para>What will happen when PortSentry detects a port scan on the machine in the future?</para>

  <itemizedlist>
    <listitem>
      <para>PortSentry will firewall the host (this is a function of the PortSentry software)</para>
    </listitem>

    <listitem>
      <para>PortSentry will execute the <emphasis>submit_check_result</emphasis> shell script and send a passive check result to
      &name-icinga;</para>
    </listitem>

    <listitem>
      <para>&name-icinga; will read the external command file and see the passive service check submitted by PortSentry</para>
    </listitem>

    <listitem>
      <para>&name-icinga; will put the <emphasis>Port Scans</emphasis> service in a hard CRITICAL state and send notifications to
      contacts</para>
    </listitem>
  </itemizedlist>

  <para>Pretty neat, huh?</para>
  <indexterm zone="volatile_services"><primary>Volatile Services</primary></indexterm>
</section>
