<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="faststartup" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="fast_startup" />Fast Startup Options</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>There are a few things you can do that can decrease the amount of time it take &name-icinga; to startup (or restart). These speedups
  involve easing some of the burden involved in processing your configuration files.</para>

  <para>Using these techniques is particularly useful when you have one or more of the following:</para>

  <itemizedlist>
    <listitem>
      <para>Large configurations</para>
    </listitem>

    <listitem>
      <para>Complex configurations (heavy use of template features)</para>
    </listitem>

    <listitem>
      <para>Installations where frequest restarts are necessary</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Background</emphasis></para>

  <para>Whenever &name-icinga; starts/restarts it has to process your configuration files before it can get down to the business of
  monitoring. This configuration startup process involves a number of steps:</para>

  <itemizedlist>
    <listitem>
      <para>Reading the config files</para>
    </listitem>

    <listitem>
      <para>Resolving template definitions</para>
    </listitem>

    <listitem>
      <para>"Recombobulating" your objects (Ethan Galstads term for the various types of work that occurs)</para>
    </listitem>

    <listitem>
      <para>Duplicating object definitions</para>
    </listitem>

    <listitem>
      <para>Inheriting object properties</para>
    </listitem>

    <listitem>
      <para>Sorting your object definitions</para>
    </listitem>

    <listitem>
      <para>Verifying object relationship integrity</para>
    </listitem>

    <listitem>
      <para>Checking for circular paths</para>
    </listitem>

    <listitem>
      <para>and more...</para>
    </listitem>
  </itemizedlist>

  <para>Some of these steps can be quite time-consuming when you have large or complex configurations. Is there a way to speed any of these
  steps up? Yes!</para>

  <para><emphasis role="bold">Evaluating Startup Times</emphasis></para>

  <para>Before we get on to making things faster, we need to see what's possible and whether or not we should even bother with the whole
  thing. This is easy to do - simply start &name-icinga; with the <emphasis role="bold">-s</emphasis> or <emphasis role="bold">
  --test-scheduling</emphasis> command line switch to get timing and scheduling information.</para>

  <para>Starting with &name-icinga; 1.0.2 there is an additional option <emphasis role="bold">-S</emphasis> or <emphasis role="bold">
  --show-scheduling</emphasis>. This will add information about the scheduling queue to the output.</para>

  <para>An example of the output (abbreviated to only show relevant portions) is shown below. For this example, we're using an &name-icinga;
  config that has 25 hosts defined and just over 10,000 services.</para>

  <screen> #&gt; &url-icinga-bin; -s &url-icinga-cfg;

&name-icinga; &ver-icinga;
Copyright (c) 2009 Nagios Core Development Team and Community Contributors
Copyright (c) 1999-2009 Ethan Galstad
Last Modified: 12-16-2009
License: GPL


Timing information on object configuration processing is listed
below.  You can use this information to see if precaching your
object configuration would be useful.

Object Config Source: Config files (uncached)

OBJECT CONFIG PROCESSING TIMES      (* = Potential for precache savings with -u option)
----------------------------------
Read:                 0.486780 sec
Resolve:              0.004106 sec  *
Recomb Contactgroups: 0.000077 sec  *
Recomb Hostgroups:    0.000172 sec  *
Dup Services:         0.028801 sec  *
Recomb Servicegroups: 0.010358 sec  *
Duplicate:            5.666932 sec  *
Inherit:              0.003770 sec  *
Recomb Contacts:      0.030085 sec  *
Sort:                 2.648863 sec  *
Register:             2.654628 sec
Free:                 0.021347 sec
                      ============
TOTAL:                11.555925 sec  * = 8.393170 sec (72.63%) estimated savings


Timing information on configuration verification is listed below.

CONFIG VERIFICATION TIMES          (* = Potential for speedup with -x option)
----------------------------------
Object Relationships: 1.400807 sec
Circular Paths:       54.676622 sec  *
Misc:                 0.006924 sec
                      ============
TOTAL:                56.084353 sec  * = 54.676622 sec (97.5%) estimated savings</screen>

  <para>Okay, let's see what happened. Looking at the totals, it took roughly <emphasis role="bold">11.6</emphasis> seconds to process the
  configuration files and another <emphasis role="bold">56</emphasis> seconds to verify the config. That means that every time we start or
  restart &name-icinga; with this configuration, it will take nearly <emphasis role="bold">68 seconds</emphasis> of startup work before it
  can monitor anything! That's not acceptable if we have to restart &name-icinga; on a semi-regular basis.</para>

  <para>What can we do about this? Take another look at the output and you'll see that &name-icinga; estimates that we could save about
  <emphasis role="bold">8.4</emphasis> seconds off the configuration processing time and another <emphasis role="bold">54.7</emphasis> off
  the verification times. In total, &name-icinga; thinks we could save <emphasis role="bold">63 seconds</emphasis> of the normal startup
  time if some optimizations were taken.</para>

  <para>Whoa! From <emphasis role="bold">68 seconds</emphasis> to just <emphasis role="bold">5 seconds</emphasis>? Yep, read on for how to
  do it.</para>

  <para><emphasis role="bold">Pre-Caching Object Configuration</emphasis></para>

  <para>&name-icinga; can spend quite a bit of time parsing your config files, especially if you make use of the template features such as
  inheritance, etc. In order to reduce the time it takes to parse your config, you can have &name-icinga; pre-process and pre-cache your
  config files for future use.</para>

  <informaltable frame="none">
    <tgroup cols="2">
      <colspec colname="c1" colwidth="50*" />

      <colspec colname="c2" colwidth="50*" />

      <tbody>
        <row>
          <entry align="left" valign="top"><para> When you run &name-icinga; with the <emphasis role="bold">-p</emphasis> command line
          option, &name-icinga; will read your config files in, process them, and save them to a pre-cached object config file (specified by
          the <link linkend="configmain-precached_object_file">precached_object_file</link> directive). This pre-cached config file will
          contain pre-processed configuration entries that are easier/faster for &name-icinga; to process in the future.</para> <para>You
          must use the <emphasis role="bold">-p</emphasis> command line option along with either the <emphasis role="bold">-v</emphasis> or
          <emphasis role="bold">-s</emphasis> command line options, as shown below. This ensures that your configuration is verified before
          the precached file is created.</para> <screen> &url-icinga-bin; -pv &url-icinga-cfg; </screen> <para>The size of your precached
          config file will most likely be significantly larger than the sum of the sizes of your object config files. This is normal and by
          design.</para></entry>

          <entry align="left" valign="top"><para> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../images/fast-startup1.png" format="PNG"></imagedata>
              </imageobject>
            </inlinemediaobject> </para></entry>
        </row>

        <row>
          <entry align="left" valign="top"><para> Once the precached object configuration file have been created, you can start
          &name-icinga; and tell it to use the precached config file instead of your object config file(s) by using the <emphasis
          role="bold">-u</emphasis> command line option.</para> <screen> &url-icinga-bin; -ud &url-icinga-cfg; </screen>
          <para><inlinemediaobject>
              <imageobject>
                <imagedata fileref="../images/important.gif" format="GIF" />
              </imageobject>
            </inlinemediaobject> If you modify your configuration files, you will need to re-verify and re-cache your configuration files
          before restarting &name-icinga;. If you don't re-generate the precached object file, &name-icinga; will continue to use your old
          configuration because it is now reading from the precached file, rather than your source configuration files.</para></entry>

          <entry align="left" valign="top"><para> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../images/fast-startup2.png" format="PNG"></imagedata>
              </imageobject>
            </inlinemediaobject> </para></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">Skipping Circular Path Tests</emphasis></para>

  <para>The second (and most time-intensive) portion of the configuration startup phase is the circular path check. In the example above, it
  took nearly a minute to perform this step of the configuration verification.</para>

  <para>What is the circular path check and why does it take so long? The circular patch check is designed to ensure that you don't define
  any circular paths in your host, host dependency, or service dependency definitions. If a circular path existed in your config files,
  &name-icinga; could end up in a deadlock situation. The most likely reason for the check taking so long is that we're not using an
  efficient algorithm. A much more efficient algorithm for detecting circular paths would be most welcomed. Hint: That means all you CompSci
  graduate students who have been emailing me about doing your thesis on &name-icinga; can contribute some code back. :-)</para>

  <para>If you want to skip the circular path check when &name-icinga; starts, you can add the -x command line option like this:</para>

  <screen> &url-icinga-bin; -xd &url-icinga-cfg; </screen>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/important.gif" format="GIF"></imagedata>
      </imageobject>
    </inlinemediaobject> It is of utmost importance that you verify your configuration before starting/restarting &name-icinga; when
  skipping circular path checks. Failure to do so could lead to deadlocks in the &name-icinga; logic. You have been warned.</para>

  <para><emphasis role="bold">Putting It All Together</emphasis></para>

  <para>Follow these steps if you want to make use of potential speedups from pre-caching your configuration and skipping circular path
  checks.</para>

  <para>1. Verify your configuration and create the precache file with the following command:</para>

  <screen> &url-icinga-bin; -vp &url-icinga-cfg; </screen>

  <para>2. Stop &name-icinga; if it is currently running.</para>

  <para>3. Start &name-icinga; like so to use the precached config file and skip circular path checks:</para>

  <screen> &url-icinga-bin; -uxd &url-icinga-cfg; </screen>

  <para>4. When you modify your original configuration files in the future and need to restart &name-icinga; to make those changes take
  place, repeat step 1 to re-verify your config and regenerate your cached config file. Once that is done you can restart &name-icinga;
  through the web interface or by sending a SIGHUP signal. If you don't re-generate the precached object file, &name-icinga; will continue
  to use your old confguration because it is now reading from the precached file, rather than your source configuration files.</para>

  <para>5. That's it! Enjoy the increased startup speed.</para>

  <indexterm zone="fast_startup">
    <primary>Fast Startup Options</primary>
  </indexterm>

  <indexterm zone="fast_startup">
    <primary>&name-icinga; command line options</primary>

    <secondary>option -s (timing and scheduling info)</secondary>
  </indexterm>

  <indexterm zone="fast_startup">
    <primary>&name-icinga; command line options</primary>

    <secondary>option -S (timing and scheduling info including scheduling queue)</secondary>
  </indexterm>

  <indexterm zone="fast_startup">
    <primary>&name-icinga; command line options</primary>

    <secondary>option -p (precache objects)</secondary>
  </indexterm>

  <indexterm zone="fast_startup">
    <primary>&name-icinga; command line options</primary>

    <secondary>option -u (use precached objects)</secondary>
  </indexterm>

  <indexterm zone="fast_startup">
    <primary>&name-icinga; command line options</primary>

    <secondary>option -x (don't check for circular paths)</secondary>
  </indexterm>
</section>
