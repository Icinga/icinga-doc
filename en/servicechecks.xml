<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="servicechecks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="service_checks" />Service Checks</title>

  <para><emphasis role="bold">Introduction</emphasis></para>

  <para>The basic workings of service checks are described here...</para>

  <para><emphasis role="bold">When Are Service Checks Performed?</emphasis></para>

  <para>Services are checked by the &name-icinga; daemon:</para>

  <itemizedlist>
    <listitem>
      <para>At regular intervals, as defined by the <emphasis>check_interval</emphasis> and <emphasis>retry_interval</emphasis>
      options in your <link linkend="objectdefinitions-service">service definitions</link>.</para>
    </listitem>

    <listitem>
      <para>On-demand as needed for <link linkend="dependencychecks">predictive service dependency checks</link>.</para>
    </listitem>
  </itemizedlist>

  <para>On-demand checks are performed as part of the <link linkend="dependencychecks">predictive service dependency check</link>
  logic. These checks help ensure that the dependency logic is as accurate as possible. If you don't make use of <link
  linkend="objectdefinitions-servicedependency">service dependencies</link>, &name-icinga; won't perform any on-demand service
  checks.</para>

  <para><emphasis role="bold">Cached Service Checks</emphasis></para>

  <para>The performance of on-demand service checks can be significantly improved by implementing the use of cached checks, which
  allow &name-icinga; to forgo executing a service check if it determines a relatively recent check result will do instead. Cached
  checks will only provide a performance increase if you are making use of <link
  linkend="objectdefinitions-servicedependency">service dependencies</link>. More information on cached checks can be found <link
  linkend="cachedchecks">here</link>.</para>

  <para><emphasis role="bold">Dependencies and Checks</emphasis></para>

  <para>You can define <link linkend="objectdefinitions-servicedependency">service execution dependencies</link> that prevent
  &name-icinga; from checking the status of a service depending on the state of one or more other services. More information on
  dependencies can be found <link linkend="dependencies">here</link>.</para>

  <para><emphasis role="bold">Parallelization of Service Checks</emphasis></para>

  <para>Scheduled service checks are run in parallel. When &name-icinga; needs to run a scheduled service check, it will initiate
  the service check and then return to doing other work (running host checks, etc). The service check runs in a child process that
  was fork()ed from the main &name-icinga; daemon. When the service check has completed, the child process will inform the main
  &name-icinga; process (its parent) of the check results. The main &name-icinga; process then handles the check results and takes
  appropriate action (running event handlers, sending notifications, etc.).</para>

  <para>On-demand service checks are also run in parallel if needed. As mentioned earlier, &name-icinga; can forgo the actual
  execution of an on-demand service check if it can use the cached results from a relatively recent service check.</para>

  <para><emphasis role="bold">Service States</emphasis></para>

  <para>Services that are checked can be in one of four different states:</para>

  <itemizedlist>
    <listitem>
      <para>OK</para>
    </listitem>

    <listitem>
      <para>WARNING</para>
    </listitem>

    <listitem>
      <para>UNKNOWN</para>
    </listitem>

    <listitem>
      <para>CRITICAL</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Service State Determination</emphasis></para>

  <para>Service checks are performed by <link linkend="plugins">plugins</link>, which can return a state of OK, WARNING, UNKNOWN,
  or CRITICAL. These plugin states directly translate to service states. For example, a plugin which returns a WARNING state will
  cause a service to have a WARNING state.</para>

  <para><emphasis role="bold">Services State Changes</emphasis></para>

  <para>When &name-icinga; checks the status of services, it will be able to detect when a service changes between OK, WARNING,
  UNKNOWN, and CRITICAL states and take appropriate action. These state changes result in different <link
  linkend="statetypes">state types</link> (HARD or SOFT), which can trigger <link linkend="eventhandlers">event handlers</link> to
  be run and <link linkend="notifications">notifications</link> to be sent out. Service state changes can also trigger on-demand
  <link linkend="hostchecks">host checks</link>. Detecting and dealing with state changes is what &name-icinga; is all
  about.</para>

  <para>When services change state too frequently they are considered to be "flapping". &name-icinga; can detect when services
  start flapping, and can suppress notifications until flapping stops and the service's state stabilizes. More information on the
  flap detection logic can be found <link linkend="flapping">here</link>.</para>
  <indexterm zone="service_checks"><primary>Service Checks</primary></indexterm>
</section>
