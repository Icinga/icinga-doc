<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="security" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="security_considerations" />Security Considerations</title>

  <para><anchor xml:id="security-intro" /> <emphasis role="bold">Introduction</emphasis></para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/security.png" format="PNG"></imagedata>
      </imageobject>
    </inlinemediaobject></para>

  <para>This is intended to be a brief overview of some things you should keep in mind when installing &name-icinga;, so as set it
  up in a secure manner.</para>

  <para>Your monitoring box should be viewed as a backdoor into your other systems. In many cases, the &name-icinga; server might
  be allowed access through firewalls in order to monitor remote servers. In most all cases, it is allowed to query those remote
  servers for various information. Monitoring servers are always given a certain level of trust in order to query remote systems.
  This presents a potential attacker with an attractive backdoor to your systems. An attacker might have an easier time getting
  into your other systems if they compromise the monitoring server first. This is particularly true if you are making use of
  shared SSH keys in order to monitor remote systems.</para>

  <para>If an intruder has the ability to submit check results or external commands to the &name-icinga; daemon, they have the
  potential to submit bogus monitoring data, drive you nuts you with bogus notifications, or cause event handler scripts to be
  triggered. If you have event handler scripts that restart services, cycle power, etc. this could be particularly
  problematic.</para>

  <para>Another area of concern is the ability for intruders to sniff monitoring data (status information) as it comes across the
  wire. If communication channels are not encrypted, attackers can gain valuable information by watching your monitoring
  information. Take as an example the following situation: An attacker captures monitoring data on the wire over a period of time
  and analyzes the typical CPU and disk load usage of your systems, along with the number of users that are typically logged into
  them. The attacker is then able to determine the best time to compromise a system and use its resources (CPU, etc.) without
  being noticed.</para>

  <para>Here are some tips to help ensure that you keep your systems secure when implementing a &name-icinga;-based monitoring
  solution...</para>

  <para><anchor xml:id="security-bestpractices" /> <emphasis role="bold">Best Practices</emphasis></para>

  <orderedlist>
    <listitem>
      <para><emphasis role="bold">Use a Dedicated Monitoring Box</emphasis> . We would recommend that you install &name-icinga; on
      a server that is dedicated to monitoring (and possibly other admin tasks). Protect your monitoring server as if it were one
      of the most important servers on your network. Keep running services to a minimum and lock down access to it via TCP
      wrappers, firewalls, etc. Since the &name-icinga; server is allowed to talk to your servers and may be able to poke through
      your firewalls, allowing users access to your monitoring server can be a security risk. Remember, its always easier to gain
      root access through a system security hole if you have a local account on a box.</para>

      <para><inlinemediaobject>
          <imageobject>
            <imagedata fileref="../images/security3.png" format="PNG"></imagedata>
          </imageobject>
        </inlinemediaobject></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Don't Run &name-icinga; As Root</emphasis> . &name-icinga; doesn't need to run as root, so don't
      do it. You can tell &name-icinga; to drop privileges after startup and run as another user/group by using the <link
      linkend="configmain-icinga_user">icinga_user</link> and <link linkend="configmain-icinga_group">icinga_group</link>
      directives in the main config file. If you need to execute event handlers or plugins which require root access, you might
      want to try using <link xlink:href="http://www.courtesan.com/sudo/sudo">sudo</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Lock Down The Check Result Directory</emphasis> . Make sure that only the
      <emphasis>icinga</emphasis> user is able to read/write in the <link linkend="configmain-check_result_path">check result
      path</link>. If users other than <emphasis>icinga</emphasis> (or <emphasis>root</emphasis>) are able to write to this
      directory, they could send fake host/service check results to the &name-icinga; daemon. This could result in annoyances
      (bogus notifications) or security problems (event handlers being kicked off).</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Lock Down The External Command File</emphasis> . If you enable <link
      linkend="extcommands">external commands</link>, make sure you set proper permissions on the
      <emphasis>&url-icinga-base;/var/rw</emphasis> directory. You only want the &name-icinga; user (usually
      <emphasis>icinga</emphasis>) and the web server user (usually <emphasis>nobody</emphasis>, <emphasis>httpd</emphasis>,
      <emphasis>apache2</emphasis>, or <emphasis>www-data</emphasis>) to have permissions to write to the command file. If you've
      installed &name-icinga; on a machine that is dedicated to monitoring and admin tasks and is not used for public accounts,
      that should be fine. If you've installed it on a public or multi-user machine (not recommended), allowing the web server
      user to have write access to the command file can be a security problem. After all, you don't want just any user on your
      system controlling &name-icinga; through the external command file. In this case, we would suggest only granting write
      access on the command file to the <emphasis>icinga</emphasis> user and using something like <link
      xlink:href="http://cgiwrap.sourceforge.net/">CGIWrap</link> to run the CGIs as the <emphasis>icinga</emphasis> user instead
      of <emphasis>nobody</emphasis>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Require Authentication In The CGIs</emphasis> . We would strongly suggest requiring
      authentication for accessing the CGIs. Once you do that, read the documentation on the default rights that authenticated
      contacts have, and only authorize specific contacts for additional rights as necessary. Instructions on setting up
      authentication and configuring authorization rights can be found <link linkend="cgiauth">here</link>. If you disable the CGI
      authentication features using the <link linkend="configcgi-use_authentication">use_authentication</link> directive in the
      CGI config file, the <link linkend="cgis-cmd_cgi">command CGI</link> will refuse to write any commands to the <link
      linkend="configmain-command_file">external command file</link>. After all, you don't want the world to be able to control
      &name-icinga; do you?</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Implement Enhanced CGI Security Measures</emphasis> . We would strongly suggest that you
      consider implementing enhanced security measures for the CGIs as described <link linkend="cgisecurity">here</link>. These
      measures can help ensure that the username/password you use to access the &name-icinga; web interface are not intercepted by
      third parties.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Use Full Paths In Command Definitions</emphasis> . When you define commands, make sure you
      specify the <emphasis>full path</emphasis> (not a relative one) to any scripts or binaries you're executing.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Hide Sensitive Information With $USERn$ Macros</emphasis> . The CGIs read the <link
      linkend="configmain">main config file</link> and <link linkend="configobject">object config file(s)</link>, so you don't
      want to keep any sensitive information (usernames, passwords, etc) in there. If you need to specify a username and/or
      password in a command definition use a $USERn$ <link linkend="macros">macro</link> to hide it. $USERn$ macros are defined in
      one or more <link linkend="configmain-resource_file">resource files</link>. The CGIs will not attempt to read the contents
      of resource files, so you can set more restrictive permissions (600 or 660) on them. See the sample
      <emphasis>resource.cfg</emphasis> file in the base of the &name-icinga; distribution for an example of how to define $USERn$
      macros.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Strip Dangerous Characters From Macros</emphasis> . Use the <link
      linkend="configmain-illegal_macro_output_chars">illegal_macro_output_chars</link> directive to strip dangerous characters
      from the $HOSTOUTPUT$, $SERVICEOUTPUT$, $HOSTPERFDATA$, and $SERVICEPERFDATA$ macros before they're used in notifications,
      etc. Dangerous characters can be anything that might be interpreted by the shell, thereby opening a security hole. An
      example of this is the presence of backtick (`) characters in the $HOSTOUTPUT$, $SERVICEOUTPUT$, $HOSTPERFDATA$, and/or
      $SERVICEPERFDATA$ macros, which could allow an attacker to execute an arbitrary command as the icinga user (one good reason
      not to run &name-icinga; as the root user).</para>

      <para><inlinemediaobject>
          <imageobject>
            <imagedata fileref="../images/security1.png" format="PNG"></imagedata>
          </imageobject>
        </inlinemediaobject></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Secure Access to Remote Agents</emphasis> . Make sure you lock down access to agents (NRPE,
      NSClient, SNMP, etc.) on remote systems using firewalls, access lists, etc. You don't want everyone to be able to query your
      systems for status information. This information could be used by an attacker to execute remote event handler scripts or to
      determine the best times to go unnoticed.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Secure Communication Channels</emphasis> . Make sure you encrypt communication channels between
      different &name-icinga; installations and between your &name-icinga; servers and your monitoring agents whenever possible.
      You don't want someone to be able to sniff status information going across your network. This information could be used by
      an attacker to determine the best times to go unnoticed.</para>

      <para><inlinemediaobject>
          <imageobject>
            <imagedata fileref="../images/security2.png" format="PNG"></imagedata>
          </imageobject>
        </inlinemediaobject></para>
    </listitem>
  </orderedlist>
  <indexterm zone="security_considerations"><primary>Security Considerations</primary></indexterm>
</section>
