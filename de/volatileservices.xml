<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter [
  <!ENTITY % all.entities SYSTEM "all-entities.ent">
  %all.entities;
]>
<section version="5.0" xml:id="volatileservices" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    <title>sprunghafte Services</title>
    <para>
      <emphasis role="bold">Einführung</emphasis>
    </para>
    <para>&name-icinga; hat die Möglichkeit, zwischen &quot;normalen&quot; und &quot;flüchtigen&quot; Services zu unterscheiden. Die <emphasis>is_volatile</emphasis>-Option in jeder Service-Definition erlaubt Ihnen festzulegen, ob ein bestimmter Service flüchtig ist oder nicht. Für die meisten Leute wird die Mehrzahl der überwachten Services nicht-flüchtig (d.h. &quot;normal&quot;) sein. Trotzdem können flüchtige Services sehr nützlich sein, wenn sie richtig eingesetzt werden...</para>
    <para>
      <emphasis role="bold">Wofür sind sie nützlich?</emphasis>
    </para>
    <para>Flüchtige Services sind nützlich zur Überwachung von...</para>
    <itemizedlist>
      <listitem>
        <para> Dingen, die sich jedes Mal automatisch in einen &quot;OK&quot;-Zustand zurücksetzen, wenn sie geprüft werden</para>
      </listitem>
      <listitem>
        <para> Ereignisse wie Sicherheits-Alarme, die jedes Mal Beachtung erfordern, wenn ein Problem vorliegt (und nicht nur beim ersten Mal)</para>
      </listitem>
    </itemizedlist>
    <para>
      <emphasis role="bold">Was ist so besonders an flüchtigen Services?</emphasis>
    </para>
    <para>Flüchtige Services unterscheiden sich von &quot;normalen&quot; Services in drei wichtigen Punkten. <emphasis>Jedes Mal</emphasis> wenn sie in einem <link linkend="statetypes">harten</link> nicht-OK-Zustand sind und die Prüfung einen nicht-OK-Zustand ergibt (also keine Statusänderung eintritt)...</para>
    <itemizedlist>
      <listitem>
        <para> wird der nicht-OK-Zustand des Service protokolliert</para>
      </listitem>
      <listitem>
        <para> werden Kontakte über das Problem informiert (falls es das ist, <link linkend="notifications">was zu tun ist</link>). Anmerkung: Benachrichtigungsintervalle werden bei flüchtigen Services ignoriert.</para>
      </listitem>
      <listitem>
        <para> Der <link linkend="eventhandlers">Eventhandler</link> für den Service wird ausgeführt (falls einer definiert ist)</para>
      </listitem>
    </itemizedlist>
    <para>Diese Ereignisse finden normalerweise nur für Services statt, wenn sie in einem nicht-OK-Zustand sind und gerade ein Hard-Zustandswechsel erfolgte. In anderen Worten, sie passieren nur das erste Mal, wenn ein Service in einen nicht-OK-Zustand geht. Wenn weitere Prüfungen des Service den gleichen nicht-OK-Zustand ergeben, erfolgt kein harter Zustandswechsel und keines der genannten Ereignisse wird stattfinden.</para>
    <para><inlinemediaobject>
        <imageobject>
          <imagedata fileref="../images/tip.gif" format="GIF"/>
        </imageobject>
      </inlinemediaobject>
 Hinweis: Wenn Sie nur an der Protokollierung interessiert sind, dann sehen Sie sich die <link linkend="stalking">Stalking</link>-Option an.</para>
    <para>
      <emphasis role="bold">Die Macht der Zwei</emphasis>
    </para>
    <para>Wenn Sie die Möglichkeiten von flüchtigen Services und <link linkend="passivechecks">passiven Service-Prüfungen</link> kombinieren, können Sie einige sehr nützliche Dinge tun. Beispiele hierfür umfassen u.a. die Behandlung von SNMP-Traps, Sicherheits-Alarme, usw.</para>
    <para>Wie wäre es mit einem Beispiel... Nehmen wir an, Sie nutzen <link xlink:href="&url-sf-projects;sentrytools/">PortSentry</link>, um Portscans auf Ihrer Maschine zu erkennen und automatisch potenzielle Eindringlinge auszusperren. Wenn Sie wollen, dass &name-icinga; über Portscans erfährt, können Sie das Folgende tun...</para>
    <para>
      <emphasis role="bold">&name-icinga; Konfiguration:</emphasis>
    </para>
    <itemizedlist>
      <listitem>
        <para> Legen Sie eine Service-Definition namens <emphasis>Port Scans</emphasis> an und verbinden Sie diese mit dem Host, auf dem PortSentry läuft.</para>
      </listitem>
      <listitem>
        <para> Setzen Sie die <emphasis>max_check_attempts</emphasis>-Direktive in der Service-Definition auf 1. Dies teilt &name-icinga; mit, sofort einen <link linkend="statetypes">Hard-Zustand</link> für den Service zu erzwingen, wenn ein nicht-OK-Zustand ermittelt wird.</para>
      </listitem>
      <listitem>
        <para> Setzen Sie die <emphasis>active_checks_enabled</emphasis>-Direktive in der Service-Definition auf 0. Dies hält &name-icinga; davon ab, den Service aktiv zu prüfen.</para>
      </listitem>
      <listitem>
        <para> Setzen Sie die <emphasis>passive_checks_enabled</emphasis>-Direktive in der Service-Definition auf 1. Das erlaubt passive Prüfungen für den Service.</para>
      </listitem>
      <listitem>
        <para> Setzen Sie die <emphasis>is_volatile</emphasis>-Direktive in der Service-Definition auf 1.</para>
      </listitem>
    </itemizedlist>
    <para>
      <emphasis role="bold">PortSentry Konfiguration:</emphasis>
    </para>
    <para>Editieren Sie die PortSentry-Konfigurationsdatei (portsentry.conf) und definieren Sie einen Befehl für die <emphasis>KILL_RUN_CMD</emphasis>-Direktive wie folgt:</para>
    <screen> KILL_RUN_CMD=&quot;&url-icinga-libexec;/eventhandlers/submit_check_result host_name &apos;Port Scans&apos; 2 &apos;Port scan from host $TARGET$ on port $PORT$.  Host has been firewalled.&apos;&quot;</screen>
    <para>Stellen Sie sicher, <emphasis>host_name</emphasis> durch den Kurznamen des Hosts zu ersetzen, mit dem der Service verbunden ist.</para>
    <para>
      <emphasis role="bold">Portscan-Script:</emphasis>
    </para>
    <para>Erstellen Sie ein Shell-Script im <emphasis>&url-icinga-libexec;/eventhandlers</emphasis>-Verzeichnis namens <emphasis>submit_check_result</emphasis>. Der Inhalt des Shell-Scripts sollte ähnlich dem Folgenden sein...</para>
    <screen> #!/bin/sh
 # Write a command to the &name-icinga; command file to cause
 # it to process a service check result
 echocmd=&quot;/bin/echo&quot;
 CommandFile=&quot;&url-icinga-base;/var/rw/nagios.cmd&quot;
 # get the current date/time in seconds since UNIX epoch
 datetime=`date +%s`
 # create the command line to add to the command file
 cmdline=&quot;[$datetime] PROCESS_SERVICE_CHECK_RESULT;$1;$2;$3;$4&quot;
 # append the command to the end of the command file
 `$echocmd $cmdline &gt;&gt; $CommandFile`</screen>
    <para>Was passiert, wenn PortSentry in der Zukunft einen Portscan auf der Maschine entdeckt?</para>
    <itemizedlist>
      <listitem>
        <para> PortSentry wird den Host ausschließen (&quot;firewall&quot;, das ist eine Funktion der PortSentry-Software)</para>
      </listitem>
      <listitem>
        <para> PortSentry wird das <emphasis>submit_check_result</emphasis>-Shell-Script ausführen und ein passives Prüfergebnis an &name-icinga; senden</para>
      </listitem>
      <listitem>
        <para> &name-icinga; wird das external command file lesen und das passive Service-Prüfergebnis von PortSentry verarbeiten</para>
      </listitem>
      <listitem>
        <para> &name-icinga; wird den <emphasis>Port Scans</emphasis>-Service in einen harten CRITICAL-Zustand versetzen und Benachrichtigungen an die Kontakte senden</para>
      </listitem>
    </itemizedlist>
    <para>Ziemlich hübsch, oder?</para>
  <indexterm zone="volatileservices"><primary>Sprunghafte Services (volatile services</primary></indexterm>
</section>
