<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="escalation_condition" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="escalation_cond" />Eskalations-Bedingung</title>

  <para><emphasis role="bold">Einleitung</emphasis></para>

  <para>Ab &name-icinga; 1.0.1 ist ein Patch implementiert, so dass Sie nun eine Eskalations-Bedingung definieren können (ähnlich wie escalation_options
  [w,u,c,r]). Eine Eskalation mit einer definierten Bedingung wird nur dann eskalieren, wenn der aktuelle Zustand eines bestimmten
  Hosts/Services mit der angegebenen Bedingung übereinstimmt. Ein mögliches Anwendungsbeispiel könnte das folgende Szenario
  sein:</para>

  <para>Stellen Sie sich zwei verschiedene Eskalationen für den selben Service <emphasis>foo</emphasis> vor. Eine soll nur dann
  eskalieren, wenn der Service <emphasis>bar</emphasis> OK ist, die andere soll eskalieren, wenn <emphasis>bar</emphasis> CRITICAL
  oder WARNING ist. Nun stellen Sie sich vor, dass <emphasis>foo</emphasis> der zentrale Service einer Firma ist und der Administrator sofort reagieren
  muss, wenn der Service down ist. <emphasis>bar</emphasis> könnte ein Service sein, der angibt, ob der Admin im Büro oder zu Hause ist. Die Eskalation
  würde wie folgt reagieren:</para>

  <itemizedlist>
    <listitem>
      <para>wenn der Administrator im Büro ist, dann sende zuerst eine e-Mail, nach 5 Minuten dann eine SMS</para>
    </listitem>

    <listitem>
      <para>wenn der Administrator zu Hause ist, dann sende zuerst eine SMS und nach 30 Minuten eine zweite SMS an den
      Administrator sowie eine SMS an den Abteilungsleiter</para>
    </listitem>
  </itemizedlist>

  <para>Dies kann erreicht werden, ohne Icinga neu zu starten bzw. die Konfiguration neu zu laden.</para>

  <para><emphasis role="bold">Syntax</emphasis></para>

  <para>Die Direktive escalation_condition ist komplett optional und kann sowohl für Host- als auch für Service-Eskalationen
  definiert werden. Die Syntax lautet: </para>

  <para><literal>escalation_condition &lt;condition&gt; ( [ &amp; / | ] &lt;condition&gt; )</literal></para>

  <para>wobei &lt;condition&gt; entweder <literal>host hostname = [u,d,o]</literal> oder <literal>service
  hostname.service_description = [w,u,c,o]</literal> ist.</para>

  <para>Wie Sie sehen können, akzeptiert escalation_condition eine Liste von einer oder mehreren Bedingungen, die durch "&amp;"
  (logisches UND) oder "|" (logisches ODER) getrennt sind. Die Bedeutungen von [w,u,c,o,d] unterscheiden sich geringfügig von denen,
  die bei escalation_options benutzt werden: </para>

  <itemizedlist>
    <listitem>
      <para>w = WARNING</para>
    </listitem>

    <listitem>
      <para>u = UNKNOWN</para>
    </listitem>

    <listitem>
      <para>c = CRITICAL</para>
    </listitem>

    <listitem>
      <para>o = OK für Services oder UP für hosts (man könnte an ONLINE denken)</para>
    </listitem>

    <listitem>
      <para>d = Down für hosts</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Beispiel</emphasis></para>

  <para><screen>define serviceescalation {
   host_name               localhost
   service_description     HTTP
   first_notification      5
   contact_groups          admins, managers
   escalation_condition    host linux=d | service linux.SSH=w,c
   }</screen> Diese Beispiel-Eskalation würde eskalieren, wenn der HOST 'linux' DOWN ist oder der Service 'linux.SSH' WARNING oder
  CRITICAL.</para>

  <para>[ Thanks to: Vitali Voroth, DECOIT GmbH * http://www.decoit.de ]</para>
  <indexterm zone="escalation_condition">
    <primary>Escalations</primary>

    <secondary>Escalation condition</secondary>
  </indexterm>
</section>
