<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="statetypes" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Statustypen</title>

  <para><emphasis role="bold">Einführung</emphasis></para>

  <para>Der aktuelle Status von überwachten Services und Host wird durch zwei Komponenten ermittelt:</para>

  <itemizedlist>
    <listitem>
      <para>den Status des Service oder Host (d.h. OK, WARNING, UP, DOWN, etc.)</para>
    </listitem>

    <listitem>
      <para>den <emphasis>Typ</emphasis> des Zustands, in dem der Service oder Host ist</para>
    </listitem>
  </itemizedlist>

  <para>Es gibt zwei Statustypen in &name-icinga;: SOFT- und HARD-Zustände. Diese Statustypen sind ein wichtiger Teil der
  Überwachungslogik, da sie zur Ermittlung dienen, wann <link linkend="eventhandlers">Eventhandler</link> ausgeführt und <link
  linkend="notifications">Benachrichtigungen</link> zuerst versandt werden.</para>

  <para>Dieses Dokument beschreibt den Unterschied zwischen SOFT- und HARD-Zuständen, wann sie auftreten und was passiert, wenn
  sie auftreten.</para>

  <para><emphasis role="bold">Service- und Host-Prüfungswiederholungen</emphasis></para>

  <para>Um falsche Alarme bei vorübergehenden Problemen zu verhindern, erlaubt Ihnen &name-icinga; zu definieren, wie oft ein
  Service oder Host (erneut) geprüft werden soll, bevor es als "echtes" Problem angesehen werden soll. Dies wird durch die
  <emphasis>max_check_attempts</emphasis>-Option in den Host- und Service-Definitionen kontrolliert. Zu verstehen, wie Hosts und
  Services (erneut) geprüft werden, um festzustellen, ob ein echtes Problem besteht, ist wichtig zum Verstehen, wie Statustypen
  arbeiten.</para>

  <para><emphasis role="bold">Soft-Zustände</emphasis></para>

  <para>Soft-Zustände treten in den folgenden Situationen auf...</para>

  <itemizedlist>
    <listitem>
      <para>wenn ein Host- oder Service-Prüfungsergebnis in einem nicht-OK oder nicht-UP-Status resultiert und die Service-Prüfung
      noch nicht so oft (erneut) durchgeführt wurde, wie es in der <emphasis>max_check_attempts</emphasis>-Direktive der Service-
      oder Host-Definition angegeben wurde. Das wird als Soft-Error bezeichnet.</para>
    </listitem>

    <listitem>
      <para>wenn sich ein Service oder Host von einem Soft-Error erholt. Das wird als Soft-Recovery angesehen.</para>
    </listitem>
  </itemizedlist>

  <para>Die folgenden Dinge passieren, wenn bei Hosts oder Services SOFT-Zustandsänderungen auftreten:</para>

  <itemizedlist>
    <listitem>
      <para>der SOFT-Status wird protokolliert.</para>
    </listitem>

    <listitem>
      <para>Eventhandler werden zur Behandlung von SOFT-Zuständen ausgeführt</para>
    </listitem>
  </itemizedlist>

  <para>SOFT-Zustände werden nur protokolliert, wenn Sie die <link
  linkend="configmain-log_service_retries">log_service_retries</link>- oder die <link
  linkend="configmain-log_host_retries">log_host_retries</link>-Option in Ihrer Hauptkonfigurationsdatei aktiviert haben.</para>

  <para>Das einzig Wichtige, was bei einem Soft-Zustand passiert, ist die Ausführung von Eventhandlern. Eventhandler zu benutzen
  kann insbesondere dann nützlich sein, wenn Sie versuchen wollen, proaktiv ein Problem zu lösen, bevor es sich in einen
  HARD-Zustand verwandelt. Die <link linkend="macrolist-hoststatetype">$HOSTSTATETYPE$</link>- oder <link
  linkend="macrolist-servicestatetype">$SERVICESTATETYPE$</link>-Makros werden den Wert "<emphasis>SOFT</emphasis>" haben, wenn
  Eventhandler ausgeführt werden, was es Ihren Eventhandlern erlaubt zu wissen, wann sie fehlerbehebende Aktionen vornehmen
  sollen. Mehr Informationen zu Eventhandlern finden Sie <link linkend="eventhandlers">hier</link>.</para>

  <para><emphasis role="bold">Hard-Zustände</emphasis></para>

  <para>Hard-Zustände treten für Hosts und Services in den folgenden Situationen auf...</para>

  <itemizedlist>
    <listitem>
      <para>wenn ein Host- oder Service-Prüfungsergebnis in einem nicht-OK oder nicht-UP-Status resultiert und die Prüfung bereits
      so oft (erneut) durchgeführt wurde, wie es in der <emphasis>max_check_attempts</emphasis>-Direktive der Service- oder
      Host-Definition angegeben wurde. Das wird als Hard-Error bezeichnet.</para>
    </listitem>

    <listitem>
      <para>wenn ein Host oder Service von einem Hard-Error-Zustand in einen anderen Fehlerzustand wechselt (z.B. von WARNING nach
      CRITICAL).</para>
    </listitem>

    <listitem>
      <para>wenn eine Service-Prüfung in einem nicht-OK-Status resultiert und der zugehörige Host entweder DOWN oder UNREACHABLE
      ist.</para>
    </listitem>

    <listitem>
      <para>wenn ein Host oder Service sich von einem Hard-Error-Zustand erholt. Dies wird als Hard-Recovery angesehen.</para>
    </listitem>

    <listitem>
      <para>wenn eine <link linkend="passivechecks">passive Host-Prüfung</link> empfangen wird. Passive Host-Prüfungen werden als
      HARD angesehen, wenn nicht die <link
      linkend="configmain-passive_host_checks_are_soft">passive_host_checks_are_soft</link>-Option aktiviert ist.</para>
    </listitem>
  </itemizedlist>

  <para>Die folgenden Dinge passieren, wenn bei Hosts oder Services HARD-Zustandsänderungen auftreten:</para>

  <itemizedlist>
    <listitem>
      <para>der HARD-Status wird protokolliert.</para>
    </listitem>

    <listitem>
      <para>Eventhandler werden zur Behandlung von HARD-Zuständen ausgeführt.</para>
    </listitem>

    <listitem>
      <para>Kontakte werden über das Host- oder Service-Problem bzw. die Erholung informiert.</para>
    </listitem>
  </itemizedlist>

  <para>Die <link linkend="macrolist-hoststatetype">$HOSTSTATETYPE$</link> oder <link
  linkend="macrolist-servicestatetype">$SERVICESTATETYPE$</link>-Makros werden den Wert "<emphasis>HARD</emphasis>" haben, wenn
  Eventhandler ausgeführt werden, was es Ihren Eventhandlern erlaubt zu wissen, wann sie fehlerbehebende Aktionen vornehmen
  sollen. Mehr Informationen zu Eventhandlern finden Sie <link linkend="eventhandlers">hier</link>.</para>

  <para><emphasis role="bold">Beispiel</emphasis></para>

  <para>Hier ist ein Beispiel, wie Statustypen ermittelt werden, wenn Statusänderungen auftreten und wann Eventhandler ausgeführt
  und Benachrichtigungen versandt werden. Die nachfolgende Tabelle zeigt aufeinander folgende Prüfungen eines Service. Der Service
  hat einen <emphasis>max_check_attempts</emphasis>-Wert von 3.</para>

  <informaltable frame="all">
    <tgroup cols="6">
      <colspec colname="c1" colwidth="5*" />

      <colspec colname="c2" colwidth="5*" />

      <colspec colname="c3" colwidth="5*" />

      <colspec colname="c4" colwidth="5*" />

      <colspec colname="c5" colwidth="5*" />

      <colspec colname="c6" colwidth="16*" />

      <tbody>
        <row>
          <entry><para> <emphasis role="bold">Zeit</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Prüfung #</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Status</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Statustyp</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Statuswechsel</emphasis> </para></entry>

          <entry><para> <emphasis role="bold">Anmerkungen</emphasis> </para></entry>
        </row>

        <row>
          <entry><para>0</para></entry>

          <entry><para>1</para></entry>

          <entry><para>OK</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Nein</para></entry>

          <entry><para>Initialer Zustand des Service</para></entry>
        </row>

        <row>
          <entry><para>1</para></entry>

          <entry><para>1</para></entry>

          <entry><para>CRITICAL</para></entry>

          <entry><para>SOFT</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>erstes Erkennen eines nicht-OK-Zustandes. Eventhandler wird ausgeführt.</para></entry>
        </row>

        <row>
          <entry><para>2</para></entry>

          <entry><para>2</para></entry>

          <entry><para>WARNING</para></entry>

          <entry><para>SOFT</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>Service bleibt in einem nicht-OK-Zustand. Eventhandler wird ausgeführt.</para></entry>
        </row>

        <row>
          <entry><para>3</para></entry>

          <entry><para>3</para></entry>

          <entry><para>CRITICAL</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>"max_check_attempts" wurde erreicht, deshalb geht der Service in einen HARD-Zustand. Eventhandler wird
          ausgeführt und eine Benachrichtigung versandt. Die Check-Anzahl wird auf 1 zurückgesetzt, sofort nachdem dies
          passiert.</para></entry>
        </row>

        <row>
          <entry><para>4</para></entry>

          <entry><para>1</para></entry>

          <entry><para>WARNING</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>Service wechselt in einen HARD-WARNING-Status. Eventhandler wird ausgeführt und eine
          Problembenachrichtigung versandt.</para></entry>
        </row>

        <row>
          <entry><para>5</para></entry>

          <entry><para>1</para></entry>

          <entry><para>WARNING</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Nein</para></entry>

          <entry><para>Service stabilisiert sich zu einem HARD-Problemzustand. Abhängig vom Benachrichtigungsintervall für den
          Service wird ggf. eine weitere Benachrichtigung verschickt.</para></entry>
        </row>

        <row>
          <entry><para>6</para></entry>

          <entry><para>1</para></entry>

          <entry><para>OK</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>Service erfährt eine HARD-Recovery. Eventhandler wird ausgeführt und eine Erholungs-Benachrichtigung wird
          versandt.</para></entry>
        </row>

        <row>
          <entry><para>7</para></entry>

          <entry><para>1</para></entry>

          <entry><para>OK</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Nein</para></entry>

          <entry><para>Service ist weiterhin OK.</para></entry>
        </row>

        <row>
          <entry><para>8</para></entry>

          <entry><para>1</para></entry>

          <entry><para>UNKNOWN</para></entry>

          <entry><para>SOFT</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>Für den Service wird ein Wechsel zu einem SOFT nicht-OK-Zustand festgestellt. Eventhandler wird
          ausgeführt.</para></entry>
        </row>

        <row>
          <entry><para>9</para></entry>

          <entry><para>2</para></entry>

          <entry><para>OK</para></entry>

          <entry><para>SOFT</para></entry>

          <entry><para>Ja</para></entry>

          <entry><para>Service erfährt eine SOFT-Recovery. Eventhandler wird ausgeführt, aber keine Benachrichtigung versandt,
          weil dies kein "echtes" Problem war. Der Statustyp wird auf HARD gesetzt und die Check-Anzahl auf 1 zurückgesetzt,
          sofort nachdem dies passiert.</para></entry>
        </row>

        <row>
          <entry><para>10</para></entry>

          <entry><para>1</para></entry>

          <entry><para>OK</para></entry>

          <entry><para>HARD</para></entry>

          <entry><para>Nein</para></entry>

          <entry><para>Service stabilisiert sind zu einem OK-Status.</para></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <indexterm zone="statetypes"><primary>Statustypen</primary></indexterm>
</section>
