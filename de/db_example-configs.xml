<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="example-configs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title>Beispielkonfigurationen</title>

  <section>
    <title>Einzelner Server, einzelne Instanz</title>

    <para>Die einfachste Konfiguration tritt auf, wenn in Ihrem Netzwerk eine einzelne &name-icinga;-Instanz läuft. In diesem Fall ist die
    Installation und Konfiguration der einzelnen Komponenten ziemlich geradeaus.</para>

    <para>Das folgende Schaubild zeigt, wie die einzelnen Komponenten in diesem Einzelserver, Einzel-&name-icinga;-Instanz-Aufbau
    zusammenspielen...</para>

    <figure>
      <title>Einzelserver, Einzelinstanz</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig11.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Hier eine Beschreibung, was an jedem Punkt des Schaubilds passiert:</para>

    <orderedlist>
      <listitem>
        <para>Das IDOMOD-Modul wird mit einem Instanznamen "default" konfiguriert, weil es lediglich eine &name-icinga;-Instanz im Netzwerk
        gibt.</para>
      </listitem>

      <listitem>
        <para>Während der &name-icinga;-Daemon läuft und die üblichen Aufgaben zur Überwachung des Netzwerks ausführt, sendet das
        IDOMOD-Modul Konfigurationsdaten und Ereignisinformationen an den TCP- oder Unix-Domain-Socket, der durch den IDO2DB-Daemon angelegt
        wurde.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon liest die Daten, die durch den Socket vom IDOMOD-Modul kommen.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon verarbeitet und überträgt die Daten, die vom IDOMOD-Modul empfanden wurden.</para>
      </listitem>

      <listitem>
        <para>Die verarbeiteten Daten werden für spätere Abfragen und Verarbeitung in einer Datenbank gespeichert.</para>
      </listitem>
    </orderedlist>

    <para>Dieses Beispiel setzt voraus, dass:</para>

    <orderedlist>
      <listitem>
        <para>&name-icinga; konfiguriert wurde, um das IDOMOD-Modul beim Start zu laden.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon läuft (der ein separater, vom &name-icinga;-Daemon unabhängiger, Prozess ist).</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Einzelner Server, mehrere Instanzen</title>

    <para>Eine weitere einfache Konfiguration kann genutzt werden, wenn Sie mehrere &name-icinga;-Instanzen haben, die auf einem einzigen
    Server laufen. Installation und Konfiguration der verschiedenen Komponenten des &name-idoutils;-Addons ist ähnlich zum vorigen
    Beispiel.</para>

    <para>Das folgende Schaubild zeigt, wie die verschiedenen Komponenten in diesem "einzelner Server, mehrere
    &name-icinga;-Instanzen"-Aufbau zusammenspielen...</para>

    <figure>
      <title>Einzelner Server, mehrere Instanzen</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig12.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Sie werden bemerken, dass das obige Schaubild ähnlich zu dem "einzelner Server, einzelne Instanz"-Aufbau ist. Der Hauptunterschied
    besteht darin, dass es nun drei (3) verschiedene &name-icinga;-Daemons statt eines einzelnen gibt.</para>

    <orderedlist>
      <listitem>
        <para>Jeder &name-icinga;-Daemon lädt das IDOMOD-Modul beim Start mit einem eindeutigen Instanznamen. In diesem Beispiel werden die
        Instanzen einfach "&name-icinga;1", "&name-icinga;2" und "&name-icinga;3" benannt.</para>
      </listitem>

      <listitem>
        <para>Jedes IDOMOD-Modul sendet Konfigurationsdaten und Ereignisinformationen seiner Instanz des &name-icinga;-Daemons an den TCP-
        oder Unix-Domain-Sockets, der vom IDO2DB-Daemon angelegt wurde.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon liest die Daten, die durch den Socket von den drei IDOMOD-Modulen kommen.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon verarbeitet und überträgt die Daten, die von den IDOMOD-Modules empfangen wurden.</para>
      </listitem>

      <listitem>
        <para>Die verarbeiteten Daten werden für spätere Abfragen und Verarbeitung in einer Datenbank gespeichert. Die Daten jeder
        &name-icinga;-Instanz werden (mit Hilfe des eindeutigen Instanznamens) in der Datenbank getrennt voneinander gehalten.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Einzelner Server, einzelne Instanz, Log-Datei-Import</title>

    <para>Es gibt zwei Gründe, warum Sie vielleicht Ihre &name-icinga;-Log-Dateien in die gleiche Datenbank importieren möchte, die
    &name-icinga;-Konfigurations- und Ereignisdaten enthält:</para>

    <orderedlist>
      <listitem>
        <para>Historische Log-Datei-Daten werden nicht automatisch in die Datenbank importiert und möglicherweise ist es wünschenswert,
        Einträge von Ereignisse zu haben, die vor der Implementierung des &name-idoutils;-Addon eintraten.</para>
      </listitem>

      <listitem>
        <para>Das IDOMOD-Modul ist nicht in der Lage, Echtzeit-Log-Einträge von direkt nach dem Start des &name-icinga;-Daemon bis zum
        Zeitpunkt des Ladens des IDOMOD-Moduls durch den &name-icinga;-Daemon zu verarbeiten. Diese "Blackout-Periode" ist unvermeidbar und
        führt zu Log-Einträgen wie "&name-icinga; 1.0 starting...", die das IDOMOD-Modul nicht mitbekommt. Daher wird das Importieren der
        Logdateien des vorangegangenen Tages auf täglicher Basis (über einen cron-Job) empfohlen.</para>
      </listitem>
    </orderedlist>

    <figure>
      <title>Einzelner Server, einzelne Instanz, Log-Datei-Import</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/fig13.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Hier eine Beschreibung, was an jedem Punkt des Schaubilds passiert:</para>

    <orderedlist>
      <listitem>
        <para>Historische &name-icinga;-Log-Dateien werden vom LOG2IDO-Utility gelesen.</para>
      </listitem>

      <listitem>
        <para>Das LOG2IDO-Utility verarbeitet den Inhalt der Log-Dateien und versieht sie mit dem Instanznamen "default". Dieser Instanzname
        muss mit dem Instanznamen übereinstimmen, der vom IDOMOD-Modul im &name-icinga;-Daemon verwendet wird.</para>
      </listitem>

      <listitem>
        <para>Historische Log-Datei-Daten werden in einem Format an den TCP- oder Unix-Domain-Socket geschickt, das der IDO2DB-Daemon
        verstehen kann.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon liest die Log-Datei-Daten vom TCP- oder Unix-Domani-Socket.</para>
      </listitem>

      <listitem>
        <para>Der IDO2DB-Daemon verarbeitet die Log-Datei-Daten.</para>
      </listitem>

      <listitem>
        <para>Historische Log-Datei-Daten werden für spätere Abfragen und Verarbeitung in einer Datenbank gespeichert. Der IDO2DB-Daemon
        wird einige Prüfungen durchführen, um das mehrfache importieren der gleichen historischen Log-Einträge zu verhindern, so dass der
        Aufruf des LOG2IDO-Utilitys mit den gleichen Dateien keine negativen Auswirkungen haben sollte.</para>
      </listitem>
    </orderedlist>

    <para>Das war's! Ziemlich einfach.</para>
  </section>
</section>
