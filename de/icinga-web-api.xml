<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="icinga-web-api" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title>Die &name-web; REST API</title>

  <para>In dieser Anleitung beschreiben wir Ihnen die &name-web; REST API. Sie erlaubt Ihnen Ihre Überwachungsinformationen via GET oder
  POST abzufragen (in Zukunft (&gt;1.2) auch via PUT).</para>

  <para><emphasis role="bold">Warum sollten Sie die API benutzen?</emphasis></para>

  <para>Den meisten Anwendern genügt der Einsatz von &name-icinga; und &name-web;. Sie können den Status Ihres Monitoring sehen, auf
  aktuelle Probleme reagieren und &name-web; um gewünschte Module und Cronks erweitern.</para>

  <para>Wenn Sie allerdings eine zusätzliche Software einsetzen möchten, die Ihre Monitoring-Daten abfragen soll (zum Beispiel: <link
  xlink:href="http://www.icinga.org/2010/07/16/icinga-chromed-status-for-google-chrome/chromium/">Icinga-Chromed-Status</link>), kann Ihnen
  die &name-web; API sehr dienlich sein.</para>

  <para>Sie können natürlich die Ausgabe des &name-ui; analysieren (parsen) (so verfahren zur Zeit viele Programme, wie zum Beispiel
  nagstamon oder das Firefox Plugin Nagios Checker), aber das ist keine wirklich performante Lösung- und außerdem keine Freude für den
  Entwickler :-).</para>

  <para>Die &name-web; REST API stellt Ihnen die Daten zur Verfügung, die Sie benötigen (und auch nur diese). Die Daten werden in einem
  standardisierten, maschinenlesbaren Format wie JSON oder XML zur Verfügung gestellt.</para>

  <para><emphasis role="bold">Features der &name-web; REST API </emphasis></para>

  <para>Derzeit unterstützt (v1.2): <itemizedlist>
      <listitem>
        <para>Verfügbarkeit von nahezu allen Überwachungsdaten via GET oder POST.</para>
      </listitem>

      <listitem>
        <para>Rückgabe der Daten als xml oder json.</para>
      </listitem>

      <listitem>
        <para>AND &amp; OR- Suche über Filtergruppen mit unbegrenzten Verschachtelungsebenen (AND)).</para>
      </listitem>

      <listitem>
        <para>Sie wählen, welche Spalten zurückgegeben werden sollen, nicht die API (weniger Overhead).</para>
      </listitem>

      <listitem>
        <para>Unterstützung von "of limit, offset, order oder group by".</para>
      </listitem>

      <listitem>
        <para>Rückgabe eines zusätzlichen Gesamtwert-Feldes.</para>
      </listitem>

      <listitem>
        <para>Autorisierung über auth_key in Requests oder Cookies.</para>
      </listitem>

      <listitem>
        <para>Respektiert &name-web; Prinzipien (z.B. die Begrenzung auf bestimmte Hostgruppen).</para>
      </listitem>
    </itemizedlist></para>

  <para>Zukünftig unterstützt(&gt; 1.2):</para>

  <itemizedlist>
    <listitem>
      <para>Senden von Kommandos via PUT</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Was ist der Unterschied zwischen der &name-api; und der &name-web; REST API? </emphasis></para>

  <para>Die &name-api; kann als ein internes Toolkit für den Zugriff auf die Datenbankinformationen angesehen werden. In der Tat wirkt die
  REST-API im oberen Teil der API und bedient sich des HTTP-Protokolls. In Zukunft wird die &name-api; mit &name-web; zusammengeführt
  werden.</para>

  <para><emphasis role="bold">Vorraussetzungen</emphasis></para>

  <para>Um die API verwenden zu können, müssen Sie zunächst den Auth-Provider aktivieren icinga-web/app/modules/AppKit/config/auth.xml
  .</para>

  <para>Ändern von "auth_enabled" zu 'true': <programlisting>&gt;# vi icinga-web/app/modules/AppKit/config/auth.xml</programlisting>
  <programlisting>&lt;ae:parameter name="auth_key"&gt;
    &lt;ae:parameter name="auth_module"&gt;AppKit&lt;/ae:parameter&gt;
    &lt;ae:parameter name="auth_provider"&gt;Auth.Provider.AuthKey&lt;/ae:parameter&gt;
    &lt;ae:parameter name="auth_enable"&gt;true&lt;/ae:parameter&gt;
    &lt;ae:parameter name="auth_authoritative"&gt;true&lt;/ae:parameter&gt;
&lt;/ae:parameter&gt;</programlisting></para>

  <note>
    <para>Wenn Sie ein *.xml-File editieren, müssen Sie anschließend den Cache leeren!</para>
  </note>

  <programlisting>rm -f app/cache/config/*.php</programlisting>

  <para>oder</para>

  <programlisting>icinga-web/bin/clearcache.sh</programlisting>

  <para>Nun brauchen Sie in &name-web; einen Benutzer mit API-Zugriffsberechtigung, bitte anlegen in Ihrem &name-web; : <itemizedlist>
      <listitem>
        <para>Anlegen eine neuen Benutzers</para>
      </listitem>

      <listitem>
        <para>Auswählen von auth_key in dem Auth_via Feld</para>
      </listitem>

      <listitem>
        <para>Einfügen des zu nutzenden API-Schlüssels</para>
      </listitem>

      <listitem>
        <para>Unter principals, hinzufügen von appkit.api.access principal</para>
      </listitem>
    </itemizedlist></para>

  <para>Das war es, nun können Sie starten.</para>

  <para><emphasis role="bold">Referenzen</emphasis></para>

  <para>In den nächsten Sätzen erläutern wir, wie auf die API zugegriffen werden kann:</para>

  <para><emphasis role="bold">GET</emphasis></para>

  <para>Vorteile:</para>

  <itemizedlist>
    <listitem>
      <para>Leicht zu nutzen, es ist eine URL!</para>
    </listitem>

    <listitem>
      <para>Sie können immer nachvollziehen, welche Parameter angefragt wurden.</para>
    </listitem>
  </itemizedlist>

  <para>Nachteile:</para>

  <itemizedlist>
    <listitem>
      <para>Wenn Sie in einem Browser Ihre Anfrage absetzen, könnte Ihr API-Key in der Browser-History gespeichert werden.</para>
    </listitem>

    <listitem>
      <para>In einem Browser können Sie keine URLs mit unbegrenzter Größe ansprechen (2.083 Zeichen beim Internet Explorer).</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Die Struktur der URL:</emphasis></para>

  <para>Um die API anzusprechen, sollte die URL folgendermaßen aufgebaut sein (Fett markierte Werte sind erforderlich)
  host.com/icinga-web/web/api/ <emphasis role="bold">TARGET</emphasis> / <emphasis role="bold">COLUMNS</emphasis> / FILTER / ORDER /
  GROUPING / LIMIT / COUNTFIELD / <emphasis role="bold">OUTPUT_TYPE</emphasis></para>

  <para><emphasis role="bold">Die Parameter en Detail:</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>TARGET: Welches Feld wird angesprochen, es ist ein einfacher String wie host.</para>
    </listitem>

    <listitem>
      <para>COLUMNS: Liste der angefragten Spalten, die Syntax muss wie folgt aussehen: columns[COL1|COL2|COL3|...]</para>
    </listitem>

    <listitem>
      <para>FILTER: Definiert welche Filter im Request verwendet werden. Gültig sind AND oder OR Gruppen.</para>

      <para>Der Filter sieht wie folgt aus:</para>

      <programlisting>filters[AND/OR(COLUMN|OPERATOR|VALUE;COLUMN2|OPERATOR2|VALUE2;OR(...),AND]</programlisting>

      <para>Beispiel: Select auf alle Services, deren Name "snmp" enthält, wenn sie sich im Status ok oder unknown befinden</para>

      <para role="bold">Falsch: <programlisting>filters[SERVICE_NAME|like|*smtp*;OR(SERVICE_CURRENT_STATE|=|0;SERVICE_CURRENT_STATE|=|3)]</programlisting></para>

      <para>Sie benötigen immer eine Schachtelungsebene am Beginn:</para>

      <para role="bold">Korrekt:<programlisting>filters[AND ( SERVICE_NAME|like|*smtp*;OR ( SERVICE_CURRENT_STATE|=|0;SERVICE_CURRENT_STATE|=|3 ) )]
</programlisting></para>
    </listitem>

    <listitem>
      <para>ORDER: Definiert welches Feld für die Ordnung verwendet wird und ob eine aufsteigende oder absteigende Sortierung verwendet
      wird. Beispiel: order[COLUMN|ASC or DESC]</para>
    </listitem>

    <listitem>
      <para>GROUPING: Definiert ein Gruppierungsfeld: group[COL]</para>
    </listitem>

    <listitem>
      <para>LIMIT: Definiert eine Start-Offset und / oder eine Begrenzung: limit[START;END ( if needed ) ]</para>
    </listitem>

    <listitem>
      <para>COUNTFIELD: Fügt ein INSGESAMT-Feld dem Ergebnis hinzu, welches hochgezählt wird (in den meisten Fällen, die id):
      countColumn=COL</para>
    </listitem>

    <listitem>
      <para>OUTPUT: zur Zeit json order xml</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Beispiele für GET</emphasis></para>

  <para>GET alle Dienste die kritisch oder warning sind und deren Host im Status ok ist. Absteigend sortiert nach Dienststatus und
  Hochzählen der Services. Authentifikation via authkey (hier: APITEST123456). Für die bessere Lesbarkeit ist die Anfrage in mehrere Zeilen
  aufgeteilt, XML:</para>

  <programlisting>http://localhost/icinga-web/web/api/service/filter[AND(HOST_CURRENT_STATE|=|0;OR(SERVICE_CURRENT_STATE|=n|1;SERVICE_CURRENT_STATE|=|2))]/
columns(SERVICE_NAME|HOST_NAME|SERVICE_CURRENT_STATE|HOST_NAME|HOST_CURRENT_STATE|HOSTGROUP_NAME)/
order(SERVICE_CURRENT_STATE;DESC)/countColumn=SERVICE_ID/authkey=APITEST123456/xml</programlisting>

  <para>So sieht die Rückgabe aus:</para>

  <programlisting>&lt;results&gt;
   &lt;result&gt;
       &lt;column name="SERVICE_ID"&gt;295&lt;/column&gt;
       &lt;column name="SERVICE_OBJECT_ID"&gt;139&lt;/column&gt;
       &lt;column name="SERVICE_IS_ACTIVE"&gt;1&lt;/column&gt;
       &lt;column name="SERVICE_INSTANCE_ID"&gt;1&lt;/column&gt;
       &lt;column name="SERVICE_NAME"&gt;MailQ&lt;/column&gt;
       &lt;column name="SERVICE_DISPLAY_NAME"&gt;MailQ&lt;/column&gt;
       &lt;column name="SERVICE_OUTPUT"&gt;Error occured:error=1:0:0&lt;/column&gt;
       &lt;column name="SERVICE_PERFDATA"&gt;&lt;/column&gt;
   &lt;/result&gt;
   &lt;result&gt;
       &lt;column name="SERVICE_ID"&gt;311&lt;/column&gt;
       &lt;column name="SERVICE_OBJECT_ID"&gt;155&lt;/column&gt;
       &lt;column name="SERVICE_IS_ACTIVE"&gt;1&lt;/column&gt;
       &lt;column name="SERVICE_INSTANCE_ID"&gt;1&lt;/column&gt;
       &lt;column name="SERVICE_NAME"&gt;POP3&lt;/column&gt;
       &lt;column name="SERVICE_DISPLAY_NAME"&gt;POP3&lt;/column&gt;
       &lt;column name="SERVICE_OUTPUT"&gt;Verbindungsaufbau abgelehnt&lt;/column&gt;
       &lt;column name="SERVICE_PERFDATA"&gt;&lt;/column&gt;
   &lt;/result&gt;
   &lt;total&gt;2&lt;/total&gt;
&lt;/results&gt; </programlisting>

  <para>Wenn Sie das Format von xml zu json ändern, bekommen Sie die gleichen Informationen (plus zusätzliche Informationen für ExtJS, falls
  Sie sie nicht benötigen, können Sie diese ignorieren) im json Format:</para>

  <programlisting>{"metaData":
   {"paramNames":{"start":"limit_start","limit":"limit"},
    "totalProperty":"total",
    "root":"result",
    "fields":null},
    "result": [{
       "SERVICE_ID":"295",
       "SERVICE_OBJECT_ID":"139",
       "SERVICE_IS_ACTIVE":"1",
       "SERVICE_INSTANCE_ID":"1",
       "SERVICE_NAME":"MailQ",
       "SERVICE_DISPLAY_NAME":"MailQ",
       "SERVICE_OUTPUT":"Error occured:error=1:0:0",
       "SERVICE_PERFDATA":"" 
   },{
       "SERVICE_ID":"311",
       "SERVICE_OBJECT_ID":"155",
       "SERVICE_IS_ACTIVE":"1",
       "SERVICE_INSTANCE_ID":"1",
       "SERVICE_NAME":"POP3",
       "SERVICE_DISPLAY_NAME":"POP3",
       "SERVICE_OUTPUT":"Verbindungsaufbau abgelehnt",
       "SERVICE_PERFDATA":"" 
   }],
   "success":"true",
   "total":"2" 
}</programlisting>

  <note>
    <para>Wenn Sie den countField-Parameter nicht verwenden, bekommen Sie eine "flat" json-Datei mit diesem Ergebnis.</para>
  </note>

  <para><emphasis role="bold">POST</emphasis></para>

  <para>Vorteile:</para>

  <itemizedlist>
    <listitem>
      <para>Unbegrenzte Parametergröße für große Anfragen.</para>
    </listitem>

    <listitem>
      <para>Ihre verwendeten Parameter erscheinen nicht in der Browser-Historie, lediglich die Basis-URL.</para>
    </listitem>

    <listitem>
      <para>Leichter in Applikationen zu integrieren</para>
    </listitem>
  </itemizedlist>

  <para>Nachteile:</para>

  <itemizedlist>
    <listitem>
      <para>Der POST wird über den Header gesendet, deshalb können Sie den Request nicht einfach über das Addressfeld des Browsers
      absetzen.</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Die Parameter en Detail</emphasis></para>

  <para>Der Link entspricht dem GET-Basislink, allerdings mit der Angabe des Ausgabeformates: Zum Beispiel:
  host.com/icinga-web/web/api/json. Folgende Parameter werden unterstützt:</para>

  <itemizedlist>
    <listitem>
      <para>'target': Welches Feld wird angesprochen, es ist ein einfacher String wie "host"</para>
    </listitem>

    <listitem>
      <para>'columns[]': Ein Array von Spalten</para>

      <para>Example:</para>

      <para>columns [0] = SERVICE_NAME</para>

      <para>columns [1] = SERVICE_ID</para>
    </listitem>

    <listitem>
      <para>'groups[]' : nach diesem Feld gruppieren</para>
    </listitem>

    <listitem>
      <para>'filters_json' : Ein json beschreibender "how to" Filter</para>

      <para>Example:</para>

      <programlisting>[{
   "type": "AND",
   "field": [{
      "type": 'atom',
      "field":  ['SERVICE_NAME'],
      "method": ['like'],
      "value":  ['*pop*']
   },{
      "type": 'OR',
      "field": [{
          "type": 'atom',
          "field": ['SERVICE_CURRENT_STATE'],
          "method": ['&gt;'],
          "value": [0]
      },{
          "type": 'atom',
          "field": ['SERVICE_IS_FLAPPING'],
          "method": ['='],
          "value": [1]
      }]
   }]
}]

</programlisting>
    </listitem>

    <listitem>
      <para>'order_col' : Spalte nach der sortiert wird</para>
    </listitem>

    <listitem>
      <para>'order_dir' : Sortierungsreihenfolge (asc oder desc)</para>
    </listitem>

    <listitem>
      <para>'limit_start' : Start-Offset des Records</para>
    </listitem>

    <listitem>
      <para>'limit' : Begrenzt das Ergebnis auf x Antworten</para>
    </listitem>

    <listitem>
      <para>'countColumn' : Fügt ein INSGESAMT-Feld dem Ergebnis hinzu</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Beispiele für POST</emphasis></para>

  <para>Nehmen wir das Beispiel aus "Beispiel für GET" und benutzen nun eine POST-Anfrage. Wir werden curl verwenden, so dass das Beispiel
  auf der Konsole wiederholt werden kann:</para>

  <programlisting>curl 
-d target=service 
-d 'filters_json={"type":"AND","field":[{"type":"atom","field":["HOST_CURRENT_STATE"],"method":["="],"value":[0]},{"type":"OR","field":[{"type":"atom","field":["SERVICE_CURRENT_STATE"],"method":["="],"value":[1]},{"type":"atom","field":["SERVICE_CURRENT_STATE"],"method":["="],"value" : [2] }]}]}' 
-d columns[0]=SERVICE_NAME 
-d columns[1]=HOST_NAME 
-d columns[2]=SERVICE_CURRENT_STATE 
-d columns[3]=HOST_NAME 
-d columns[4]=HOST_CURRENT_STATE 
-d columns[5]=HOSTGROUP_NAME 
-d 'order=SERVICE_CURRENT_STATE;DESC' 
-d countColumn=SERVICE_ID  
-d 'authkey=API123456' 
http://localhost/icinga-web/web/api/xml </programlisting>

  <para>Dies gibt uns das gleiche Ergebnis zurück, wie zuvor in der GET-Anfrage.</para>

  <indexterm zone="icinga-web-api">
    <primary>&name-api;</primary>

    <secondary>API/&name-web;</secondary>
  </indexterm>
</section>
