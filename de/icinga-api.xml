<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="icinga-api" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title>Keine &name-api; mehr zu installieren</title>
  <important>
    <para>In der Zeit vor dem Release der Version 1.5 sagten wir unserer &name-api; "Tschüss" und führten ein neues API- und Web-Konzept
      ein.</para>

    <para>Sie fragen sich vielleicht, was war diese API überhaupt? In der Tat, wenn Sie keine Erweiterungen oder Anpassungen für das neue
      Web-Interface entwickelt haben, dann hatten Sie wahrscheinlich wenig Kontakt mit dieser wichtigen Projektkomponente. Als &name-icinga;
      konzipiert wurde, war eines der Hauptziele die Unterstützung der Entwicklung von Addons und Plugins. Die API stellte einen Satz von
      allgemein verwendbaren Abfragebefehlen zur Verfügung, um die Notwendigkeit zu beseitigen, SQL-Abfragen und generell eine Menge
      überflüssigen Code zu schreiben.</para>

    <para>Alles war in Ordnung, bis wir uns entschieden, etwas mehr zusätzliche Datenbankflexibilität anzubieten. Als wir neben &name-mysql;
      Unterstützung für &name-oracle; and &name-postgres; hinzufügten, gaben wir auch dem &name-api;-Team etwas zusätzliche Arbeit. Mit
      jeder Änderung, jedem Bugfix oder neuer Funktionalität mussten Marius, Michael L und Jannis die Abfragen für jedes Datenbank-Backend
      separat anpassen. Dieser Prozess war nicht nur kompliziert und fehlerbehaftet, sondern auch ein Zeichen dafür, dass wir eine neue
      flexiblere Architektur benötigten.</para>

    <para>Mit &name-icinga; 1.5 wurde die externe &name-api; durch eine interne Datenbankschicht namens Doctrine ersetzt und mit &name-web;
      verschmolzen. Ähnlich wie vorher laufen Abfragen durch diese Schicht zwischen der Datenbank (&name-idoutils;) und dem Web-Interface. 
      Trotzdem können wir dank Doctrine mehrere Datenbank-Backends benutzen und das Abfragen der Datenbank ist nun viel einfacher. Im
      Gegensatz zu SQL nutzt der "object relational mapper" (ORM) die Doctrine Query Language, so dass wir nun die Flexibilität ohne die
      Code-Duplizierung haben.</para>

    <para><inlinemediaobject>
        <imageobject>
          <imagedata fileref="../images/Architecture_1.5_800px.png" format="PNG"></imagedata>
        </imageobject>
      </inlinemediaobject></para>

    <para>Allerdings funktionieren Abfragen mit der alten API nach wie vor, dank des 'Legacy Layer', der alte API-Abfragen in diesen neuen
      ORM-Typ umwandelt. Auf diese Weise erhalten wir die Kompatibilität mit Addons, die für ältere &name-icinga;-Versionen erstellt wurden.
      Das Rest-API ist also weiterhin vorhanden als ein Teil von &name-web;, und erweitert unsere Doctrine-Schicht mit HTTP für Addons, die
      nur bestimmte Teile der Überwachungsinformationen benötigen.</para>

    <para>Durch den Wegfall einer eigenständigen API wird der durchschnittliche &name-icinga;-Benutzer kaum einen Unterschied bemerken,
      außer der Tatsache, dass die Konfiguration nun in die <filename>databases.xml</filename> verschoben wurde. Das Beste daran ist, dass
      jeder Modul-Entwickler nun einfach, ohne viel Code-Overhead, auf die &name-icinga;-Datenbank zugreifen kann- also Adddon-Entwickler,
      legt los!</para>

    <para>Mehr (englischsprachige) Informationen gibt es in unserem Wiki:
      <itemizedlist>
        <listitem>
          <para>
            <link xlink:href="https://wiki.icinga.org/display/Dev/Development+guide+for+Icinga-Web">Development Guide for &name-web;</link>
          </para>
        </listitem>
        <listitem>
          <para>
          <link xlink:href="https://wiki.icinga.org/display/Dev/Icinga+Database+essentials">Icinga Database Essentials</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link xlink:href="https://wiki.icinga.org/display/Dev/Icinga-Web+REST+API">&name-web; REST API</link>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </important>

  <important><para>Das Folgende ist veraltet</para></important>
  <para><emphasis role="bold">Installation und Benutzung der &name-icinga; API</emphasis></para>
  <para><emphasis role="bold">Voraussetzungen</emphasis></para>

  <para>Sie benötigen installierte und lauffähige Versionen von &name-icinga; und &name-idoutils; oder &name-mklive;, um die &name-api;
  nutzen zu können. <note>
      <para>Falls Sie &name-icinga; noch nicht installiert haben, folgen Sie den Anweisungen in der <link
      linkend="quickstart-idoutils">quickstart-idoutils</link>-Dokumentation.</para>
    </note> Wenn Sie die &name-idoutils;-Datenbank als Datenquelle verwenden, installieren Sie bitte PHP-PDO.</para>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">&name-rhel;/&name-fedora;/&name-centos;</emphasis></para>

      <para>Stellen Sie sicher, dass Sie ein Repository/Packages für PHP 5.2.x zur Verfügung haben - RHEL/CentOS (CentOS &lt;= 5.4)
      unterstützen lediglich 5.1.6.</para>

      <programlisting> # yum install php-pdo php-mysql|pgsql </programlisting>
    </listitem>

    <listitem>
      <para><emphasis role="bold">&name-debian;/&name-ubuntu;</emphasis></para>

      <programlisting> # apt-get install php5 php5-mysql|pgsql </programlisting>
    </listitem>

    <listitem>
      <para><emphasis role="bold">&name-opensuse;;</emphasis></para>

      <para>Bitte benutzen Sie yast zur Installation der Pakete php5, php5-pdo und php5-mysql bzw. php5-pgsql.</para>
    </listitem>
  </itemizedlist>

  <para><anchor xml:id="icinga-api_installation" /> <emphasis role="bold">Installation und Konfiguration</emphasis></para>

  <orderedlist>
    <listitem>
      <para><emphasis role="bold">Software</emphasis></para>

      <para>Klonen Sie von icinga-api.git, um einen neuen Branch zu bekommen:</para>

      <programlisting> # git clone git://git.icinga.org/icinga-api.git</programlisting>

      <para>oder laden Sie die Software von <link
      xlink:href="https://git.icinga.org/index?p=icinga-api.git;a=snapshot;h=refs/heads/master;sf=tgz">https://git.icinga.org/index?p=icinga-api.git;a=snapshot;h=refs/heads/master;sf=tgz</link>.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Installation</emphasis></para>

      <note>
        <para>Die &name-api; ist innerhalb des Pakets von &name-icinga; Core, &name-idoutils; und Docs enthalten und wird während 'make
        install' mit installiert. Sofern Sie das schon durchgeführt haben, befindet sich die API standardmäßig in
        /usr/local/icinga/share/icinga-api/ und Sie können diesen Abschnitt überspringen.</para>
      </note>

      <note>
        <para>Wenn Sie die &name-api; für das neue &name-web; benötigen und schon &name-icinga; Core mit den &name-idoutils; installiert
        haben, können Sie diesen Guide verlassen und direkt <link linkend="icinga-web-scratch">&name-web;</link> installieren.</para>
      </note>

      <para><emphasis role="bold">Download</emphasis></para>

      <para>Sie können die &name-api; direkt aus dem GIT Repository beziehen, für einen frischen Clone führen Sie folgenden Befehl
      aus:</para>

      <programlisting> # git clone git://git.icinga.org/icinga-api.git</programlisting>

      <para>Sofern Sie lediglich ein Update benötigen:</para>

      <programlisting> # cd icinga-api &amp;&amp; git pull origin master</programlisting>

      <para>Oder laden Sie einen Snapshot direkt über das Gitweb: <link
      xlink:href="https://git.icinga.org/index?p=icinga-api.git;a=snapshot;h=refs/heads/master;sf=tgz">https://git.icinga.org/index?p=icinga-api.git;a=snapshot;h=refs/heads/master;sf=tgz</link>.</para>

      <para><emphasis role="bold">Installation</emphasis></para>

      <para>Entpacken Sie die &name-api;, führen Sie configure aus und installieren Sie die &name-api; <programlisting> # tar xzvf icinga-api-(version).tar.gz</programlisting>
      <programlisting> # ./configure</programlisting></para>

      <para>Sie können den Präfix definieren, wohin die &name-api; installiert wird, sowie den Ort der Systemkonfiguration für &name-icinga;
      Core und &name-idoutils; und die ausführenden Benutzer. All diese Informationen werden bei einer Installation durch das Core Paket
      direkt gesetzt. <programlisting> # ./configure --datarootdir=/usr/local/icinga/share \
    --sysconfdir=/usr/local/icinga/etc \
    --with-command-user=icinga-cmd \
    --with-command-group=icinga-cmd \
    --with-icinga-user=icinga \
    --with-icinga-group=icinga \
    --with-web-user=www-data \
    --with-web-group=www-data</programlisting>
      <note><para>Die --with-web...-Direktiven müssen gesetzt sein. Anderenfalls werden die Web-Logs nicht korrekt erstellt. Außerdem kann
      dies zu einem leeren Haupt-Cronk führen. Bitte beachten Sie, dass die Werte von 'user' und 'group' abhängig von der Distribution
      sind.</para></note>

    <programlisting> # make install</programlisting></para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">Konfiguration</emphasis></para>

  <para>Wenn Sie Ihr eigenes Addon auf Basis der &name-api; entwickeln möchten, benötigen Sie das folgende assoziative
  Array:<programlisting> $idoConfig = array (
    'type'         =&gt; '&lt;Type of database&gt;',
    'host'         =&gt; '&lt;Database hostname&gt;', 
    'database'     =&gt; '&lt;Databasename&gt;',
    'user'         =&gt; '&lt;Username&gt;',
    'password'     =&gt; '&lt;password&gt;',
    'persistent'   =&gt; &lt;true | false&gt;,
    'table_prefix' =&gt; '&lt;table prefix&gt;', 
 );</programlisting> Beispiel:</para>

  <programlisting> $idoConfig = array (
    'type'         =&gt; 'mysql',
    'host'         =&gt; 'localhost',
    'database'     =&gt; 'ido',
    'user'         =&gt; 'idouser',
    'password'     =&gt; 'idopassword',
    'persistent'   =&gt; true,
    'table_prefix' =&gt; 'icinga_',
 );</programlisting>

  <para><emphasis role="bold">Unterstützte Backends</emphasis></para>

  <para>Aktuell sind folgende Backend Typen verfügbar. Mehr Information finden Sie unter doc/icinga-api-types.txt.<itemizedlist>
      <listitem>
        <para>&name-idoutils; DB - OK</para>
      </listitem>

      <listitem>
        <para>Livestatus Modul - experimentell, noch nicht produktiv einsetzbar.</para>
      </listitem>

      <listitem>
        <para>Dateibasierend, status.dat - experimentell, noch nicht produktiv einsetzbar.</para>
      </listitem>
    </itemizedlist></para>

  <para><anchor xml:id="icinga-api_use" /> <emphasis role="bold">Benutzung</emphasis></para>

  <orderedlist>
    <listitem>
      <para><emphasis role="bold">Datenermittlung</emphasis></para>

      <para>Host-Namen und zugehörige Zustände</para>

      <para>Erzeugen Sie eine Instant der Klasse IcingaApi:</para>

      <para><programlisting> $api = IcingaApi::getConnection(IcingaApi::CONNECTION_IDO, $idoConfig);</programlisting>Erzeugen Sie die
      Suchkriterien:</para>

      <para><programlisting> $apiRes = $api-&gt;createSearch()
 -&gt;setSearchTarget(IcingaApi::TARGET_HOST)
 -&gt;setResultColumns(array('HOST_NAME', 'HOST_CURRENT_STATE'))
 -&gt;fetch();</programlisting></para>

      <para>Mit Hilfe von setSearchFilter() können Sie Filter benutzen, um die Suche einzuschränken:</para>

      <para><programlisting> $apiRes = $api-&gt;createSearch()
 -&gt;setSearchTarget(IcingaApi::TARGET_HOST)
 -&gt;setResultColumns(array('HOST_NAME', 'HOST_CURRENT_STATE'))
 -&gt;setSearchFilter(HOST_NAME, 'Switch%', IcingaApi::MATCH_LIKE)
 -&gt;fetch();</programlisting></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Verarbeiten der Ergebnisse</emphasis></para>

      <para><programlisting> foreach($apiRes as $apiHandle){
    echo 'Host '.$apiHandle-&gt;HOST_NAME.' has state '.$apiHandle-&gt;HOST_CURRENT_STATE.'&lt;br /&gt;';
 }</programlisting>Ausgabe ohne Filter:</para>

      <para><programlisting> Host localhost has state 0
 Host MySql has state 0
 Host router-01 has state 0
 Host windows100 has state 0
 Host Apache_01 has state 0</programlisting>Ausgabe mit Filter:</para>

      <para><programlisting> Host switch70 has the current state 0
 Host switch71 has the current state 0
 Host switch72 has the current state 0
 Host switch73 has the current state 0
 Host switch74 has the current state 0
 Host switch75 has the current state 0
 Host switch76 has the current state 0
 Host switch77 has the current state 0</programlisting></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Kompletter Code ohne die Nutzung von Filtern</emphasis></para>

      <para><programlisting> &lt;?
 // Path to icinga api file
 $apiFile = 'icinga-api/IcingaApi.php';
 
 // Database connection
 $idoConfig = array (
    'type'         =&gt; 'mysql',
    'host'         =&gt; 'localhost',
    'database'     =&gt; 'ido',
    'user'         =&gt; 'idouser',
    'password'     =&gt; 'idopassword',
    'persistent'   =&gt; true,
    'table_prefix' =&gt; 'icinga_',
 );
 
 // Include required files
 require_once($apiFile);
 
 // Instance the class
 $api = IcingaApi::getConnection(IcingaApi::CONNECTION_IDO, $idoConfig);
 
 // Create search
 $apiRes = $api-&gt;createSearch()
 -&gt;setSearchTarget(IcingaApi::TARGET_HOST)
 -&gt;setResultColumns(array('HOST_NAME', 'HOST_CURRENT_STATE'))
 -&gt;fetch();
 
 // Create output
 foreach($apiRes as $apiHandle){
    echo 'Host '.$apiHandle-&gt;HOST_NAME.' has the current state '.$apiHandle-&gt;HOST_CURRENT_STATE.'&lt;br /&gt;';
 }
 ?&gt;</programlisting></para>

      <para>Für nähere Informationen werfen Sie bitte einen Blick in das <link xlink:href="http://git.icinga.org/">git repository</link>
      oder die Beispiele im doc/examples-Verzeichnis.</para>
    </listitem>
  </orderedlist>

  <indexterm zone="icinga-api">
    <primary>Icinga-API</primary>
  </indexterm>

  <indexterm zone="icinga-api">
    <primary>API/Icinga</primary>
  </indexterm>
</section>
