<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="nsca" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="nsca_" />&name-nsca;</title>

  <para><emphasis role="bold">Einführung</emphasis></para>

  <para>Nagios Service Check Acceptor (oder kurz &name-nsca;) ist ein Addon, um Prüfergebnisse von einem System zu einem anderen zu
  übertragen. Es besteht aus zwei Modulen: Dem Sender (send_nsca) und dem Empfänger (nsca). Die Daten werden verschlüsselt übertragen. Trotz
  des Namens werden auch Host-Prüfergebnisse übertragen.</para>

  <figure>
    <title>&name-nsca;</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../images/nsca.png"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>&name-nsca; läuft als Daemon auf dem &name-icinga;-Server. Er lauscht auf Informationen, die von entfernten Maschinen mit Hilfe des
  send_nsca-Programms (auf Unix/Linux-Maschinen) oder NSClient++ (oft auf Windows-Maschinen benutzt) gesendet werden. Die Daten werden mit
  der in send_nsca.cfg (oder nsc.ini im Falle von NSClient++) festgelegten Methode verschlüsselt. Der Daemon wird die Daten in einer *sehr*
  einfachen Weise validieren, indem die Informationen mit dem in nsca.cfg eingetragenen Passwort entschlüsselt werden. Wenn die Daten so
  aussehen, als wären sie mit dem gleichen verschlüsselt wurden, dann wird der Daemon versuchen, diese Daten als externen Befehl in die
  lokale &name-icinga; Command Pipe auszugeben.</para>

  <para>Die folgenden Anweisungen basieren hauptsächlich auf dem README aus dem &name-nsca;-Paket.</para>

  <para><emphasis role="bold">Voraussetzungen</emphasis></para>

  <itemizedlist>
    <listitem>
      <para>&name-icinga; sollte laufen</para>
    </listitem>

    <listitem>
      <para><emphasis><link linkend="configmain-check_external_commands">check_external_commands = 1</link></emphasis> sollte in
      <literal>icinga.cfg</literal> gesetzt sein</para>
    </listitem>

    <listitem>
      <para><emphasis><link linkend="configmain-command_check_interval">command_check_interval = &lt;n&gt;[s]</link></emphasis> sollte in
      <literal>icinga.cfg</literal> gesetzt sein<literal> </literal></para>
    </listitem>

    <listitem>
      <para><emphasis><link linkend="configmain-log_passive_checks">log_passive_checks = 1</link></emphasis> sollte während der Testphase in
      <literal>icinga.cfg</literal> gesetzt sein, anderenfalls gibt es keine Meldungen über eintreffende passive Prüfungen</para>
    </listitem>

    <listitem>
      <para>die libmcrypt- und libmcrypt-devel-Pakete sind installiert (die je nach Distribution ggf. anders heißen können), anderenfalls
      nutzen Sie einen der folgenden Befehle, um die Pakete zu installieren:</para>

      <programlisting> #&gt; apt-get install libmcrypt libmcrypt-devel # Debian / Ubuntu
 #&gt; yum install libmcrypt libmcrypt-devel     # RHEL / Fedora / CentOS
 #&gt; zypper install libmcrypt libmcrypt-devel  # SLES / OpenSuSE (oder benutzen Sie Yast)</programlisting>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Download und Compile</emphasis></para>

  <para>Laden Sie die Software vom <link xlink:href="https://git.icinga.org/?p=icinga-nsca.git;a=tree">&name-icinga;-git-Repository</link>,
  indem Sie auf "tar.gz" klicken oder benutzen Sie</para>

  <programlisting> #&gt; wget "https://git.icinga.org/?p=icinga-nsca.git;a=snapshot;h=HEAD;sf=tgz" -O nsca.tgz
 #&gt; tar xzf nsca.tgz</programlisting>

  <para>oder benutzen Sie die aktuelle Version auf dem git-Repository</para>

  <programlisting> #&gt; git clone git://git.icinga.org/icinga-nsca.git</programlisting>

  <para>Die maximale Länge der zu übertragenen Daten ist auf 2.048 Bytes begrenzt, die maximale Länge von Plugin-Ausgaben auf 512 Bytes.
  Falls das nicht ausreicht, dann müssen Sie den entsprechenden Wert in <literal>icinga-nsca/include/common.h</literal> anpassen.</para>

  <para><programlisting> #define MAX_INPUT_BUFFER        2048    /* max size of most buffers we use */
 #define MAX_PLUGINOUTPUT_LENGTH 512 </programlisting>Bitte denken Sie daran, dass Sie die Programme erneut kompilieren müssen, wenn Sie
  sich zu einem späteren Zeitpunkt für eine Änderung entscheiden.</para>

  <para>Bedingt durch den folgenden Wert in include/common.h (im &name-icinga;-Core) kann der maximale Wert 8.192 Bytes nicht
  überschreiten.</para>

  <para><programlisting> #define MAX_EXTERNAL_COMMAND_LENGTH             8192    /* max length of an external command */</programlisting>Nach
  Änderung des Besitzers wechseln Sie in das neu erstellte Verzeichnis und rufen Sie configure und make auf</para>

  <programlisting> #&gt; chown -R icinga icinga-nsca
 #&gt; cd icinga-nsca
 #&gt; ./configure 
 #&gt; make all</programlisting>

  <para>Anschließend gibt es zwei Programme (send and send_nsca) im <literal>src</literal>-Verzeichnis.</para>

  <caution><para>
     Wenn die libmcrypt-Dateien nicht gefunden werden, dann wird "./configure" sich beschweren, aber NICHT mit einem Return-Code ungleich Null enden, so dass Sie 

    <emphasis>config.log</emphasis>

     mit dem folgenden Befehl prüfen sollten 

    <programlisting> #&gt; grep mcrypt.h: config.log</programlisting>

     Dieser Befehl sollte keine Zeilen ausgeben.</para>
  </caution>

  <para>Falls die libmcrypt-Module nicht gefunden werden, Benutzer oder Gruppe vom Wert "icinga" abweichen oder der zu benutzende Port nicht
  dem Default 5667 entspricht, dann können Sie dies über verschiedene Optionen beeinflussen. Rufen Sie "<literal>./configure -h</literal>"
  auf, um mehr über die verfügbaren Optionen zu erfahren.</para>

  <para>Nach dem Wechsel in "nsca_tests" können Sie versuchen, "./runtests" auszuführen. Bitte beachten Sie, dass diese Tests verschiedene
  Perl-Module benötigen, die in der Datei README beschrieben sind.</para>

  <para><emphasis role="bold">Anpassen</emphasis></para>

  <para>Das <literal>sample-config</literal>-Verzeichnis enthält <literal>nsca.cfg</literal> und <literal>send_nsca.cfg</literal>.
  Mindestens die Einstellungen der Direktiven "password" und "encryption_method" / "decryption_method" sollten Sie ansehen/verändern, bevor
  die Dateien kopiert werden. Bitte denken Sie daran, das gleiche Passwort in allen Kopien dieser Konfigurationsdateien zu setzen. Wenn Sie
  verschiedene Passworte auf verschiedenen entfernten Servern einsetzen möchten, dann müssen Sie mehrere nsca-Daemons auf dem
  &name-icinga;-Server starten, die auf unterschiedlichen Ports lauschen. Das funktioniert nicht, wenn Sie den Daemon über inetd/xinetd
  starten.</para>

  <para><emphasis role="bold">Erster Test</emphasis></para>

  <para>Wechseln Sie zum &name-icinga;-Benutzer und starten Sie einen ersten Test</para>

  <programlisting> #&gt; su - icinga
 $&gt; cd /usr/src/icinga-nsca/src
 $&gt; ./nsca -c ../sample-config/nsca.cfg
 $&gt; echo -e "A\tB\tC\D\n" | ./send_nsca -H localhost -c ../sample-config/send_nsca.cfg
 $&gt; exit</programlisting>

  <para>Dies sollte die Meldung "1 data packet(s) sent to host successfully." zurückliefern. Eigentlich heißt das nur, dass sich send_nsca
  und nsca unter Verwendung der Konfigurationsdateien auf dem lokalen Host miteinander unterhalten können, denn dieser Test funktioniert
  auch ohne eine lauffähige &name-icinga;-Instanz. Allerdings ist er trotzdem wichtig: Wenn dieser Test fehlschlägt, dann ist es nicht
  sinnvoll fortzufahren. Prüfen Sie stattdessen die Einstellungen nsca.cfg und send_nsca.cfg. Schauen Sie auch im Syslog (z.B.
  <literal>/var/log/messages</literal>) nach Meldungen.</para>

  <para>Wenn die Voraussetzungen erfüllt sind, dann sollten Sie einige Warnungen in <literal>icinga.log</literal> sehen, dass Host "A" und
  Service "B" nicht in der &name-icinga;-Konfiguration gefunden werden konnten. Dies bedeutet, dass nsca ausreichende Berechtigungen hat, um
  in das &name-icinga;-Command-File zu schreiben. Prüfen Sie, ob der nsca-Daemon und &name-icinga; mit unterschiedlichen Benutzern laufen,
  wenn es keine Meldugen in icinga.log gibt. Prüfen Sie außerdem die Einstellung von <link
  linkend="configmain-log_passive_checks">log_passive_checks</link> in <literal>icinga.cfg</literal>.</para>

  <para><emphasis role="bold">Installation</emphasis></para>

  <para>"make install" macht (im Moment) nichts, so dass Sie selbst einige Dateien kopieren müssen. Die folgenden Befehle kopieren das
  nsca-Modul in das Verzeichnis, in dem das &name-icinga;-Binary zu finden ist und die Konfigurationsdatei in den
  &name-icinga;-Konfigurationsordner. Wir nehmen an, dass Sie &name-icinga; nach einem der Schnellstartanleitungen installiert haben.</para>

  <programlisting> #&gt; cp -p nsca /usr/local/icinga/bin/
 #&gt; cp ../sample-config/nsca.cfg /usr/local/icinga/etc/</programlisting>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">nsca daemon</emphasis></para>

      <para>Wenn Sie sich für xinetd entscheiden, dann wird der Daemon automatisch gestartet. Anderenfalls müssen Sie den Daemon manuell
      starten, nachdem Sie zum &name-icinga;-Benutzer gewechselt haben (was Sie ggf. bereits in "Erster Test" gemacht haben).</para>

      <programlisting> #&gt; su - icinga
 $&gt; /usr/local/icinga/bin/nsca -c /usr/local/icinga/etc/nsca.cfg</programlisting>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">inetd/xinetd</emphasis></para>

      <para>Wenn Sie möchten, dass der Daemon von (x)inetd gestartet wird, dann müssen Sie /etc/services erweitern, eine weitere Datei
      ändern/kopieren und (x)inetd neustarten. Vergessen Sie nicht, den nsca-Daemon zu stoppen, der in "Erster Test" gestartet wurde.</para>

      <note>
        <para>Die Einstellung von "server_port" in nsca.cfg wird ignoriert, wenn Sie inetd/xinetd benutzen.</para>
      </note>

      <programlisting> #&gt; kill &lt; /var/run/nsca.pid
 #&gt; echo "nsca 5667/tcp # NSCA" &gt;&gt; /etc/services</programlisting>

      <para>Abhängig vom verwendeten Superserver gibt es drei Alternativen</para>

      <itemizedlist>
        <listitem>
          <para>inetd MIT tcpwrappers</para>

          <para>Fügen Sie Einträge zu Ihrer /etc/hosts.allow und /etc/hosts.deny hinzu, um TCP wrapper-Protection für den nsca-Service zu
          aktivieren. Dies ist optional, allerdings sehr empfohlen. Fügen Sie "nsca stream tcp nowait &lt;user&gt; /usr/sbin/tcpd
          &lt;nsca-binary&gt; -c &lt;nsca-cfg&gt; --inetd" zur /etc/inetd.conf hinzu, z.B.</para>

          <programlisting> #&gt; echo "nsca stream tcp nowait icinga /usr/sbin/tcpd /usr/local/icinga/bin/nsca -c /usr/local/icinga/etc/nsca.cfg --inetd" &gt;&gt; /etc/inetd.conf
 #&gt; /etc/init.d/inetd restart</programlisting>
        </listitem>

        <listitem>
          <para>inetd OHNE tcpwrappers</para>

          <para>Fügen Sie "nsca stream tcp nowait &lt;user&gt; &lt;nsca-binary&gt; -c &lt;nsca-cfg&gt; --inetd" zur /etc/inetd.conf hinzu,
          z.B.</para>

          <programlisting> #&gt; echo "nsca stream tcp nowait icinga /usr/local/icinga/bin/nsca -c /usr/local/icinga/etc/nsca.cfg --inetd" &gt;&gt; /etc/inetd.conf
 #&gt; /etc/init.d/inetd restart</programlisting>
        </listitem>

        <listitem>
          <para>xinetd</para>

          <para>Consider editing the config file nsca.xinetd in the sample-config folder and replacing &lt;ipaddress1&gt;... by the IP
          addresses of your client machines (where send_nsca will be running). This only works if xinetd was compiled with support for
          tcpwrappers. If you are running DHCP then this will not work and you should delete this line.</para>

          <para>Fügen Sie Einträge zu Ihrer /etc/hosts.allow und /etc/hosts.deny hinzu, um TCP wrapper-Protection für den nsca-Service zu
          aktivieren. Dies ist optional, allerdings sehr empfohlen. Fügen Sie "nsca stream tcp nowait &lt;user&gt; /usr/sbin/tcpd
          &lt;nsca-binary&gt; -c &lt;nsca-cfg&gt; --inetd" zur /etc/inetd.conf hinzu, z.B.</para>

          <programlisting> #&gt; cp -p ../sample-config/nsca.xinetd /etc/xinetd.d/
 #&gt; /etc/init.d/xinetd restart</programlisting>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Entfernte/s System/e</emphasis></para>

  <para>Sie sind mit dem lokalen System fertig, aber natürlich muss send_nsca noch auf entfernte Systeme kopiert werden.</para>

  <para>Bitte denken Sie daran, dass send_nsca für die Zielplattform kompiliert werden muss, so dass Sie ggf. die libmcrypt-Pakete und
  configure/make auf mehreren Servern installieren bzw. ausführen müssen.</para>

  <para><emphasis role="bold">Dateien kopieren</emphasis></para>

  <para>Sie können frei entscheiden, wo Sie Binary und Konfigurationsdatei ablegen möchten. Wir nehmen an, dass Sie eine Verzeichnisstruktur
  haben, die ähnlich zum &name-icinga;-Server ist.</para>

  <programlisting> #&gt; scp -p &lt;&name-icinga; server&gt;:/usr/local/icinga-nsca/src/send_nsca /usr/local/icinga/bin/
 #&gt; scp -p &lt;&name-icinga; server&gt;:/usr/local/icinga-nsca/sample-config/send_nsca.cfg /usr/local/icinga/etc/</programlisting>

  <para><emphasis role="bold">Zweiter Test</emphasis></para>

  <para>Nun können Sie den Test auf dem entfernten System ausführen</para>

  <programlisting> #&gt; su - icinga
 $&gt; echo -e "A\tB\tC\D\n" | /usr/local/icinga/bin/send_nsca -H &lt;&name-icinga; server&gt; -c /usr/local/icinga/etc/send_nsca.cfg</programlisting>

  <para>Dies sollte ebenfalls die Meldung "1 data packet(s) sent to host successfully." liefern und es sollte Warnungen im icinga.log auf
  dem &name-icinga;-Server geben, die ähnlich zu den o.g. sind. Wenn es keine Meldungen gibt, dann prüfen Sie die Einstellung von <link
  linkend="configmain-log_passive_checks">log_passive_checks</link> in <literal>icinga.cfg</literal>.</para>

  <para><emphasis role="bold">Fehlersuche</emphasis></para>

  <para>Wenn der Daemon nicht berechtigt ist, in die Command-Pipe zu schreiben, dann sind die Daten verloren! Der Daemon sollte mit dem
  gleichen Benutzer laufen wie &name-icinga;.</para>

  <para>Wenn das Objekt (Host und/oder Service) nicht in der laufenden Konfiguration enthalten ist, werden die Daten verworfen.</para>

  <para>Host-Name (und Service-Beschreibung, falls zutreffend) sind Case-sensitiv und müssen exakt mit den Definitionen in &name-icinga;
  übereinstimmen.</para>

  <para>Prüfen Sie, ob Sie in nsca.cfg und send_nsca.cfg das gleiche Passwort angegeben haben. Anderenfalls wird die Übertragung
  fehlschlagen.</para>

  <para>Prüfen Sie, ob Sie gleiche Verschlüsselungs-/Entschlüsselungsmethode verwenden. Anderenfalls wird die Übertragung
  fehlschlagen.</para>

  <para>Prüfen Sie, ob Ihre Firewall-Einstellungen die Kommunikation über den angegebenen Port zulassen (Default ist 5667)</para>

  <para>Wenn Sie xinetd verwenden, dann prüfen Sie, ob die hinter "only_from=" angegebenen IP-Adressen zu den entfernten Systemen passen
  oder entfernen Sie diese Zeile (und starten Sie xinetd neu).</para>

  <para>Aktivieren Sie "debug=1" in <literal>nsca.cfg</literal>, starten Sie den Daemon (neu) und schauen Sie nach Meldungen im Syslog / in
  <literal>nsca.log</literal>.</para>

  <para><emphasis role="bold">Sicherheit</emphasis></para>

  <para>Es gibt einige Sicherheitsimplikationen, wenn Sie entfernten Clients erlauben, Prüfergebnisse an &name-icinga; zu senden. Daher gibt
  es die Möglichkeit, die Pakete zu verschlüsseln, die der &name-nsca;-Client an den &name-nsca;-Daemon sendet. Lesen Sie die
  SECURITY-Datei, um weitere Informationen über die Sicherheitsrisiken zu erhalten, die durch den Betrieb von &name-nsca; auftreten können,
  zusammen mit einer Erklärung, welche Art von Schutz die Verschlüsselung Ihnen bietet.</para>

  <para><emphasis role="bold">Betrieb</emphasis></para>

  <para>send_nsca wird benutzt, um die Pürfergebnisse vom entfernten Rechner zum &name-icinga;-Server zu senden. Die Syntax hängt vom
  Objekttyp ab. Um Service-Prüfergebnisse zu versenden, benutzen Sie</para>

  <para>&lt;host_name&gt;[tab]&lt;svc_description&gt;[tab]&lt;return_code&gt;[tab]&lt;plugin_output&gt;[newline]</para>

  <para>wobei:</para>

  <para>&lt;host_name&gt;=der Kurzname des Hosts, mit dem der Service verbunden ist (wie in der host_name-Direktive der Service-Definition
  angegeben)</para>

  <para>&lt;svc_description&gt;=Beschreibung des Service (wie in der service_description-Direktive der Service-Definition angegeben)</para>

  <para>&lt;return_code&gt;=numerischer Return-Code (0,1,2,3 wie <link linkend="pluginapi">hier</link> beschrieben)</para>

  <para>&lt;plugin_output&gt;=Ausgabe des Service-Check</para>

  <para>Host-Prüfergebnisse werden in einer ähnlichen Form versandt - lassen Sie einfach die Service-Beschreibung weg:</para>

  <para>&lt;host_name&gt;[tab]&lt;return_code&gt;[tab]&lt;plugin_output&gt;[newline]</para>

  <para><emphasis role="bold">Integration in Icinga</emphasis></para>

  <para>Bisher haben Sie lediglich einige Voraussetzungen geschaffen, um passive Prüfergebnisse zu übermitteln, aber Sie haben noch keinen
  Host oder Service definiert, der diese Funktionalität nutzt.</para>

  <para>Obwohl Sie nur Prüfergebnisse empfangen müssen Sie doch die "check_command"-Direktive in Ihren Definitionen angeben. Es gibt ein
  Plugin namens "check_dummy", das für diesen Zweck benutzt werden kann. Es kann sein, dass Sie die folgende command-Definition einfügen
  müssen, falls sie noch nicht vorhanden ist. Das zweite Argument ist optional und kann z.B. einen erklärenden Text enhalten.</para>

  <para><programlisting> define command{
    command_name check_dummy
    command_line $USER1$/check_dummy $ARG1$ $ARG2$
    }</programlisting>Vielleicht möchten Sie ein Service-Template anlegen. Das Host-Template könnte ähnlich aussehen (ersetzen Sie einfach
  "service" durch "host")</para>

  <para><programlisting> define service{
    use                     generic-service   # template to inherit from
    name                    passive-service   # name of this template
    active_checks_enabled   0                 # no active checks
    passive_checks_enabled  1                 # allow passive checks
    check_command           check_dummy!0     # use "check_dummy", RC=0 (OK)
    check_period            24x7              # check active all the time
    check_freshness         0                 # don't check if check result is "stale"
    register                0                 # this is a template, not a real service
    }</programlisting>Zusammen mit dem obigen template könnte die Service-Definition wie folgt aussehen:</para>

  <para><programlisting> define service{
    use                     passive-service   # template to inherit from
    host_name               remotehost        # host where send_nsca is located
    service_description     Diskspace         # service to be checked
    }</programlisting>Starten Sie &name-icinga; erneut, damit die Änderungen in der laufenden Konfiguration enthalten sind</para>

  <para><programlisting> #&gt; /etc/init.d/icinga restart</programlisting>Wechseln Sie auf Ihrem entfernten Host zum &name-icinga;-Benutzer
  und führen Sie send_nsca aus. Ersetzen Sie dabei &lt;Icinga server&gt; durch die IP-Adresse des &name-icinga;-Servers</para>

  <para><programlisting> #&gt; su - icinga
 $&gt; echo -e "remotehost\tDiskspace\t0\t/var=78%\n" | /usr/local/icinga/bin/send_nsca -H &lt;Icinga server&gt; -c /usr/local/icinga/etc/send_nsca.cfg</programlisting>Bitte
  denken Sie daran, dass Host-Name und Service-Beschreibung exakt den Angaben in Ihrer Icinga-Definition entsprechen müssen (die Angaben
  sind Case-sensitiv). Andernfalls bekommen Sie Meldungen in icinga.log, dass das Objekt nicht gefunden werden kann. Falls es keine
  Meldungen gibt, kontrollieren Sie die Einstellung von <link linkend="configmain-log_passive_checks">log_passive_checks</link> in
  <literal>icinga.cfg</literal>.</para>

  <para>Nach einem kurzen Moment sollten Sie Meldungen in icinga.log sehen, dass die gesendeten Informationen verarbeitet wurden. Sie
  sollten die Daten dann auch im klassischen Web-Interface sehen sowie feststellen, dass der Service-Status von "Pending" auf "OK"
  gewechselt ist und die Ausgabe die Daten enthält, die Sie versandt haben.</para>

  <indexterm zone="nsca">
    <primary>NSCA</primary>

    <secondary>nsca</secondary>
  </indexterm>

  <indexterm zone="nsca">
    <primary>NSCA</primary>

    <secondary>send_nsca</secondary>
  </indexterm>
</section>
