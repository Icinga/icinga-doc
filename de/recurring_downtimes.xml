<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="recurring_downtimes" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title><anchor xml:id="recurring_downtime"/>Wiederkehrende Ausfallzeiten</title>

  <para>Viele Leute haben regelmäßige Ausfallzeiten zu verschiedenen Zeiten und es wäre eine mühselige Arbeit, sie immer wieder manuell
  einzuplanen. Bisher gibt es kein offizielles Format, um solche Planungen zu definieren. Das bedeutet, dass diese Definitionen in einer
  eigenen Datei gespeichert werden müssen, die nicht in die anderen Objektdefinitionen eingebunden werden darf. Ein cronjob ruft ein Skript
  auf, dass diese Definitionen liest, bereits existierende Ausfallzeiten berücksichtigt und neue Ausfallzeiten plant, falls
  notwendig.</para>

  <para><emphasis role="bold">Ausfallzeiten definieren</emphasis></para>

  <para>&name-icinga; nutzt ein neues Format für diese Ausfallzeiten, das auf existierenden Definitionen basiert, die aus der Statusdatei
  und den Zeitfenster-Defnitionen stammen:</para>

  <programlisting> define downtime {
    host_name           some host 
    hostgroups          some hostgroup
    servicegroups       some servicegroup
    service_description some service
    author              some author
    comment             some comment
    duration            30
    downtime_period     2011-10-02 - 2011-10-10 10:00-12:00
    fixed               0
    propagate           1
    register            0
}</programlisting>

  <para>Anmerkungen zu den obigen Definitionen:</para>

  <itemizedlist>
    <listitem>
      <para>"host_name", "hostgroups" und "servicegroups" sind zwingend und schließen sich gegenseitig aus.</para>
    </listitem>

    <listitem>
      <para>"service_description" ist optional. Wenn nicht definiert, dann wird eine Ausfallzeit für eine/n Host / Hostgruppe(n) /
      Servicegruppe(n) geplant. Wenn es definiert wird, dann kann es ein einzelner Service oder "all" für alle Services eines einzelnen
      Hosts oder alle Hosts einer Hostgruppe sein.</para>
    </listitem>

    <listitem>
      <para>"duration" ist optional, muss aber definiert sein, wenn eine flexible Ausfallzeit geplant werden soll.</para>
    </listitem>

    <listitem>
      <para>"fixed" ist optional und wird "0" sein, wenn "duration" definiert ist und die Differenz von start time-end time davon
      abweicht.</para>
    </listitem>

    <listitem>
      <para>"propagate" ist optional und der Default-Wert ist "0". Wenn gesetzt, dann wird die Ausfallzeit auch an abhängige Hosts des
      angegebenen Hosts "propagiert".</para>
    </listitem>

    <listitem>
      <para>"register" kann genutzt werden, um diese Definition zu deaktieren. Es hat den gleichen Effekt, als würde die Definition nicht
      existieren.</para>
    </listitem>

    <listitem>
      <para>"downtime_period" ist ähnlich zu der Definition, die in <link linkend="objectdefinitions-timeperiod">time periods</link> zu
      finden ist. Das bedeutet, dass jede der folgenden Zeilen gültig sein sollte:</para>

      <programlisting>   downtime_period     2011-10-01              20:00-02:00
   downtime_period     2011-10-10 - 2011-10-20 10:00-12:00
   downtime_period     day 1 - 3               04:00-12:00
   downtime_period     sunday                  00:00-24:00
   downtime_period     monday - wednesday      20:00-22:00
   downtime_period     monday                  00:00-09:00,17:00-24:00
   downtime_period     1999-01-28              00:00-24:00
   downtime_period     saturday                00:00-24:00
   downtime_period     monday 3                00:00-24:00
   downtime_period     day 2                   00:00-24:00
   downtime_period     february 10             00:00-24:00
   downtime_period     february -1             00:00-24:00
   downtime_period     friday -2               00:00-24:00
   downtime_period     thursday -1 november    00:00-24:00
   downtime_period     2007-01-01 - 2008-02-01 00:00-24:00
   downtime_period     monday 3 - thursday 4   00:00-24:00
   downtime_period     day 1 - 15              00:00-24:00
   downtime_period     day 20 - -1             00:00-24:00
   downtime_period     july 10 - 15            00:00-24:00
   downtime_period     april 10 - may 15       00:00-24:00
   downtime_period     tuesday 1 april - friday 2 may      00:00-24:00
   downtime_period     2007-01-01 - 2008-02-01 / 3         00:00-24:00
   downtime_period     2008-04-01 / 7                      00:00-24:00
   downtime_period     monday 3 - thursday 4 / 2           00:00-24:00
   downtime_period     day 1 - 15 / 5                      00:00-24:00
   downtime_period     july 10 - 15 / 2                    00:00-24:00
   downtime_period     tuesday 1 april - friday 2 may / 6  00:00-24:00</programlisting>

      <para>Bitte beachten Sie, dass wie auch bei Zeitfenstern mehrere "downtime_period"-Einträge pro Definition möglich sind, um
      verschiedene Zeiten für ein einzelnes Objekt zu planen wie im Folgenden:</para>

      <programlisting> define downtime {
    ...
    comment            Backup: incr on wed, full on sat
    downtime_period    wednesday 20:00-21:00
    downtime_period    saturday  20:00-23:30
}</programlisting>

      <para>Nun, es gibt ein kleines Manko. Auf diese Weise können Sie keine flexiblen Ausfallzeiten mit unterschiedlichen Zeiten
      definieren.</para>
    </listitem>
  </itemizedlist>

  <para><emphasis role="bold">Variable Daten</emphasis></para>

  <para>Die obigen Definitionen funktionieren für die meisten Daten, aber es gibt einige, die auf dem Osterfest basieren, das jedes Jahr an
  einem anderen Tag ist. Wir haben versucht, diesen Engpass zu beseitigen, indem wir diese Daten berechnen und ihnen Namen geben, die Sie
  benutzen können. Die Namen sind unabhängig von Groß- und Kleinschreibung. In Klammern finden Sie deutsche Bezeichnungen, die Sie ebenfalls
  benutzen können:</para>

  <informaltable>
    <tgroup cols="2">
      <thead>
        <row>
          <entry align="center">Variablenname</entry>

          <entry align="center">Offset / Datum</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>Twelfth_day (Heilige_drei_Koenige)</entry>

          <entry>6. Januar</entry>
        </row>

        <row>
          <entry>Labour_day (Tag_der_Arbeit)</entry>

          <entry>1. Mai</entry>
        </row>

        <row>
          <entry>Carnival_monday (Rosenmontag)</entry>

          <entry>-48</entry>
        </row>

        <row>
          <entry>Mardi_gras (Faschingsdienstag)</entry>

          <entry>-47</entry>
        </row>

        <row>
          <entry>Ash_wednesday (Aschermittwoch)</entry>

          <entry>-46</entry>
        </row>

        <row>
          <entry>Maundy_thursday (Gruendonnerstag)</entry>

          <entry>-3</entry>
        </row>

        <row>
          <entry>Good_friday (Karfreitag)</entry>

          <entry>-2</entry>
        </row>

        <row>
          <entry>Easter_sunday (Ostersonntag)</entry>

          <entry>0</entry>
        </row>

        <row>
          <entry>Easter_monday (Ostermontag)</entry>

          <entry>1</entry>
        </row>

        <row>
          <entry>Ascension_day (Chr_Himmelfahrt)</entry>

          <entry>+39</entry>
        </row>

        <row>
          <entry>Whit_sunday (Pfingstsonntag)</entry>

          <entry>+49</entry>
        </row>

        <row>
          <entry>Whit_monday (Pfingstmontag)</entry>

          <entry>+50</entry>
        </row>

        <row>
          <entry>Trinity (Trinitatis)</entry>

          <entry>+56</entry>
        </row>

        <row>
          <entry>Corpus_christi (Fronleichnam)</entry>

          <entry>+70</entry>
        </row>

        <row>
          <entry>Assumption_day (Maria_Himmelfahrt)</entry>

          <entry>8. August</entry>
        </row>

        <row>
          <entry>Penance_day (Buss_und_Bettag)</entry>

          <entry>Mittwoch vor dem 23. Nov.</entry>
        </row>

        <row>
          <entry>Christmas_day (Weihnachtstag_1)</entry>

          <entry>25. Dezember</entry>
        </row>

        <row>
          <entry>Boxing_day (Weihnachtstag_2)</entry>

          <entry>26. Dezember, 26th</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>Auf diese Weise können Sie eine Ausfallzeit für Rosenmontag wie folgt definieren:</para>

  <programlisting> define downtime {
    ...
    comment            Cheer up, lads
    downtime_period    Rosenmontag 09:00-17:00
 }</programlisting>

  <para><emphasis role="bold">Lokale Feiertage</emphasis></para>

  <para>Beim Blick auf die Kalender verschiedener Länder gibt es eine Reihe von Feiertagen, die nur in einem bestimmten Land gelten.
  Unglücklicherweise sind einige dieser Daten an einem Wochentag einer Woche in einem Monat. Sie können diese Daten bereits durch Angaben
  wie "monday 3 february" oder "monday -1 may" definieren, aber vielleicht möchten Sie auch hier Variablennamen benutzen. Durch Definition
  der Namen und der zugehörigen Berechnung in einer eigenen Datei können Sie das tun. Als Standard wird im Verzeichnis
  <filename>/usr/local/icinga/etc</filename> nach <filename>holiday.cfg</filename> gesucht. Name und Standort können über die Option "-l"
  eingestellt werden.</para>

  <para>Wir haben nur drei Daten ausgewählt, um Ihnen die Vorgehensweise zu zeigen:</para>

  <programlisting># example of local holiday definitions
# please don't use local characters
# variable names must not contain spaces
#
Presidents_day        day_in_week_of_month(2,1,3)
Spring_Bank_Holiday   day_in_week_of_month(5,1,-1)
Pentecote             date_easter(49)</programlisting>

  <para>Es gibt zwei "Funktionen", mit denen flexible Daten definiert werden können:</para>

  <itemizedlist>
    <listitem>
      <para>"day_in_week_of_month": Sie müssen drei Parameter angeben</para>

      <itemizedlist>
        <listitem>
          <para>Monat: 1 = Januar ... 12 = Dezember</para>
        </listitem>

        <listitem>
          <para>Tag: 1 = Montag ... 7 = Sonntag</para>
        </listitem>

        <listitem>
          <para>Woche: 1 .. 5 für die Woche im Monat oder -1 für die letzte Woche des Monats</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>"date_easter": Die Zahl gibt den Abstand zum Ostersonntag an</para>
    </listitem>
  </itemizedlist>

  <para>Jetzt können Sie eine Ausfallzeit wie folgt definieren:</para>

  <programlisting> define downtime {
    ...
    comment            Das Weibsvolk ist unterwegs
    downtime_period    Weiberfastnacht  09:00-17:00
 }</programlisting>

  <para>Bitte beachten Sie, dass Sie den Standort der Datei über die Option "-l" angeben müssen.</para>

  <para><emphasis role="bold">Eingaben von Ausfallzeiten</emphasis></para>

  <para>Bisher gibt es keine Möglichkeit, die Definitionen über den Browser einzugeben, so dass Sie Ihren bevorzugten Editor benutzen
  müssen, um die Ausfallzeiten einzugeben. Sorry.</para>

  <para><emphasis role="bold">Planen von Ausfallzeiten</emphasis></para>

  <para>Sobald Sie eine Datei angelegt haben, die die Definitionen von Ausfallzeiten enthält, möchten Sie sicherlich, dass die Ausfallzeiten
  automatisch geplant werden. Dies kann über das Perl-Skript "sched_down.pl" erfolgen, das über die crontab aufgerufen wird. Das Skript
  selbst benötigt das Perl-Modul "Date::Calc".</para>

  <para>Der einfachste Weg ist, "/Pfad/zu/sched_down.pl" aufzurufen. Wenn Sie die Option "-h" hinzufügen, erhalten Sie einige
  Informationen:</para>

  <programlisting>   -c | --config=s     Icinga main config
                       default: /usr/local/icinga/etc/icinga.cfg
   -s | --schedule=s   schedule definitions
                       default: /usr/local/icinga/etc/downtime.cfg
   -l | --local=s      local holiday definitions
                       default: /usr/local/icinga/etc/holiday.cfg
   -m | --max_ahead=s  plan max. days ahead (default = 2)
   -f | --forecast=s   forecast next schedules
   -e | --examine=s    examine period and show next schedule
                       specify date and time instead like in downtime_period
   -t | --timestamp=s  specify deviating date/time
                       YYYYMMDDhhmi, YYYYMMDD, or hhmi
   -d | --debug=s      0|1|2|3 (default = 1)
   -h | --help         display this help

Note: Enabled debugging, forecasting, and/or examine will prevent that schedules
      are sent to the command pipe (downtimes are only calculated)!

Setting environment variables influences the behaviour:
- FAKE_DATE (YYYYMMDD): date deviating from current date
- FAKE_TIME (HHMM)    : time deviating from current time
- DEBUG (0|1|2|3)     : disables/enables debugging information
  0 = no debugging / cmds are sent to external command pipe!
  Note: command line options take precedence over environment variables </programlisting>

  <para>Alle Parameter sind optional. Um lediglich die Funktion des Skripts zu prüfen, ist es vielleicht hilfreich, die "examine"-Option
  gefolgt von einer Ausfallzeitdefinition zu nutzen:</para>

  <programlisting> /usr/local/icinga/libexec/sched_down.pl -e "tuesday 20:00-21:00"</programlisting>

  <para>Dies wird eine Zeichenkette zurückliefern, die dem tatsächlichen Befehl ähnlich ist, falls die Ausfallzeit innerhalb der
  Planungsperiode ist (Standard zwei Tage), die über die Option "-m" verändert werden kann. Um Ausfallzeiten in der Zukunft zu simulieren,
  kann es hilfreich sein, über die Umgebungsvariable FAKE_DATE (z.B. FAKE_DATE=20130127) ein anderes Datum zu setzen, bevor Sie das Skrtip
  aufrufen. Es kann einfacher sein, dafür die Option "-t" zu benutzen.</para>

  <para>Es gibt zwei Möglichkeiten, das Script auszuführen:</para>

  <itemizedlist>
    <listitem>
      <para>Als eine aktive Prüfung</para>

      <para>Sie können das Script mit einem passenden Prüfintervall wie eine normale aktive Prüfung aufrufen</para>

      <programlisting> define service {
    host_name             icinga-server
    service_description   schedule_downtimes
    check_command         schedule_script!-d0
    check_interval        60
    retry_interval        60
    check_period          24x7
    ...
 }

 define command {
    command_name          schedule_script
    command_line          $USER1$/sched_down.pl $ARG1$
 }</programlisting>
    </listitem>

    <listitem>
      <para>Über die crontab</para>

      <para>Eine Zeile in der crontab des &name-icinga;-Benutzers, das das Script jede volle Stunde aufruft, könnte wie folgt
      aussehen</para>

      <programlisting> 0 * * * * /usr/local/icinga/bin/sched_down.pl -d0</programlisting>
    </listitem>
  </itemizedlist>

  <para>Solange die Ausfallzeiten nicht sehr kurzfristig geplant werden, sollte das ausreichen. Das Script wird lediglich neue Ausfallzeiten
  planen, so dass es keine Schwierigkeiten gibt, wenn es öfter aufgerufen wird.</para>

  <para><emphasis role="bold">Konvertieren von Ausfallzeitdefinitionen</emphasis></para>

  <para>Steve Shipway hat bereits vor längerer Zeit Skripte geschrieben, um Ausfallzeiten per CGI zu erzeugen und sie für verschiedene
  Nagios-Versionen zu planen (<link
  xlink:href="https://www.monitoringexchange.org/inventory/Utilities/AddOn-Projects/Downtimes/downtime_sched%253A-recurring-downtime-scheduler">siehe
  hier</link>).</para>

  <para>Die kommerzielle Nagios-Version hat ebenfalls wiederkehrende Ausfallzeiten, aber anstatt alle Skripte von Steve zu nutzen haben sie
  entschieden, nur das Planungsskript zu verwenden und ein neues CGI zu schreiben, das allerdings anscheinend keine flexiblen Ausfallzeiten
  unterstützt (zumindest nicht in der 2011 VM).</para>

  <para>Das Perl-Skript "sched_conv.pl" wird Dateien konvertieren, die von beiden genannten Quellen erzeugt wurden. Sie können auch hier die
  Option "-h" benutzen, um ein wenig Hilfe zu erhalten.</para>

  <para><emphasis role="bold">Dateien</emphasis></para>

  <para>Die Perl-Scripte finden Sie im Ordner <filename>contrib/downtimes</filename>.</para>

  <indexterm zone="recurring_downtimes">
    <primary>Ausfallzeit</primary>

    <secondary>wiederkehrende</secondary>
  </indexterm>

  <indexterm zone="recurring_downtimes">
    <primary>Downtime</primary>

    <secondary>wiederkehrende</secondary>
  </indexterm>
</section>
