<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % all.entities SYSTEM "all-entities.ent">
%all.entities;
]>
<section version="5.0" xml:id="dependencies" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Host- und Service-Abhängigkeiten</title>

  <para><emphasis role="bold">Einführung</emphasis></para>

  <para>Service- und Hostabhängigkeiten sind ein fortgeschrittenes Feature von &name-icinga;, dass Ihnen die Kontrolle über Hosts
  und Services erlaubt basierend auf dem Status von einem oder mehreren anderen Hosts oder Services. Wir werden erklären, wie
  Abhängigkeiten arbeiten, zusammen mit den Unterschieden zwischen Host- und Service-Abhängigkeiten.</para>

  <para><emphasis role="bold">Überblick Service-Abhängigkeiten</emphasis></para>

  <para>Es gibt ein paar Dinge, die Sie über Service-Abhängigkeiten wissen sollten:</para>

  <orderedlist>
    <listitem>
      <para>ein Service kann von einem oder mehreren Services abhängig sein</para>
    </listitem>

    <listitem>
      <para>ein Service kann von Services abhängig sein, die nicht mit dem gleichen Host verbunden sind</para>
    </listitem>

    <listitem>
      <para>Service-Abhängigkeiten werden nicht vererbt (solange es nicht explizit konfiguriert wurde)</para>
    </listitem>

    <listitem>
      <para>Service-Abhängigkeiten können benutzt werden, um Service-Prüfungen auszuführen und Service-Benachrichtigungen können
      unter verschiedenen Umständen unterdrückt werden (OK, WARNING, UNKNOWN und/oder CRITICAL-Zustände)</para>
    </listitem>

    <listitem>
      <para>Service-Abhängigkeiten sind ggf. nur während bestimmter <link linkend="timeperiods">Zeitfenster</link> gültig</para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">Service-Abhängigkeiten definieren</emphasis></para>

  <para>Zuerst die Grundlagen. Sie erstellen Service-Abhängigkeiten durch Hinzufügen von <link
  linkend="objectdefinitions-servicedependency">Service-Abhängigkeitsdefinitionen</link> in der/n <link
  linkend="configobject">Objekt-Konfigurationsdatei(en)</link>. In jeder Definition geben Sie den <emphasis>abhängigen</emphasis>
  Service an, den Service, von dem sie <emphasis>abhängen</emphasis> und die Kriterien (falls vorhanden), die die Ausführung und
  Benachrichtungsabhängigkeiten fehlschlagen lassen (diese werden später beschrieben).</para>

  <para>Sie können mehrere Abhängigkeiten für einen bestimmten Service erstellen, aber Sie müssen eine eigene
  Service-Abhängigkeitsdefinition anlegen für jede Abhängigkeit, die Sie erstellen.</para>

  <para><emphasis role="bold">Beispiel Service-Abhängigkeiten</emphasis></para>

  <para>Das folgende Bild zeigt ein beispielhaftes Logik-Layout von Service-Benachrichtigungen und Ausführungsabhängigkeiten.
  Verschiedene Services sind abhängig von anderen Services bzgl. Benachrichtigungen und Prüfausführung.</para>

  <mediaobject>
    <imageobject>
      <imagedata fileref="../images/service-dependencies.png" format="PNG"></imagedata>
    </imageobject>
  </mediaobject>

  <para>In diesem Beispiel würde die Abhängigkeitsdefinition für <emphasis>Service F</emphasis> auf <emphasis>Host C</emphasis>
  wie folgt aussehen:</para>

  <screen> define servicedependency{
        host_name                       Host B
        service_description             Service D
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      o
        notification_failure_criteria   w,u
        }
 define servicedependency{
        host_name                       Host B
        service_description             Service E
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      n
        notification_failure_criteria   w,u,c
        }
 define servicedependency{
        host_name                       Host B
        service_description             Service C
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      w
        notification_failure_criteria   c
        }</screen>

  <para>Die anderen im obigen Bild gezeigten Abhängigkeitsdefinitionen würden wie folgt definiert:</para>

  <screen> define servicedependency{
        host_name                       Host A
        service_description             Service A
        dependent_host_name             Host B
        dependent_service_description   Service D
        execution_failure_criteria      u
        notification_failure_criteria   n
        }
 define servicedependency{
        host_name                       Host A
        service_description             Service B
        dependent_host_name             Host B
        dependent_service_description   Service E
        execution_failure_criteria      w,u
        notification_failure_criteria   c
        }
 define servicedependency{
        host_name                       Host B
        service_description             Service C
        dependent_host_name             Host B
        dependent_service_description   Service E
        execution_failure_criteria      n
        notification_failure_criteria   w,u,c
        }</screen>

  <para><emphasis role="bold">Wie Service-Abhängigkeiten getestet werden</emphasis></para>

  <para>Bevor &name-icinga; eine Service-Prüfung ausführt oder Benachrichtigungen für einen Service versendet, wird es prüfen, ob
  der Service irgendwelche Abhängigkeiten hat. Wenn es keine Abhängigkeiten gibt, wird die Prüfung ausgeführt oder die
  Benachrichtigung versandt, wie es sein sollte. Falls der Service ein oder mehrere Abhängigkeiten <emphasis>hat</emphasis>, wird
  &name-icinga; jeden Abhängigkeitseintrag wie folgt prüfen:</para>

  <orderedlist>
    <listitem>
      <para>&name-icinga; erhält den aktuellen Status<superscript> <link linkend="dependencies-hard_dependencies">*</link>
      </superscript> des Services, von dem der Eintrag <emphasis>abhängig</emphasis> ist.</para>
    </listitem>

    <listitem>
      <para>&name-icinga; vergleicht den Status des Services, von dem der Eintrag <emphasis>abhängig</emphasis> ist, gegen die
      Ausführungs- oder Benachrichtigungsfehleroptionen in der Abhängigkeitsdefinition (je nachdem, welche zu dieser Zeit relevant
      ist).</para>
    </listitem>

    <listitem>
      <para>wenn der aktuelle Status des Services, von dem der Eintrag <emphasis>abhängig</emphasis> ist, mit einer der
      Fehleroptionen übereinstimmt, dann wird die Abhängigkeit als fehlerhaft angesehen und &name-icinga; verlässt die
      Abhängigkeits-Prüfschleife.</para>
    </listitem>

    <listitem>
      <para>wenn der aktuelle Status des Services, von dem der Eintrag <emphasis>abhängig</emphasis> ist, nicht mit einer der
      Fehleroptionen übereinstimmt, dann wird die Abhängigkeit als korrekt durchlaufen angesehen und &name-icinga; wird fortfahren
      und den nächsten Abhängigkeitseintrag prüfen.</para>
    </listitem>
  </orderedlist>

  <para>Dieser Ablauf wird ausgeführt, bis entweder alle Abhängigkeiten für diesen Service geprüft wurden oder eine
  Abhängigkeitsprüfung fehlschlägt.</para>

  <para><anchor xml:id="dependencies-hard_dependencies" /><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/note.gif" format="GIF"></imagedata>
      </imageobject>
    </inlinemediaobject> Anmerkung: <superscript>*</superscript>Bitte beachten Sie, dass &name-icinga; per Default den aktuellsten
  <link linkend="statetypes">Hard-Status</link> des/r Services benutzt, von dem der Eintrag abhängig ist, wenn es die
  Abhängigkeitsprüfungen durchführt. Wenn &name-icinga; den aktuellsten Status des/r Services benutzen soll (egal, ob es sich um
  einen Hard- oder Soft-Zustand handelt), dann aktivieren Sie die <link
  linkend="configmain-soft_state_dependencies">soft_state_dependencies</link>-Option.</para>

  <para><emphasis role="bold">Ausführungsabhängigkeiten</emphasis></para>

  <para>Ausführungsabhängigkeiten werden benutzt, um einzuschränken, wann <link linkend="activechecks">aktive Prüfungen</link>
  eines Service ausgeführt werden können. <link linkend="passivechecks">Passive Prüfungen</link> werden durch
  Ausführungsabhängigkeiten nicht eingeschränkt.</para>

  <para>Wenn <emphasis>alle</emphasis> der Ausführungsabhängigkeitstests für den Service <emphasis>erfolgreich</emphasis>
  durchlaufen wurden, wird &name-icinga; die Prüfung für den Service durchführen, wie es das normal tun würde. Wenn auch nur einer
  der Ausführungsabhängigkeiten für einen Service fehlschlägt, wird &name-icinga; vorübergehend die Ausführung von Prüfungen für
  diesen (abhängigen) Service verhindern. Irgendwann in der Zukunft können die Ausführungsabhängigkeitstests für den Service
  erfolgreich durchlaufen werden. Wenn dies geschieht, wird &name-icinga; mit der Prüfung des Service beginnen, wie es das normal
  tun würde. Mehr Informationen über die Logik der Prüfungsplanung finden Sie <link linkend="checkscheduling">hier</link>.</para>

  <para>Im obigen Beispiel wären die Tests der Ausführungsabhängigkeiten für <emphasis role="bold">Service E</emphasis>
  fehlgeschlagen, wenn <emphasis role="bold">Service B</emphasis> in einem WARNING- oder UNKNOWN-Zustand ist. Falls dies der Fall
  ist, würde die Service-Prüfung nicht ausgeführt und die Prüfung würde für eine (mögliche) Ausführung zu einem späteren Zeitpunkt
  geplant.</para>

  <para><emphasis role="bold">Benachrichtigungsabhängigkeiten</emphasis></para>

  <para>Wenn <emphasis>alle</emphasis> der Benachrichtigungsabhängigkeitstests für den Service <emphasis>erfolgreich</emphasis>
  durchlaufen wurden, wird &name-icinga; Benachrichtigungen für den Service versenden, wie es das normal tun würde. Wenn auch nur
  einer der Benachrichtigungsabhängigkeiten für einen Service fehlschlägt, wird &name-icinga; vorübergehend die Benachrichtigungen
  für diesen (abhängigen) Service unterdrücken. Irgendwann in der Zukunft können die Benachrichtigungsabhängigkeitstests für den
  Service erfolgreich durchlaufen werden. Wenn dies geschieht, wird &name-icinga; mit dem Versand von Benachrichtigungen für
  diesen Service beginnen, wie es das normal tun würde. Mehr Informationen über die Benachrichtigungslogik finden Sie <link
  linkend="notifications">hier</link>.</para>

  <para>Im obigen Beispiel wären die Tests der Benachrichtigungsabhängigkeiten für <emphasis role="bold">Service F</emphasis>
  fehlgeschlagen, wenn <emphasis role="bold">Service C</emphasis> in einem CRITICAL-Zustand <emphasis>und/oder</emphasis><emphasis
  role="bold">Service D</emphasis> in einem WARNING- oder UNKNOWN-Zustand <emphasis>und/oder</emphasis><emphasis
  role="bold">Service E</emphasis> in einem WARNING-, UNKNOWN- oder CRITICAL-Zustand ist. Falls dies der Fall ist, würden keine
  Benachrichtigungen versandt werden.</para>

  <para><emphasis role="bold">Abhängigkeitsvererbung</emphasis></para>

  <para>Wie bereits erwähnt werden Service-Abhängigkeiten <emphasis>nicht</emphasis> per Default vererbt. Im obigen Beispiel sehen
  Sie, dass Service F von Service E abhängig ist. Trotzdem erbt er nicht automatisch die Abhängigkeiten von Service E zu Service B
  und Service C. Um Service F von Service C abhängig zu machen, müssen wir eine weitere Service-Abhängigkeitsdefinition
  hinzufügen. Es gibt keine Abhängigkeitsdefinition für Service B, also ist Service F <emphasis>nicht</emphasis> abhängig von
  Service B.</para>

  <para>Wenn Sie Service-Abhängigkeiten vererbbar machen <emphasis>wollen</emphasis>, müssen Sie die
  <emphasis>inherits_parent</emphasis>-Direktive in der <link
  linkend="objectdefinitions-servicedependency">Service-Abhängigkeits</link>-Definition benutzen. Wenn diese Direktive aktiviert
  ist, bedeutet das, dass der Abhängige die Abhängigkeiten des Service erbt, von dem er abhängt (auch als Master-Service
  bezeichnet). Mit anderen Worten, wenn der Master-Service von anderen Services abhängt und eine von diesen Abhängigkeiten
  fehlschlägt, wird auch dieser Service fehlschlagen.</para>

  <para>Stellen Sie sich für das obige Beispiel vor, Sie möchten eine neue Abhängigkeit für Service F hinzufügen, um ihn von
  Service A abhängig zu machen. Sie können eine neue Abhängigkeitsdefinition erzeugen, die Service F als den
  <emphasis>abhängigen</emphasis> Service und Service A als den <emphasis>Master</emphasis>-Service angibt (d.h. der Service, auf
  den F <emphasis>angewiesen</emphasis> ist). Sie können alternativ die Abhängigkeitsdefinition der Services D und F verändern,
  die dann wie folgt aussehen:</para>

  <screen> define servicedependency{
        host_name                       Host B
        service_description             Service D
        dependent_host_name             Host C
        dependent_service_description   Service F
        execution_failure_criteria      o
        notification_failure_criteria   n
        inherits_parent                 1
        }</screen>

  <para>Weil die <emphasis>inherits_parent</emphasis>-Direktive aktiviert ist, werden die Abhängigkeiten zwischen den Services A
  und D getestet, wenn die Abhängigkeiten zwischen den Services F und D getestet werden.</para>

  <para>Abhängigkeiten können mehrere Vererbungsebenen haben. Wenn bei der Abhängigkeitsdefinition zwischen A und D die
  <emphasis>inherits_parent</emphasis>-Direktive aktiviert ist und Service A von einem anderen Service abhängig ist (sagen wir
  Service G), dann wäre Service F von den Services D, A und G abhängig (jeder mit möglicherweise unterschiedlichen
  Kriterien).</para>

  <para><emphasis role="bold">Host-Abhängigkeiten</emphasis></para>

  <para>Wie Sie vielleicht erwarten, arbeiten Host-Abhängigkeiten in einer ähnlichen Weise wie Service-Abhängigkeiten. Der
  Unterschied ist, dass sie für Hosts gelten und nicht für Services.</para>

  <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/tip.gif" format="GIF"></imagedata>
      </imageobject>
    </inlinemediaobject> Hinweis: Verwechseln Sie Host-Abhängigkeiten nicht mit Eltern/Kind-Beziehungen. Sie sollten in den
  meisten Fällen Eltern/Kind-Beziehungen (mit Hilfe der <emphasis>parents</emphasis>-Direktive in den <link
  linkend="objectdefinitions-host">Host</link>-Definitionen) benutzen statt Host-Abhängigkeiten. Eine Beschreibung, wie
  Eltern/Kind-Beziehungen arbeiten, finden Sie in der Dokumentation zur <link
  linkend="networkreachability">Netzwerkerreichbarkeit</link>.</para>

  <para>Hier die Grundlagen zu Host-Abhängigkeiten:</para>

  <orderedlist>
    <listitem>
      <para>ein Host kann von einem oder mehreren Hosts abhängig sein</para>
    </listitem>

    <listitem>
      <para>Host-Abhängigkeiten werden nicht vererbt (solange es nicht explizit konfiguriert wurde)</para>
    </listitem>

    <listitem>
      <para>Host-Abhängigkeiten können genutzt werden, um Host-Prüfungen auszuführen und Host-Benachrichtigungen unter bestimmten
      Umständen zu unterdrücken (UP, DOWN- und/oder UNREACHABLE-Zustände)</para>
    </listitem>

    <listitem>
      <para>Host-Abhängigkeiten sind ggf. nur während bestimmter <link linkend="timeperiods">Zeitfenster</link> gültig</para>
    </listitem>
  </orderedlist>

  <para><emphasis role="bold">Beispiel Host-Abhängigkeiten</emphasis></para>

  <para>Das folgende Bild zeigt ein Beispiel für das logische Layout von Benachrichtigungsabhängigkeiten. Verschiedene Hosts sind
  bzgl. Benachrichtigungen abhängig von anderen Hosts.</para>

  <mediaobject>
    <imageobject>
      <imagedata fileref="../images/host-dependencies.png" format="PNG"></imagedata>
    </imageobject>
  </mediaobject>

  <para>Im obigen Beispiel würden die Abhängigkeitsdefinitionen für <emphasis>Host C</emphasis> wie folgt aussehen:</para>

  <screen> define hostdependency{
        host_name                       Host A
        dependent_host_name             Host C
        notification_failure_criteria   d
        }
 define hostdependency{
        host_name                       Host B
        dependent_host_name             Host C
        notification_failure_criteria   d,u
        }</screen>

  <para>Wie bei Service-Abhängigkeiten werden Host-Abhängigkeiten nicht vererbt. Im Beispielbild sehen Sie, dass Host C nicht die
  Host-Abhängigkeiten von Host B erbt. Um Host C von Host A abhängig zu machen, muss eine neue Host-Abhängigkeitsdefinition
  erstellt werden.</para>

  <para>Host-Benachrichtigungsabhängigkeiten arbeiten in einer ähnlichen Weise wie Service-Benachrichtigungsabhängigkeiten. Wenn
  <emphasis>alle</emphasis> der Benachrichtigungsabhängigkeitstests für den Host <emphasis>erfolgreich</emphasis> durchlaufen
  wurden, wird &name-icinga; Benachrichtigungen für den Host versenden, wie es das normal tun würde. Wenn auch nur einer der
  Benachrichtigungsabhängigkeiten für einen Host fehlschlägt, wird &name-icinga; vorübergehend die Benachrichtigungen für diesen
  (abhängigen) Host unterdrücken. Irgendwann in der Zukunft können die Benachrichtigungsabhängigkeitstests für den Host
  erfolgreich durchlaufen werden. Wenn dies geschieht, wird &name-icinga; mit dem Versand von Benachrichtigungen für diesen Host
  beginnen, wie es das normal tun würde. Mehr Informationen über die Benachrichtigungslogik finden Sie <link
  linkend="notifications">hier</link>.</para>
  <indexterm zone="dependencies"><primary>Abhängigkeiten</primary><secondary>Host- und Service-Abhängigkeiten</secondary></indexterm>
  <indexterm zone="dependencies-hard_dependencies"><primary>Abhängigkeiten</primary><secondary>"harte" Abhängigkeiten</secondary></indexterm>
</section>
